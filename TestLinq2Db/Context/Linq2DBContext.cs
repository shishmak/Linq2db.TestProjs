//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net.NetworkInformation;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

using NpgsqlTypes;

namespace DataModels
{
	/// <summary>
	/// Database       : TestLinq2db
	/// Data Source    : tcp://localhost:5432
	/// Server Version : 9.6.9
	/// </summary>
	public partial class TestLinq2dbDB : LinqToDB.Data.DataConnection
	{
		public ITable<billing_Account>              Accounts              { get { return this.GetTable<billing_Account>(); } }
		public ITable<billing_Appconfig>            Appconfigs            { get { return this.GetTable<billing_Appconfig>(); } }
		public ITable<billing_AspNetRole>           AspNetRoles           { get { return this.GetTable<billing_AspNetRole>(); } }
		public ITable<billing_AspNetUser>           AspNetUsers           { get { return this.GetTable<billing_AspNetUser>(); } }
		public ITable<billing_AspNetUserClaim>      AspNetUserClaims      { get { return this.GetTable<billing_AspNetUserClaim>(); } }
		public ITable<billing_AspNetUserLogin>      AspNetUserLogins      { get { return this.GetTable<billing_AspNetUserLogin>(); } }
		public ITable<billing_AspNetUserRole>       AspNetUserRoles       { get { return this.GetTable<billing_AspNetUserRole>(); } }
		public ITable<billing_Deverror>             Deverrors             { get { return this.GetTable<billing_Deverror>(); } }
		public ITable<billing_Devheatercoefficient> Devheatercoefficients { get { return this.GetTable<billing_Devheatercoefficient>(); } }
		public ITable<billing_Device>               Devices               { get { return this.GetTable<billing_Device>(); } }
		public ITable<billing_DevProp>              DevProps              { get { return this.GetTable<billing_DevProp>(); } }
		public ITable<billing_DevPropType>          DevPropTypes          { get { return this.GetTable<billing_DevPropType>(); } }
		public ITable<billing_Devreading>           Devreadings           { get { return this.GetTable<billing_Devreading>(); } }
		public ITable<billing_DevReadingType>       DevReadingTypes       { get { return this.GetTable<billing_DevReadingType>(); } }
		public ITable<billing_Devstatus>            Devstatus             { get { return this.GetTable<billing_Devstatus>(); } }
		public ITable<billing_Devtype>              Devtypes              { get { return this.GetTable<billing_Devtype>(); } }
		public ITable<billing_Error>                Errors                { get { return this.GetTable<billing_Error>(); } }
		public ITable<billing_Group>                Groups                { get { return this.GetTable<billing_Group>(); } }
		public ITable<billing_GroupDevice>          GroupDevices          { get { return this.GetTable<billing_GroupDevice>(); } }
		public ITable<billing_Heatersconvert>       Heatersconverts       { get { return this.GetTable<billing_Heatersconvert>(); } }
		public ITable<billing_Heatertype>           Heatertypes           { get { return this.GetTable<billing_Heatertype>(); } }
		public ITable<billing_Housedevicereading>   Housedevicereadings   { get { return this.GetTable<billing_Housedevicereading>(); } }
		public ITable<billing_HouseHub>             HouseHubs             { get { return this.GetTable<billing_HouseHub>(); } }
		public ITable<billing_Housenorm>            Housenorms            { get { return this.GetTable<billing_Housenorm>(); } }
		public ITable<billing_ImportResult>         ImportResults         { get { return this.GetTable<billing_ImportResult>(); } }
		public ITable<billing_ImportResultDetail>   ImportResultDetails   { get { return this.GetTable<billing_ImportResultDetail>(); } }
		public ITable<billing_Mapping2>             Mapping2              { get { return this.GetTable<billing_Mapping2>(); } }
		public ITable<billing_Resource>             Resources             { get { return this.GetTable<billing_Resource>(); } }
		public ITable<billing_Role>                 Roles                 { get { return this.GetTable<billing_Role>(); } }
		public ITable<billing_Room>                 Rooms                 { get { return this.GetTable<billing_Room>(); } }
		public ITable<billing_Roomdevice>           Roomdevices           { get { return this.GetTable<billing_Roomdevice>(); } }
		public ITable<billing_Roomtype>             Roomtypes             { get { return this.GetTable<billing_Roomtype>(); } }
		public ITable<billing_Setting>              Settings              { get { return this.GetTable<billing_Setting>(); } }
		public ITable<billing_TempReading>          TempReadings          { get { return this.GetTable<billing_TempReading>(); } }
		public ITable<billing_TmpTable>             TmpTables             { get { return this.GetTable<billing_TmpTable>(); } }
		public ITable<billing_Unit>                 Units                 { get { return this.GetTable<billing_Unit>(); } }
		public ITable<billing_User>                 Users                 { get { return this.GetTable<billing_User>(); } }
		public ITable<billing_UserRole>             UserRoles             { get { return this.GetTable<billing_UserRole>(); } }

		public void InitMappingSchema()
		{
			MappingSchema.SetConvertExpression<object[], pg_control_checkpointResult>(tuple => new pg_control_checkpointResult() { checkpoint_location = (object)tuple[0], prior_location = (object)tuple[1], redo_location = (object)tuple[2], redo_wal_file = (string)tuple[3], timeline_id = (int?)tuple[4], prev_timeline_id = (int?)tuple[5], full_page_writes = (bool?)tuple[6], next_xid = (string)tuple[7], next_oid = (int?)tuple[8], next_multixact_id = (int?)tuple[9], next_multi_offset = (int?)tuple[10], oldest_xid = (int?)tuple[11], oldest_xid_dbid = (int?)tuple[12], oldest_active_xid = (int?)tuple[13], oldest_multi_xid = (int?)tuple[14], oldest_multi_dbid = (int?)tuple[15], oldest_commit_ts_xid = (int?)tuple[16], newest_commit_ts_xid = (int?)tuple[17], checkpoint_time = (DateTimeOffset?)tuple[18] });
			MappingSchema.SetConvertExpression<object[], pg_control_initResult>(tuple => new pg_control_initResult() { max_data_alignment = (int?)tuple[0], database_block_size = (int?)tuple[1], blocks_per_segment = (int?)tuple[2], wal_block_size = (int?)tuple[3], bytes_per_wal_segment = (int?)tuple[4], max_identifier_length = (int?)tuple[5], max_index_columns = (int?)tuple[6], max_toast_chunk_size = (int?)tuple[7], large_object_chunk_size = (int?)tuple[8], bigint_timestamps = (bool?)tuple[9], float4_pass_by_value = (bool?)tuple[10], float8_pass_by_value = (bool?)tuple[11], data_page_checksum_version = (int?)tuple[12] });
			MappingSchema.SetConvertExpression<object[], pg_control_recoveryResult>(tuple => new pg_control_recoveryResult() { min_recovery_end_location = (object)tuple[0], min_recovery_end_timeline = (int?)tuple[1], backup_start_location = (object)tuple[2], backup_end_location = (object)tuple[3], end_of_backup_record_required = (bool?)tuple[4] });
			MappingSchema.SetConvertExpression<object[], pg_control_systemResult>(tuple => new pg_control_systemResult() { pg_control_version = (int?)tuple[0], catalog_version_no = (int?)tuple[1], system_identifier = (long?)tuple[2], pg_control_last_modified = (DateTimeOffset?)tuple[3] });
			MappingSchema.SetConvertExpression<object[], pg_create_logical_replication_slotResult>(tuple => new pg_create_logical_replication_slotResult() { slot_name = (string)tuple[0], xlog_position = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_create_physical_replication_slotResult>(tuple => new pg_create_physical_replication_slotResult() { slot_name = (string)tuple[0], xlog_position = (object)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_get_object_addressResult>(tuple => new pg_get_object_addressResult() { classid = (int?)tuple[0], objid = (int?)tuple[1], subobjid = (int?)tuple[2] });
			MappingSchema.SetConvertExpression<object[], pg_identify_objectResult>(tuple => new pg_identify_objectResult() { type = (string)tuple[0], schema = (string)tuple[1], name = (string)tuple[2], identity = (string)tuple[3] });
			MappingSchema.SetConvertExpression<object[], pg_identify_object_as_addressResult>(tuple => new pg_identify_object_as_addressResult() { type = (string)tuple[0], object_names = (object)tuple[1], object_args = (object)tuple[2] });
			MappingSchema.SetConvertExpression<object[], pg_last_committed_xactResult>(tuple => new pg_last_committed_xactResult() { xid = (int?)tuple[0], timestamp = (DateTimeOffset?)tuple[1] });
			MappingSchema.SetConvertExpression<object[], pg_sequence_parametersResult>(tuple => new pg_sequence_parametersResult() { start_value = (long?)tuple[0], minimum_value = (long?)tuple[1], maximum_value = (long?)tuple[2], increment = (long?)tuple[3], cycle_option = (bool?)tuple[4] });
			MappingSchema.SetConvertExpression<object[], pg_stat_fileResult>(tuple => new pg_stat_fileResult() { size = (long?)tuple[0], access = (DateTimeOffset?)tuple[1], modification = (DateTimeOffset?)tuple[2], change = (DateTimeOffset?)tuple[3], creation = (DateTimeOffset?)tuple[4], isdir = (bool?)tuple[5] });
			MappingSchema.SetConvertExpression<object[], pg_stat_get_archiverResult>(tuple => new pg_stat_get_archiverResult() { archived_count = (long?)tuple[0], last_archived_wal = (string)tuple[1], last_archived_time = (DateTimeOffset?)tuple[2], failed_count = (long?)tuple[3], last_failed_wal = (string)tuple[4], last_failed_time = (DateTimeOffset?)tuple[5], stats_reset = (DateTimeOffset?)tuple[6] });
			MappingSchema.SetConvertExpression<object[], pg_stat_get_wal_receiverResult>(tuple => new pg_stat_get_wal_receiverResult() { pid = (int?)tuple[0], status = (string)tuple[1], receive_start_lsn = (object)tuple[2], receive_start_tli = (int?)tuple[3], received_lsn = (object)tuple[4], received_tli = (int?)tuple[5], last_msg_send_time = (DateTimeOffset?)tuple[6], last_msg_receipt_time = (DateTimeOffset?)tuple[7], latest_end_lsn = (object)tuple[8], latest_end_time = (DateTimeOffset?)tuple[9], slot_name = (string)tuple[10], conninfo = (string)tuple[11] });
			MappingSchema.SetConvertExpression<object[], pg_xlogfile_name_offsetResult>(tuple => new pg_xlogfile_name_offsetResult() { file_name = (string)tuple[0], file_offset = (int?)tuple[1] });
		}

		public TestLinq2dbDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public TestLinq2dbDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext();

		#region Table Functions

		#region PgExpandarray

		[Sql.TableFunction(Schema="information_schema", Name="_pg_expandarray")]
		public ITable<PgExpandarrayResult> PgExpandarray(object par67)
		{
			return this.GetTable<PgExpandarrayResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par67);
		}

		public partial class PgExpandarrayResult
		{
			public int? x { get; set; }
			public int? n { get; set; }
		}

		#endregion

		#region Aclexplode

		[Sql.TableFunction(Schema="pg_catalog", Name="aclexplode")]
		public ITable<AclexplodeResult> Aclexplode(object acl)
		{
			return this.GetTable<AclexplodeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				acl);
		}

		public partial class AclexplodeResult
		{
			public int?   grantor        { get; set; }
			public int?   grantee        { get; set; }
			public string privilege_type { get; set; }
			public bool?  is_grantable   { get; set; }
		}

		#endregion

		#region GenerateSeries

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_series")]
		public ITable<GenerateSeriesResult> GenerateSeries(DateTimeOffset? par1959, DateTimeOffset? par1960, NpgsqlTimeSpan? par1961)
		{
			return this.GetTable<GenerateSeriesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1959,
				par1960,
				par1961);
		}

		public partial class GenerateSeriesResult
		{
			public DateTimeOffset? generate_series { get; set; }
		}

		#endregion

		#region GenerateSubscripts

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_subscripts")]
		public ITable<GenerateSubscriptsResult> GenerateSubscripts(object par1965, int? par1966)
		{
			return this.GetTable<GenerateSubscriptsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1965,
				par1966);
		}

		public partial class GenerateSubscriptsResult
		{
			public int? generate_subscripts { get; set; }
		}

		#endregion

		#region JsonArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements")]
		public ITable<JsonArrayElementsResult> JsonArrayElements(string from_json)
		{
			return this.GetTable<JsonArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements_text")]
		public ITable<JsonArrayElementsTextResult> JsonArrayElementsText(string from_json)
		{
			return this.GetTable<JsonArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsTextResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonEach

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each")]
		public ITable<JsonEachResult> JsonEach(string from_json)
		{
			return this.GetTable<JsonEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each_text")]
		public ITable<JsonEachTextResult> JsonEachText(string from_json)
		{
			return this.GetTable<JsonEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachTextResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="json_object_keys")]
		public ITable<JsonObjectKeysResult> JsonObjectKeys(string par3516)
		{
			return this.GetTable<JsonObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3516);
		}

		public partial class JsonObjectKeysResult
		{
			public string json_object_keys { get; set; }
		}

		#endregion

		#region JsonPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="json_populate_recordset")]
		public ITable<JsonPopulateRecordsetResult> JsonPopulateRecordset(object @base, string from_json, bool? use_json_as_text)
		{
			return this.GetTable<JsonPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@base,
				from_json,
				use_json_as_text);
		}

		public partial class JsonPopulateRecordsetResult
		{
			public int? json_populate_recordset { get; set; }
		}

		#endregion

		#region JsonbArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements")]
		public ITable<JsonbArrayElementsResult> JsonbArrayElements(string from_json)
		{
			return this.GetTable<JsonbArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonbArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements_text")]
		public ITable<JsonbArrayElementsTextResult> JsonbArrayElementsText(string from_json)
		{
			return this.GetTable<JsonbArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsTextResult
		{
			public string value { get; set; }
		}

		#endregion

		#region JsonbEach

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each")]
		public ITable<JsonbEachResult> JsonbEach(string from_json)
		{
			return this.GetTable<JsonbEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonbEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each_text")]
		public ITable<JsonbEachTextResult> JsonbEachText(string from_json)
		{
			return this.GetTable<JsonbEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachTextResult
		{
			public string key   { get; set; }
			public string value { get; set; }
		}

		#endregion

		#region JsonbObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_object_keys")]
		public ITable<JsonbObjectKeysResult> JsonbObjectKeys(string par3618)
		{
			return this.GetTable<JsonbObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3618);
		}

		public partial class JsonbObjectKeysResult
		{
			public string jsonb_object_keys { get; set; }
		}

		#endregion

		#region JsonbPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_populate_recordset")]
		public ITable<JsonbPopulateRecordsetResult> JsonbPopulateRecordset(object par3624, string par3625)
		{
			return this.GetTable<JsonbPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3624,
				par3625);
		}

		public partial class JsonbPopulateRecordsetResult
		{
			public int? jsonb_populate_recordset { get; set; }
		}

		#endregion

		#region PgAvailableExtensionVersions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extension_versions")]
		public ITable<PgAvailableExtensionVersionsResult> PgAvailableExtensionVersions()
		{
			return this.GetTable<PgAvailableExtensionVersionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionVersionsResult
		{
			public string name        { get; set; }
			public string version     { get; set; }
			public bool?  superuser   { get; set; }
			public bool?  relocatable { get; set; }
			public string schema      { get; set; }
			public Array  requires    { get; set; }
			public string comment     { get; set; }
		}

		#endregion

		#region PgAvailableExtensions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extensions")]
		public ITable<PgAvailableExtensionsResult> PgAvailableExtensions()
		{
			return this.GetTable<PgAvailableExtensionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionsResult
		{
			public string name            { get; set; }
			public string default_version { get; set; }
			public string comment         { get; set; }
		}

		#endregion

		#region PgConfig

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_config")]
		public ITable<PgConfigResult> PgConfig()
		{
			return this.GetTable<PgConfigResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgConfigResult
		{
			public string name    { get; set; }
			public string setting { get; set; }
		}

		#endregion

		#region PgCursor

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_cursor")]
		public ITable<PgCursorResult> PgCursor()
		{
			return this.GetTable<PgCursorResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgCursorResult
		{
			public string          name          { get; set; }
			public string          statement     { get; set; }
			public bool?           is_holdable   { get; set; }
			public bool?           is_binary     { get; set; }
			public bool?           is_scrollable { get; set; }
			public DateTimeOffset? creation_time { get; set; }
		}

		#endregion

		#region PgEventTriggerDdlCommands

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_ddl_commands")]
		public ITable<PgEventTriggerDdlCommandsResult> PgEventTriggerDdlCommands()
		{
			return this.GetTable<PgEventTriggerDdlCommandsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDdlCommandsResult
		{
			public int?   classid         { get; set; }
			public int?   objid           { get; set; }
			public int?   objsubid        { get; set; }
			public string command_tag     { get; set; }
			public string object_type     { get; set; }
			public string schema_name     { get; set; }
			public string object_identity { get; set; }
			public bool?  in_extension    { get; set; }
			public object command         { get; set; }
		}

		#endregion

		#region PgEventTriggerDroppedObjects

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_dropped_objects")]
		public ITable<PgEventTriggerDroppedObjectsResult> PgEventTriggerDroppedObjects()
		{
			return this.GetTable<PgEventTriggerDroppedObjectsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDroppedObjectsResult
		{
			public int?   classid         { get; set; }
			public int?   objid           { get; set; }
			public int?   objsubid        { get; set; }
			public bool?  original        { get; set; }
			public bool?  normal          { get; set; }
			public bool?  is_temporary    { get; set; }
			public string object_type     { get; set; }
			public string schema_name     { get; set; }
			public string object_name     { get; set; }
			public string object_identity { get; set; }
			public Array  address_names   { get; set; }
			public Array  address_args    { get; set; }
		}

		#endregion

		#region PgExtensionUpdatePaths

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_extension_update_paths")]
		public ITable<PgExtensionUpdatePathsResult> PgExtensionUpdatePaths(string name)
		{
			return this.GetTable<PgExtensionUpdatePathsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				name);
		}

		public partial class PgExtensionUpdatePathsResult
		{
			public string source { get; set; }
			public string target { get; set; }
			public string path   { get; set; }
		}

		#endregion

		#region PgGetKeywords

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_keywords")]
		public ITable<PgGetKeywordsResult> PgGetKeywords()
		{
			return this.GetTable<PgGetKeywordsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetKeywordsResult
		{
			public string word    { get; set; }
			public char?  catcode { get; set; }
			public string catdesc { get; set; }
		}

		#endregion

		#region PgGetMultixactMembers

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_multixact_members")]
		public ITable<PgGetMultixactMembersResult> PgGetMultixactMembers(int? multixid)
		{
			return this.GetTable<PgGetMultixactMembersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				multixid);
		}

		public partial class PgGetMultixactMembersResult
		{
			public int?   xid  { get; set; }
			public string mode { get; set; }
		}

		#endregion

		#region PgGetReplicationSlots

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_replication_slots")]
		public ITable<PgGetReplicationSlotsResult> PgGetReplicationSlots()
		{
			return this.GetTable<PgGetReplicationSlotsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetReplicationSlotsResult
		{
			public string slot_name           { get; set; }
			public string plugin              { get; set; }
			public string slot_type           { get; set; }
			public int?   datoid              { get; set; }
			public bool?  active              { get; set; }
			public int?   active_pid          { get; set; }
			public int?   xmin                { get; set; }
			public int?   catalog_xmin        { get; set; }
			public string restart_lsn         { get; set; }
			public string confirmed_flush_lsn { get; set; }
		}

		#endregion

		#region PgListeningChannels

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_listening_channels")]
		public ITable<PgListeningChannelsResult> PgListeningChannels()
		{
			return this.GetTable<PgListeningChannelsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgListeningChannelsResult
		{
			public string pg_listening_channels { get; set; }
		}

		#endregion

		#region PgLockStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_lock_status")]
		public ITable<PgLockStatusResult> PgLockStatus()
		{
			return this.GetTable<PgLockStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLockStatusResult
		{
			public string locktype           { get; set; }
			public int?   database           { get; set; }
			public int?   relation           { get; set; }
			public int?   page               { get; set; }
			public short? tuple              { get; set; }
			public string virtualxid         { get; set; }
			public int?   transactionid      { get; set; }
			public int?   classid            { get; set; }
			public int?   objid              { get; set; }
			public short? objsubid           { get; set; }
			public string virtualtransaction { get; set; }
			public int?   pid                { get; set; }
			public string mode               { get; set; }
			public bool?  granted            { get; set; }
			public bool?  fastpath           { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_binary_changes")]
		public ITable<PgLogicalSlotGetBinaryChangesResult> PgLogicalSlotGetBinaryChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotGetBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetBinaryChangesResult
		{
			public string location { get; set; }
			public int?   xid      { get; set; }
			public byte[] data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_changes")]
		public ITable<PgLogicalSlotGetChangesResult> PgLogicalSlotGetChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotGetChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetChangesResult
		{
			public string location { get; set; }
			public int?   xid      { get; set; }
			public string data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_binary_changes")]
		public ITable<PgLogicalSlotPeekBinaryChangesResult> PgLogicalSlotPeekBinaryChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotPeekBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekBinaryChangesResult
		{
			public string location { get; set; }
			public int?   xid      { get; set; }
			public byte[] data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_changes")]
		public ITable<PgLogicalSlotPeekChangesResult> PgLogicalSlotPeekChanges(string slot_name, object upto_lsn, int? upto_nchanges, object options)
		{
			return this.GetTable<PgLogicalSlotPeekChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekChangesResult
		{
			public string location { get; set; }
			public int?   xid      { get; set; }
			public string data     { get; set; }
		}

		#endregion

		#region PgLsDir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_dir")]
		public ITable<PgLsDirResult> PgLsDir(string par5007, bool? par5008, bool? par5009)
		{
			return this.GetTable<PgLsDirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5007,
				par5008,
				par5009);
		}

		public partial class PgLsDirResult
		{
			public string pg_ls_dir { get; set; }
		}

		#endregion

		#region PgOptionsToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_options_to_table")]
		public ITable<PgOptionsToTableResult> PgOptionsToTable(object options_array)
		{
			return this.GetTable<PgOptionsToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				options_array);
		}

		public partial class PgOptionsToTableResult
		{
			public string option_name  { get; set; }
			public string option_value { get; set; }
		}

		#endregion

		#region PgPreparedStatement

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_statement")]
		public ITable<PgPreparedStatementResult> PgPreparedStatement()
		{
			return this.GetTable<PgPreparedStatementResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedStatementResult
		{
			public string          name            { get; set; }
			public string          statement       { get; set; }
			public DateTimeOffset? prepare_time    { get; set; }
			public Array           parameter_types { get; set; }
			public bool?           from_sql        { get; set; }
		}

		#endregion

		#region PgPreparedXact

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_xact")]
		public ITable<PgPreparedXactResult> PgPreparedXact()
		{
			return this.GetTable<PgPreparedXactResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedXactResult
		{
			public int?            transaction { get; set; }
			public string          gid         { get; set; }
			public DateTimeOffset? prepared    { get; set; }
			public int?            ownerid     { get; set; }
			public int?            dbid        { get; set; }
		}

		#endregion

		#region PgShowAllFileSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_file_settings")]
		public ITable<PgShowAllFileSettingsResult> PgShowAllFileSettings()
		{
			return this.GetTable<PgShowAllFileSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllFileSettingsResult
		{
			public string sourcefile { get; set; }
			public int?   sourceline { get; set; }
			public int?   seqno      { get; set; }
			public string name       { get; set; }
			public string setting    { get; set; }
			public bool?  applied    { get; set; }
			public string error      { get; set; }
		}

		#endregion

		#region PgShowAllSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_settings")]
		public ITable<PgShowAllSettingsResult> PgShowAllSettings()
		{
			return this.GetTable<PgShowAllSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllSettingsResult
		{
			public string name            { get; set; }
			public string setting         { get; set; }
			public string unit            { get; set; }
			public string category        { get; set; }
			public string short_desc      { get; set; }
			public string extra_desc      { get; set; }
			public string context         { get; set; }
			public string vartype         { get; set; }
			public string source          { get; set; }
			public string min_val         { get; set; }
			public string max_val         { get; set; }
			public Array  enumvals        { get; set; }
			public string boot_val        { get; set; }
			public string reset_val       { get; set; }
			public string sourcefile      { get; set; }
			public int?   sourceline      { get; set; }
			public bool?  pending_restart { get; set; }
		}

		#endregion

		#region PgShowReplicationOriginStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_replication_origin_status")]
		public ITable<PgShowReplicationOriginStatusResult> PgShowReplicationOriginStatus()
		{
			return this.GetTable<PgShowReplicationOriginStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowReplicationOriginStatusResult
		{
			public int?   local_id    { get; set; }
			public string external_id { get; set; }
			public string remote_lsn  { get; set; }
			public string local_lsn   { get; set; }
		}

		#endregion

		#region PgStatGetActivity

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_activity")]
		public ITable<PgStatGetActivityResult> PgStatGetActivity(int? pid)
		{
			return this.GetTable<PgStatGetActivityResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				pid);
		}

		public partial class PgStatGetActivityResult
		{
			public int?            datid            { get; set; }
			public int?            pid              { get; set; }
			public int?            usesysid         { get; set; }
			public string          application_name { get; set; }
			public string          state            { get; set; }
			public string          query            { get; set; }
			public string          wait_event_type  { get; set; }
			public string          wait_event       { get; set; }
			public DateTimeOffset? xact_start       { get; set; }
			public DateTimeOffset? query_start      { get; set; }
			public DateTimeOffset? backend_start    { get; set; }
			public DateTimeOffset? state_change     { get; set; }
			public NpgsqlInet?     client_addr      { get; set; }
			public string          client_hostname  { get; set; }
			public int?            client_port      { get; set; }
			public int?            backend_xid      { get; set; }
			public int?            backend_xmin     { get; set; }
			public bool?           ssl              { get; set; }
			public string          sslversion       { get; set; }
			public string          sslcipher        { get; set; }
			public int?            sslbits          { get; set; }
			public bool?           sslcompression   { get; set; }
			public string          sslclientdn      { get; set; }
		}

		#endregion

		#region PgStatGetBackendIdset

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_backend_idset")]
		public ITable<PgStatGetBackendIdsetResult> PgStatGetBackendIdset()
		{
			return this.GetTable<PgStatGetBackendIdsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetBackendIdsetResult
		{
			public int? pg_stat_get_backend_idset { get; set; }
		}

		#endregion

		#region PgStatGetProgressInfo

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_progress_info")]
		public ITable<PgStatGetProgressInfoResult> PgStatGetProgressInfo(string cmdtype)
		{
			return this.GetTable<PgStatGetProgressInfoResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				cmdtype);
		}

		public partial class PgStatGetProgressInfoResult
		{
			public int?  pid     { get; set; }
			public int?  datid   { get; set; }
			public int?  relid   { get; set; }
			public long? param1  { get; set; }
			public long? param2  { get; set; }
			public long? param3  { get; set; }
			public long? param4  { get; set; }
			public long? param5  { get; set; }
			public long? param6  { get; set; }
			public long? param7  { get; set; }
			public long? param8  { get; set; }
			public long? param9  { get; set; }
			public long? param10 { get; set; }
		}

		#endregion

		#region PgStatGetWalSenders

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_wal_senders")]
		public ITable<PgStatGetWalSendersResult> PgStatGetWalSenders()
		{
			return this.GetTable<PgStatGetWalSendersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetWalSendersResult
		{
			public int?   pid             { get; set; }
			public string state           { get; set; }
			public string sent_location   { get; set; }
			public string write_location  { get; set; }
			public string flush_location  { get; set; }
			public string replay_location { get; set; }
			public int?   sync_priority   { get; set; }
			public string sync_state      { get; set; }
		}

		#endregion

		#region PgStopBackup

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stop_backup")]
		public ITable<PgStopBackupResult> PgStopBackup(bool? exclusive)
		{
			return this.GetTable<PgStopBackupResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				exclusive);
		}

		public partial class PgStopBackupResult
		{
			public string lsn        { get; set; }
			public string labelfile  { get; set; }
			public string spcmapfile { get; set; }
		}

		#endregion

		#region PgTablespaceDatabases

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_tablespace_databases")]
		public ITable<PgTablespaceDatabasesResult> PgTablespaceDatabases(int? par5282)
		{
			return this.GetTable<PgTablespaceDatabasesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5282);
		}

		public partial class PgTablespaceDatabasesResult
		{
			public int? pg_tablespace_databases { get; set; }
		}

		#endregion

		#region PgTimezoneAbbrevs

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_abbrevs")]
		public ITable<PgTimezoneAbbrevsResult> PgTimezoneAbbrevs()
		{
			return this.GetTable<PgTimezoneAbbrevsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneAbbrevsResult
		{
			public string          abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region PgTimezoneNames

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_names")]
		public ITable<PgTimezoneNamesResult> PgTimezoneNames()
		{
			return this.GetTable<PgTimezoneNamesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneNamesResult
		{
			public string          name       { get; set; }
			public string          abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region RegexpMatches

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_matches")]
		public ITable<RegexpMatchesResult> RegexpMatches(string par5754, string par5755, string par5756)
		{
			return this.GetTable<RegexpMatchesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5754,
				par5755,
				par5756);
		}

		public partial class RegexpMatchesResult
		{
			public Array regexp_matches { get; set; }
		}

		#endregion

		#region RegexpSplitToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_split_to_table")]
		public ITable<RegexpSplitToTableResult> RegexpSplitToTable(string par5775, string par5776, string par5777)
		{
			return this.GetTable<RegexpSplitToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5775,
				par5776,
				par5777);
		}

		public partial class RegexpSplitToTableResult
		{
			public string regexp_split_to_table { get; set; }
		}

		#endregion

		#region TsDebug

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_debug")]
		public ITable<TsDebugResult> TsDebug(string document)
		{
			return this.GetTable<TsDebugResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				document);
		}

		public partial class TsDebugResult
		{
			public string alias        { get; set; }
			public string description  { get; set; }
			public string token        { get; set; }
			public Array  dictionaries { get; set; }
			public string dictionary   { get; set; }
			public Array  lexemes      { get; set; }
		}

		#endregion

		#region TsParse

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_parse")]
		public ITable<TsParseResult> TsParse(string parser_name, string txt)
		{
			return this.GetTable<TsParseResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name,
				txt);
		}

		public partial class TsParseResult
		{
			public int?   tokid { get; set; }
			public string token { get; set; }
		}

		#endregion

		#region TsStat

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_stat")]
		public ITable<TsStatResult> TsStat(string query, string weights)
		{
			return this.GetTable<TsStatResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				query,
				weights);
		}

		public partial class TsStatResult
		{
			public string word   { get; set; }
			public int?   ndoc   { get; set; }
			public int?   nentry { get; set; }
		}

		#endregion

		#region TsTokenType

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_token_type")]
		public ITable<TsTokenTypeResult> TsTokenType(string parser_name)
		{
			return this.GetTable<TsTokenTypeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name);
		}

		public partial class TsTokenTypeResult
		{
			public int?   tokid       { get; set; }
			public string alias       { get; set; }
			public string description { get; set; }
		}

		#endregion

		#region TxidSnapshotXip

		[Sql.TableFunction(Schema="pg_catalog", Name="txid_snapshot_xip")]
		public ITable<TxidSnapshotXipResult> TxidSnapshotXip(object par7133)
		{
			return this.GetTable<TxidSnapshotXipResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par7133);
		}

		public partial class TxidSnapshotXipResult
		{
			public long? txid_snapshot_xip { get; set; }
		}

		#endregion

		#region Unnest

		[Sql.TableFunction(Schema="pg_catalog", Name="unnest")]
		public ITable<UnnestResult> Unnest(object tsvector)
		{
			return this.GetTable<UnnestResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				tsvector);
		}

		public partial class UnnestResult
		{
			public string lexeme    { get; set; }
			public Array  positions { get; set; }
			public Array  weights   { get; set; }
		}

		#endregion

		#endregion
	}

	public partial class pg_control_checkpointResult
	{
		public object checkpoint_location { get; set; }

		public object prior_location { get; set; }

		public object redo_location { get; set; }

		public string redo_wal_file { get; set; }

		public int? timeline_id { get; set; }

		public int? prev_timeline_id { get; set; }

		public bool? full_page_writes { get; set; }

		public string next_xid { get; set; }

		public int? next_oid { get; set; }

		public int? next_multixact_id { get; set; }

		public int? next_multi_offset { get; set; }

		public int? oldest_xid { get; set; }

		public int? oldest_xid_dbid { get; set; }

		public int? oldest_active_xid { get; set; }

		public int? oldest_multi_xid { get; set; }

		public int? oldest_multi_dbid { get; set; }

		public int? oldest_commit_ts_xid { get; set; }

		public int? newest_commit_ts_xid { get; set; }

		public DateTimeOffset? checkpoint_time { get; set; }
	}

	public partial class pg_control_initResult
	{
		public int? max_data_alignment { get; set; }

		public int? database_block_size { get; set; }

		public int? blocks_per_segment { get; set; }

		public int? wal_block_size { get; set; }

		public int? bytes_per_wal_segment { get; set; }

		public int? max_identifier_length { get; set; }

		public int? max_index_columns { get; set; }

		public int? max_toast_chunk_size { get; set; }

		public int? large_object_chunk_size { get; set; }

		public bool? bigint_timestamps { get; set; }

		public bool? float4_pass_by_value { get; set; }

		public bool? float8_pass_by_value { get; set; }

		public int? data_page_checksum_version { get; set; }
	}

	public partial class pg_control_recoveryResult
	{
		public object min_recovery_end_location { get; set; }

		public int? min_recovery_end_timeline { get; set; }

		public object backup_start_location { get; set; }

		public object backup_end_location { get; set; }

		public bool? end_of_backup_record_required { get; set; }
	}

	public partial class pg_control_systemResult
	{
		public int? pg_control_version { get; set; }

		public int? catalog_version_no { get; set; }

		public long? system_identifier { get; set; }

		public DateTimeOffset? pg_control_last_modified { get; set; }
	}

	public partial class pg_create_logical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object xlog_position { get; set; }
	}

	public partial class pg_create_physical_replication_slotResult
	{
		public string slot_name { get; set; }

		public object xlog_position { get; set; }
	}

	public partial class pg_get_object_addressResult
	{
		public int? classid { get; set; }

		public int? objid { get; set; }

		public int? subobjid { get; set; }
	}

	public partial class pg_identify_objectResult
	{
		public string type { get; set; }

		public string schema { get; set; }

		public string name { get; set; }

		public string identity { get; set; }
	}

	public partial class pg_identify_object_as_addressResult
	{
		public string type { get; set; }

		public object object_names { get; set; }

		public object object_args { get; set; }
	}

	public partial class pg_last_committed_xactResult
	{
		public int? xid { get; set; }

		public DateTimeOffset? timestamp { get; set; }
	}

	public partial class pg_sequence_parametersResult
	{
		public long? start_value { get; set; }

		public long? minimum_value { get; set; }

		public long? maximum_value { get; set; }

		public long? increment { get; set; }

		public bool? cycle_option { get; set; }
	}

	public partial class pg_stat_fileResult
	{
		public long? size { get; set; }

		public DateTimeOffset? access { get; set; }

		public DateTimeOffset? modification { get; set; }

		public DateTimeOffset? change { get; set; }

		public DateTimeOffset? creation { get; set; }

		public bool? isdir { get; set; }
	}

	public partial class pg_stat_get_archiverResult
	{
		public long? archived_count { get; set; }

		public string last_archived_wal { get; set; }

		public DateTimeOffset? last_archived_time { get; set; }

		public long? failed_count { get; set; }

		public string last_failed_wal { get; set; }

		public DateTimeOffset? last_failed_time { get; set; }

		public DateTimeOffset? stats_reset { get; set; }
	}

	public partial class pg_stat_get_wal_receiverResult
	{
		public int? pid { get; set; }

		public string status { get; set; }

		public object receive_start_lsn { get; set; }

		public int? receive_start_tli { get; set; }

		public object received_lsn { get; set; }

		public int? received_tli { get; set; }

		public DateTimeOffset? last_msg_send_time { get; set; }

		public DateTimeOffset? last_msg_receipt_time { get; set; }

		public object latest_end_lsn { get; set; }

		public DateTimeOffset? latest_end_time { get; set; }

		public string slot_name { get; set; }

		public string conninfo { get; set; }
	}

	public partial class pg_xlogfile_name_offsetResult
	{
		public string file_name { get; set; }

		public int? file_offset { get; set; }
	}

	[Table(Schema="billing", Name="Account")]
	public partial class billing_Account
	{
		[PrimaryKey, Identity   ] public int       Id        { get; set; } // integer
		[Column,     NotNull    ] public int       FlatId    { get; set; } // integer
		[Column,        Nullable] public string    Number    { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime  DateStart { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public DateTime? DateEnd   { get; set; } // timestamp (6) without time zone

		#region Associations

		/// <summary>
		/// FK_billing.Account_billing.rooms_FlatId
		/// </summary>
		[Association(ThisKey="FlatId", OtherKey="Roomid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.Account_billing.rooms_FlatId", BackReferenceName="BillingAccountbillingroomsFlatIds")]
		public billing_Room Flat { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="appconfig")]
	public partial class billing_Appconfig
	{
		[Column("propid"),   PrimaryKey,  NotNull] public string    Propid   { get; set; } // character varying(255)
		[Column("propname"),    Nullable         ] public string    Propname { get; set; } // character varying(255)
		[Column("val"),         Nullable         ] public string    Val      { get; set; } // character varying(255)
		[Column("modified"),    Nullable         ] public DateTime? Modified { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="billing", Name="AspNetRoles")]
	public partial class billing_AspNetRole
	{
		[PrimaryKey, NotNull] public string Id   { get; set; } // character varying(128)
		[Column,     NotNull] public string Name { get; set; } // character varying(256)

		#region Associations

		/// <summary>
		/// FK_AspNetUserRoles_AspNetRoles_RoleId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_AspNetUserRole> AspNetUserRolesRoleIds { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="AspNetUsers")]
	public partial class billing_AspNetUser
	{
		[PrimaryKey, NotNull    ] public string    Id                   { get; set; } // character varying(128)
		[Column,     NotNull    ] public string    UserName             { get; set; } // character varying(256)
		[Column,        Nullable] public string    PasswordHash         { get; set; } // character varying(256)
		[Column,        Nullable] public string    SecurityStamp        { get; set; } // character varying(256)
		[Column,        Nullable] public string    Email                { get; set; } // character varying(256)
		[Column,     NotNull    ] public bool      EmailConfirmed       { get; set; } // boolean
		[Column,        Nullable] public string    PhoneNumber          { get; set; } // character varying(256)
		[Column,     NotNull    ] public bool      PhoneNumberConfirmed { get; set; } // boolean
		[Column,     NotNull    ] public bool      TwoFactorEnabled     { get; set; } // boolean
		[Column,        Nullable] public DateTime? LockoutEndDateUtc    { get; set; } // timestamp (6) without time zone
		[Column,     NotNull    ] public bool      LockoutEnabled       { get; set; } // boolean
		[Column,     NotNull    ] public int       AccessFailedCount    { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_AspNetUserClaims_AspNetUsers_User_Id_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_AspNetUserClaim> AspNetUserClaimsUserIds { get; set; }

		/// <summary>
		/// FK_AspNetUserLogins_AspNetUsers_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_AspNetUserLogin> AspNetUserLoginsUserIds { get; set; }

		/// <summary>
		/// FK_AspNetUserRoles_AspNetUsers_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_AspNetUserRole> AspNetUserRolesUserIds { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="AspNetUserClaims")]
	public partial class billing_AspNetUserClaim
	{
		[PrimaryKey, Identity   ] public int    Id         { get; set; } // integer
		[Column,        Nullable] public string ClaimType  { get; set; } // character varying(256)
		[Column,        Nullable] public string ClaimValue { get; set; } // character varying(256)
		[Column,     NotNull    ] public string UserId     { get; set; } // character varying(128)

		#region Associations

		/// <summary>
		/// FK_AspNetUserClaims_AspNetUsers_User_Id
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AspNetUserClaims_AspNetUsers_User_Id", BackReferenceName="AspNetUserClaimsUserIds")]
		public billing_AspNetUser User { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="AspNetUserLogins")]
	public partial class billing_AspNetUserLogin
	{
		[PrimaryKey(1), NotNull] public string UserId        { get; set; } // character varying(128)
		[PrimaryKey(2), NotNull] public string LoginProvider { get; set; } // character varying(128)
		[PrimaryKey(3), NotNull] public string ProviderKey   { get; set; } // character varying(128)

		#region Associations

		/// <summary>
		/// FK_AspNetUserLogins_AspNetUsers_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AspNetUserLogins_AspNetUsers_UserId", BackReferenceName="AspNetUserLoginsUserIds")]
		public billing_AspNetUser User { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="AspNetUserRoles")]
	public partial class billing_AspNetUserRole
	{
		[PrimaryKey(1), NotNull] public string UserId { get; set; } // character varying(128)
		[PrimaryKey(2), NotNull] public string RoleId { get; set; } // character varying(128)

		#region Associations

		/// <summary>
		/// FK_AspNetUserRoles_AspNetRoles_RoleId
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AspNetUserRoles_AspNetRoles_RoleId", BackReferenceName="AspNetUserRolesRoleIds")]
		public billing_AspNetRole Role { get; set; }

		/// <summary>
		/// FK_AspNetUserRoles_AspNetUsers_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AspNetUserRoles_AspNetUsers_UserId", BackReferenceName="AspNetUserRolesUserIds")]
		public billing_AspNetUser User { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="deverror")]
	public partial class billing_Deverror
	{
		[Column("id"),      PrimaryKey,  Identity] public int         Id        { get; set; } // integer
		[Column("devid"),   NotNull              ] public string      Devid     { get; set; } // character varying(255)
		[Column("errorid"), NotNull              ] public int         Errorid   { get; set; } // integer
		[Column(),          NotNull              ] public NpgsqlDate  DateStart { get; set; } // date
		[Column(),             Nullable          ] public NpgsqlDate? DateEnd   { get; set; } // date

		#region Associations

		/// <summary>
		/// FK_billing.deverror_billing.devices_devid
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.deverror_billing.devices_devid", BackReferenceName="Billingdeverrorbillingdevicesdevids")]
		public billing_Device Dev { get; set; }

		/// <summary>
		/// FK_billing.deverror_billing.error_errorid
		/// </summary>
		[Association(ThisKey="Errorid", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.deverror_billing.error_errorid", BackReferenceName="Billingdeverrorbillingerrorerrorids")]
		public billing_Error Error { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="devheatercoefficient")]
	public partial class billing_Devheatercoefficient
	{
		[Column("id"),           PrimaryKey,  Identity] public int     Id           { get; set; } // integer
		[Column("devtypeid"),    NotNull              ] public int     Devtypeid    { get; set; } // integer
		[Column("heatertypeid"), NotNull              ] public int     Heatertypeid { get; set; } // integer
		[Column("coefficient"),  NotNull              ] public decimal Coefficient  { get; set; } // numeric(18,9)
		[Column("bindtype"),        Nullable          ] public string  Bindtype     { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.devheatercoefficient_billing.devtypes_devtypeid
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devheatercoefficient_billing.devtypes_devtypeid", BackReferenceName="Billingdevheatercoefficientbillingdevtypesdevtypeids")]
		public billing_Devtype Devtype { get; set; }

		/// <summary>
		/// FK_billing.devheatercoefficient_billing.heatertypes_heatertypei
		/// </summary>
		[Association(ThisKey="Heatertypeid", OtherKey="Htypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devheatercoefficient_billing.heatertypes_heatertypei", BackReferenceName="Billingdevheatercoefficientbillingheatertypesheatertypeis")]
		public billing_Heatertype Heatertype { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="devices")]
	public partial class billing_Device
	{
		[Column("devid"),         PrimaryKey,  NotNull] public string      Devid                { get; set; } // character varying(255)
		[Column("sernum"),           Nullable         ] public string      Sernum               { get; set; } // character varying(255)
		[Column("devstatusid"),                NotNull] public int         Devstatusid          { get; set; } // integer
		[Column("ts"),                         NotNull] public DateTime    Ts                   { get; set; } // timestamp (6) without time zone
		[Column("valvechan"),        Nullable         ] public string      Valvechan            { get; set; } // character varying(255)
		[Column("devtypeid"),                  NotNull] public int         Devtypeid            { get; set; } // integer
		[Column("adapterid"),        Nullable         ] public string      Adapterid            { get; set; } // character varying(255)
		[Column("lastcheckdate"),    Nullable         ] public NpgsqlDate? Lastcheckdate        { get; set; } // date
		[Column("curvoli"),          Nullable         ] public double?     Curvoli              { get; set; } // double precision
		[Column("startdt"),          Nullable         ] public DateTime?   Startdt              { get; set; } // timestamp (6) without time zone
		[Column("enddt"),            Nullable         ] public DateTime?   Enddt                { get; set; } // timestamp (6) without time zone
		[Column("productdt"),        Nullable         ] public NpgsqlDate? Productdt            { get; set; } // date
		[Column("sernumold"),        Nullable         ] public string      Sernumold            { get; set; } // text
		[Column("workhours"),                  NotNull] public int         Workhours            { get; set; } // integer
		[Column("heatertypeid"),               NotNull] public int         Heatertypeid         { get; set; } // integer
		[Column(),                   Nullable         ] public int?        DefaultReadingTypeId { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.deverror_billing.devices_devid_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Deverror> Billingdeverrorbillingdevicesdevids { get; set; }

		/// <summary>
		/// FK_billing.DevProp_billing.devices_DeviceId_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="DeviceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_DevProp> BillingDevPropbillingdevicesDeviceIds { get; set; }

		/// <summary>
		/// FK_billing.devreading_billing.devices_devid_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devreading> Billingdevreadingbillingdevicesdevids { get; set; }

		/// <summary>
		/// FK_billing.GroupDevice_billing.devices_DeviceId_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="DeviceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_GroupDevice> BillingGroupDevicebillingdevicesDeviceIds { get; set; }

		/// <summary>
		/// FK_billing.TempReading_billing.devices_devid_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_TempReading> BillingTempReadingbillingdevicesdevids { get; set; }

		/// <summary>
		/// FK_billing.devices_billing.DevReadingType_DefaultReadingTypeId
		/// </summary>
		[Association(ThisKey="DefaultReadingTypeId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devices_billing.DevReadingType_DefaultReadingTypeId", BackReferenceName="BillingdevicesbillingDevReadingTypeDefaultReadingTypeIds")]
		public billing_DevReadingType DefaultReadingType { get; set; }

		/// <summary>
		/// fk_devices_devstatusid_devstatus_statusid
		/// </summary>
		[Association(ThisKey="Devstatusid", OtherKey="Statusid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_devices_devstatusid_devstatus_statusid", BackReferenceName="Fkdevicesdevstatusidstatusids")]
		public billing_Devstatus Devstatu { get; set; }

		/// <summary>
		/// fk_devices_devtypeid_devtypes_devtypeid
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_devices_devtypeid_devtypes_devtypeid", BackReferenceName="Fkdevicesdevtypeiddevtypeids")]
		public billing_Devtype Devtype { get; set; }

		/// <summary>
		/// fk_abondev_devid_devices_devid_BackReference
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Roomdevice> Fkabondevdeviddevids { get; set; }

		/// <summary>
		/// FK_billing.devices_billing.heatertypes_heatertypeid
		/// </summary>
		[Association(ThisKey="Heatertypeid", OtherKey="Htypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devices_billing.heatertypes_heatertypeid", BackReferenceName="Billingdevicesbillingheatertypesheatertypeids")]
		public billing_Heatertype Heatertype { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="DevProp")]
	public partial class billing_DevProp
	{
		[PrimaryKey(1), NotNull    ] public string DeviceId      { get; set; } // character varying(255)
		[PrimaryKey(2), NotNull    ] public int    DevPropTypeId { get; set; } // integer
		[Column,           Nullable] public string Value         { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.DevProp_billing.devices_DeviceId
		/// </summary>
		[Association(ThisKey="DeviceId", OtherKey="Devid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.DevProp_billing.devices_DeviceId", BackReferenceName="BillingDevPropbillingdevicesDeviceIds")]
		public billing_Device Device { get; set; }

		/// <summary>
		/// FK_billing.DevProp_billing.DevPropType_DevPropTypeId
		/// </summary>
		[Association(ThisKey="DevPropTypeId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.DevProp_billing.DevPropType_DevPropTypeId", BackReferenceName="BillingDevPropbillingDevPropTypeDevPropTypeIds")]
		public billing_DevPropType DevPropType { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="DevPropType")]
	public partial class billing_DevPropType
	{
		[PrimaryKey, Identity   ] public int    Id           { get; set; } // integer
		[Column,     NotNull    ] public int    DevTypeId    { get; set; } // integer
		[Column,        Nullable] public string Name         { get; set; } // text
		[Column,     NotNull    ] public int    ValueType    { get; set; } // integer
		[Column,     NotNull    ] public bool   IsNeed       { get; set; } // boolean
		[Column,     NotNull    ] public bool   IsCanChanged { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_billing.DevProp_billing.DevPropType_DevPropTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DevPropTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_DevProp> BillingDevPropbillingDevPropTypeDevPropTypeIds { get; set; }

		/// <summary>
		/// FK_billing.DevPropType_billing.devtypes_DevTypeId
		/// </summary>
		[Association(ThisKey="DevTypeId", OtherKey="Devtypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.DevPropType_billing.devtypes_DevTypeId", BackReferenceName="BillingDevPropTypebillingdevtypesDevTypeIds")]
		public billing_Devtype DevType { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="devreading")]
	public partial class billing_Devreading
	{
		[Column("id"),         PrimaryKey,  Identity] public int       Id               { get; set; } // integer
		[Column("devid"),      NotNull              ] public string    Devid            { get; set; } // character varying(255)
		[Column("rssi"),          Nullable          ] public short?    Rssi             { get; set; } // smallint
		[Column("receiversn"),    Nullable          ] public string    Receiversn       { get; set; } // text
		[Column("tsreceiver"),    Nullable          ] public DateTime? Tsreceiver       { get; set; } // timestamp (6) without time zone
		[Column("tsdevice"),   NotNull              ] public DateTime  Tsdevice         { get; set; } // timestamp (6) without time zone
		[Column("value"),      NotNull              ] public decimal   Value            { get; set; } // numeric(18,3)
		[Column("sourceid"),   NotNull              ] public short     Sourceid         { get; set; } // smallint
		[Column(),             NotNull              ] public int       ImportResultId   { get; set; } // integer
		[Column(),                Nullable          ] public int?      DevReadingTypeId { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.devreading_billing.devices_devid
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devreading_billing.devices_devid", BackReferenceName="Billingdevreadingbillingdevicesdevids")]
		public billing_Device Dev { get; set; }

		/// <summary>
		/// FK_billing.devreading_billing.DevReadingType_DevReadingTypeId
		/// </summary>
		[Association(ThisKey="DevReadingTypeId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.devreading_billing.DevReadingType_DevReadingTypeId", BackReferenceName="BillingdevreadingbillingDevReadingTypeDevReadingTypeIds")]
		public billing_DevReadingType DevReadingType { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="DevReadingType")]
	public partial class billing_DevReadingType
	{
		[PrimaryKey, Identity   ] public int    Id             { get; set; } // integer
		[Column,        Nullable] public int?   DevTypeId      { get; set; } // integer
		[Column,     NotNull    ] public int    UnitId         { get; set; } // integer
		[Column,        Nullable] public string Name           { get; set; } // text
		[Column,     NotNull    ] public int    Responsibility { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.devices_billing.DevReadingType_DefaultReadingTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DefaultReadingTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Device> BillingdevicesbillingDevReadingTypeDefaultReadingTypeIds { get; set; }

		/// <summary>
		/// FK_billing.devreading_billing.DevReadingType_DevReadingTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DevReadingTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devreading> BillingdevreadingbillingDevReadingTypeDevReadingTypeIds { get; set; }

		/// <summary>
		/// FK_billing.TempReading_billing.DevReadingType_DevReadingTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DevReadingTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_TempReading> BillingTempReadingbillingDevReadingTypeDevReadingTypeIds { get; set; }

		/// <summary>
		/// FK_billing.DevReadingType_billing.devtypes_DevTypeId
		/// </summary>
		[Association(ThisKey="DevTypeId", OtherKey="Devtypeid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.DevReadingType_billing.devtypes_DevTypeId", BackReferenceName="BillingDevReadingTypebillingdevtypesDevTypeIds")]
		public billing_Devtype DevType { get; set; }

		/// <summary>
		/// FK_billing.DevReadingType_billing.units_UnitId
		/// </summary>
		[Association(ThisKey="UnitId", OtherKey="Unitid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.DevReadingType_billing.units_UnitId", BackReferenceName="BillingDevReadingTypebillingunitsUnitIds")]
		public billing_Unit Unit { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="devstatus")]
	public partial class billing_Devstatus
	{
		[Column("statusid"),   PrimaryKey,  NotNull] public int    Statusid   { get; set; } // integer
		[Column("statusname"),    Nullable         ] public string Statusname { get; set; } // character varying(255)

		#region Associations

		/// <summary>
		/// fk_devices_devstatusid_devstatus_statusid_BackReference
		/// </summary>
		[Association(ThisKey="Statusid", OtherKey="Devstatusid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Device> Fkdevicesdevstatusidstatusids { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="devtypes")]
	public partial class billing_Devtype
	{
		[Column("devtypeid"),     PrimaryKey,  Identity] public int     Devtypeid     { get; set; } // integer
		[Column("typename"),         Nullable          ] public string  Typename      { get; set; } // character varying(255)
		[Column("resid"),         NotNull              ] public int     Resid         { get; set; } // integer
		[Column("vfactor"),          Nullable          ] public double? Vfactor       { get; set; } // double precision
		[Column("isnamur"),       NotNull              ] public bool    Isnamur       { get; set; } // boolean
		[Column("checkinterval"),    Nullable          ] public int?    Checkinterval { get; set; } // integer
		[Column("precclass"),        Nullable          ] public string  Precclass     { get; set; } // character varying(255)
		[Column("measrange"),        Nullable          ] public string  Measrange     { get; set; } // character varying(255)
		[Column("unitid"),           Nullable          ] public int?    Unitid        { get; set; } // integer
		[Column("iscontint"),     NotNull              ] public bool    Iscontint     { get; set; } // boolean
		[Column("prefix"),           Nullable          ] public string  Prefix        { get; set; } // character varying(3)
		[Column(),                NotNull              ] public int     GlobalType    { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.devheatercoefficient_billing.devtypes_devtypeid_BackReference
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devheatercoefficient> Billingdevheatercoefficientbillingdevtypesdevtypeids { get; set; }

		/// <summary>
		/// FK_billing.DevPropType_billing.devtypes_DevTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="DevTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_DevPropType> BillingDevPropTypebillingdevtypesDevTypeIds { get; set; }

		/// <summary>
		/// FK_billing.DevReadingType_billing.devtypes_DevTypeId_BackReference
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="DevTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_DevReadingType> BillingDevReadingTypebillingdevtypesDevTypeIds { get; set; }

		/// <summary>
		/// FK_billing.error_billing.devtypes_devtypeid_BackReference
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Error> Billingerrorbillingdevtypesdevtypeids { get; set; }

		/// <summary>
		/// fk_devices_devtypeid_devtypes_devtypeid_BackReference
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Device> Fkdevicesdevtypeiddevtypeids { get; set; }

		/// <summary>
		/// fk_devtypes_resid_resources_resid
		/// </summary>
		[Association(ThisKey="Resid", OtherKey="Resid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_devtypes_resid_resources_resid", BackReferenceName="Fkdevtypesresidresids")]
		public billing_Resource Re { get; set; }

		/// <summary>
		/// fk_devtypes_unitid_units_unitid
		/// </summary>
		[Association(ThisKey="Unitid", OtherKey="Unitid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="fk_devtypes_unitid_units_unitid", BackReferenceName="Fkdevtypesunitidunitids")]
		public billing_Unit Unit { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="error")]
	public partial class billing_Error
	{
		[Column("id"),          PrimaryKey,  Identity] public int    Id          { get; set; } // integer
		[Column("code"),        NotNull              ] public int    Code        { get; set; } // integer
		[Column("description"),    Nullable          ] public string Description { get; set; } // text
		[Column("devtypeid"),   NotNull              ] public int    Devtypeid   { get; set; } // integer
		[Column("iscritical"),  NotNull              ] public bool   Iscritical  { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_billing.deverror_billing.error_errorid_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Errorid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Deverror> Billingdeverrorbillingerrorerrorids { get; set; }

		/// <summary>
		/// FK_billing.error_billing.devtypes_devtypeid
		/// </summary>
		[Association(ThisKey="Devtypeid", OtherKey="Devtypeid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.error_billing.devtypes_devtypeid", BackReferenceName="Billingerrorbillingdevtypesdevtypeids")]
		public billing_Devtype Devtype { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="groups")]
	public partial class billing_Group
	{
		[Column("groupid"),       PrimaryKey,  Identity] public int     Groupid            { get; set; } // integer
		[Column(),                   Nullable          ] public string  Street             { get; set; } // character varying(255)
		[Column("group_groupid"),    Nullable          ] public int?    GroupGroupid       { get; set; } // integer
		[Column(),                   Nullable          ] public string  Region             { get; set; } // text
		[Column(),                   Nullable          ] public string  District           { get; set; } // text
		[Column(),                   Nullable          ] public string  City               { get; set; } // text
		[Column(),                   Nullable          ] public string  Locality           { get; set; } // text
		[Column(),                   Nullable          ] public string  HouseNumber        { get; set; } // text
		[Column(),                   Nullable          ] public string  Housing            { get; set; } // text
		[Column(),                NotNull              ] public decimal Area               { get; set; } // numeric
		[Column(),                   Nullable          ] public string  HouseAccountNumber { get; set; } // text
		[Column(),                   Nullable          ] public string  HouseDeviceNumber  { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.GroupDevice_billing.groups_GroupId_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="GroupId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_GroupDevice> BillingGroupDevicebillinggroupsGroupIds { get; set; }

		/// <summary>
		/// FK_billing.housedevicereading_billing.abongroups_groupid_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Housedevicereading> Billinghousedevicereadingbillingabongroupsgroupids { get; set; }

		/// <summary>
		/// FK_billing.HouseHub_billing.groups_groupid_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="HouseId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_HouseHub> BillingHouseHubbillinggroupsgroupids { get; set; }

		/// <summary>
		/// FK_billing.housenorm_billing.abongroups_groupid_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Housenorm> Billinghousenormbillingabongroupsgroupids { get; set; }

		/// <summary>
		/// fk_abonents_groupid_abongroups_groupid_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Room> Fkabonentsgroupidabongroupsgroupids { get; set; }

		/// <summary>
		/// fk_abongroups_parentid_abongroups_groupid_BackReference
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="GroupGroupid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Group> Fkabongroupsparentidabongroupsgroupids { get; set; }

		/// <summary>
		/// fk_abongroups_parentid_abongroups_groupid
		/// </summary>
		[Association(ThisKey="GroupGroupid", OtherKey="Groupid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="fk_abongroups_parentid_abongroups_groupid", BackReferenceName="Fkabongroupsparentidabongroupsgroupids")]
		public billing_Group GroupGroup { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="GroupDevice")]
	public partial class billing_GroupDevice
	{
		[PrimaryKey, Identity   ] public int    Id       { get; set; } // integer
		[Column,        Nullable] public string DeviceId { get; set; } // character varying(255)
		[Column,     NotNull    ] public int    GroupId  { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.GroupDevice_billing.devices_DeviceId
		/// </summary>
		[Association(ThisKey="DeviceId", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.GroupDevice_billing.devices_DeviceId", BackReferenceName="BillingGroupDevicebillingdevicesDeviceIds")]
		public billing_Device Device { get; set; }

		/// <summary>
		/// FK_billing.GroupDevice_billing.groups_GroupId
		/// </summary>
		[Association(ThisKey="GroupId", OtherKey="Groupid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.GroupDevice_billing.groups_GroupId", BackReferenceName="BillingGroupDevicebillinggroupsGroupIds")]
		public billing_Group Group { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="heatersconvert")]
	public partial class billing_Heatersconvert
	{
		[Column("id"),          PrimaryKey, Identity] public int     Id          { get; set; } // integer
		[Column("producer"),    Nullable            ] public string  Producer    { get; set; } // text
		[Column("model"),       Nullable            ] public string  Model       { get; set; } // character varying(255)
		[Column("hlength"),     Nullable            ] public double? Hlength     { get; set; } // double precision
		[Column("seccount"),    Nullable            ] public int?    Seccount    { get; set; } // integer
		[Column("pnom"),        Nullable            ] public double? Pnom        { get; set; } // double precision
		[Column("heaterclass"), Nullable            ] public string  Heaterclass { get; set; } // text
		[Column("modelold"),    Nullable            ] public string  Modelold    { get; set; } // character varying(255)
	}

	[Table(Schema="billing", Name="heatertypes")]
	public partial class billing_Heatertype
	{
		[Column("htypeid"),     PrimaryKey, Identity] public int     Htypeid     { get; set; } // integer
		[Column("typename"),    Nullable            ] public string  Typename    { get; set; } // character varying(255)
		[Column("hlength"),     Nullable            ] public double? Hlength     { get; set; } // double precision
		[Column("seccount"),    Nullable            ] public int?    Seccount    { get; set; } // integer
		[Column("pnom"),        Nullable            ] public double? Pnom        { get; set; } // double precision
		[Column("producer"),    Nullable            ] public string  Producer    { get; set; } // text
		[Column("heaterclass"), Nullable            ] public string  Heaterclass { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.devheatercoefficient_billing.heatertypes_heatertypei_BackReference
		/// </summary>
		[Association(ThisKey="Htypeid", OtherKey="Heatertypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devheatercoefficient> Billingdevheatercoefficientbillingheatertypesheatertypeis { get; set; }

		/// <summary>
		/// FK_billing.devices_billing.heatertypes_heatertypeid_BackReference
		/// </summary>
		[Association(ThisKey="Htypeid", OtherKey="Heatertypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Device> Billingdevicesbillingheatertypesheatertypeids { get; set; }

		/// <summary>
		/// fk_abondev_htypeid_heatertypes_htypeid_BackReference
		/// </summary>
		[Association(ThisKey="Htypeid", OtherKey="Htypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Roomdevice> Fkabondevhtypeidhtypeids { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="housedevicereading")]
	public partial class billing_Housedevicereading
	{
		[Column("id"),      PrimaryKey, Identity] public int        Id      { get; set; } // integer
		[Column("groupid"), NotNull             ] public int        Groupid { get; set; } // integer
		[Column("reading"), NotNull             ] public decimal    Reading { get; set; } // numeric(18,6)
		[Column("date"),    NotNull             ] public NpgsqlDate Date    { get; set; } // date

		#region Associations

		/// <summary>
		/// FK_billing.housedevicereading_billing.abongroups_groupid
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.housedevicereading_billing.abongroups_groupid", BackReferenceName="Billinghousedevicereadingbillingabongroupsgroupids")]
		public billing_Group Group { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="HouseHub")]
	public partial class billing_HouseHub
	{
		[Column("id"), PrimaryKey,  Identity] public int      Id                  { get; set; } // integer
		[Column(),        Nullable          ] public int?     HouseId             { get; set; } // integer
		[Column(),        Nullable          ] public string   IPv4                { get; set; } // character varying(50)
		[Column(),        Nullable          ] public string   UserName            { get; set; } // character varying(50)
		[Column(),        Nullable          ] public string   Password            { get; set; } // character varying(50)
		[Column(),     NotNull              ] public DateTime LastReadingDateTime { get; set; } // timestamp (6) without time zone
		[Column(),     NotNull              ] public bool     IsAvailable         { get; set; } // boolean
		[Column(),     NotNull              ] public int      HubType             { get; set; } // integer
		[Column(),        Nullable          ] public string   SerialNum           { get; set; } // text
		[Column(),     NotNull              ] public DateTime NextReadingDateTime { get; set; } // timestamp (6) without time zone

		#region Associations

		/// <summary>
		/// FK_billing.ImportResult_billing.HouseHub_HouseHubId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="HouseHubId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_ImportResult> BillingImportResultbillingHouseHubHouseHubIds { get; set; }

		/// <summary>
		/// FK_billing.HouseHub_billing.groups_groupid
		/// </summary>
		[Association(ThisKey="HouseId", OtherKey="Groupid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.HouseHub_billing.groups_groupid", BackReferenceName="BillingHouseHubbillinggroupsgroupids")]
		public billing_Group House { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="housenorm")]
	public partial class billing_Housenorm
	{
		[Column("id"),         PrimaryKey, Identity] public int        Id         { get; set; } // integer
		[Column("groupid"),    NotNull             ] public int        Groupid    { get; set; } // integer
		[Column("value"),      NotNull             ] public decimal    Value      { get; set; } // numeric(18,8)
		[Column("datestart"),  NotNull             ] public NpgsqlDate Datestart  { get; set; } // date
		[Column("roomtypeid"), NotNull             ] public int        Roomtypeid { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.housenorm_billing.abongroups_groupid
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.housenorm_billing.abongroups_groupid", BackReferenceName="Billinghousenormbillingabongroupsgroupids")]
		public billing_Group Group { get; set; }

		/// <summary>
		/// FK_billing.housenorm_billing.roomtypes_roomtypeid
		/// </summary>
		[Association(ThisKey="Roomtypeid", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.housenorm_billing.roomtypes_roomtypeid", BackReferenceName="Billinghousenormbillingroomtypesroomtypeids")]
		public billing_Roomtype Roomtype { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="ImportResult")]
	public partial class billing_ImportResult
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // integer
		[Column,        Nullable] public int?     HouseHubId   { get; set; } // integer
		[Column,     NotNull    ] public bool     IsSuccessful { get; set; } // boolean
		[Column,        Nullable] public string   FileName     { get; set; } // text
		[Column,     NotNull    ] public DateTime DateStart    { get; set; } // timestamp (6) without time zone
		[Column,     NotNull    ] public DateTime DateEnd      { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public string   Description  { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.ImportResultDetails_billing.ImportResult_ImportResul_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ImportResultId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_ImportResultDetail> BillingImportResultDetailsbillingImportResultImportResuls { get; set; }

		/// <summary>
		/// FK_billing.ImportResult_billing.HouseHub_HouseHubId
		/// </summary>
		[Association(ThisKey="HouseHubId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.ImportResult_billing.HouseHub_HouseHubId", BackReferenceName="BillingImportResultbillingHouseHubHouseHubIds")]
		public billing_HouseHub HouseHub { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="ImportResultDetails")]
	public partial class billing_ImportResultDetail
	{
		[PrimaryKey, Identity   ] public int    Id             { get; set; } // integer
		[Column,     NotNull    ] public int    ImportResultId { get; set; } // integer
		[Column,        Nullable] public string Name           { get; set; } // text
		[Column,        Nullable] public string Message        { get; set; } // text
		[Column,     NotNull    ] public int    All            { get; set; } // integer
		[Column,     NotNull    ] public int    Added          { get; set; } // integer
		[Column,     NotNull    ] public int    Found          { get; set; } // integer
		[Column,     NotNull    ] public int    Updated        { get; set; } // integer
		[Column,     NotNull    ] public int    Error          { get; set; } // integer
		[Column,     NotNull    ] public short  Type           { get; set; } // smallint

		#region Associations

		/// <summary>
		/// FK_billing.ImportResultDetails_billing.ImportResult_ImportResul
		/// </summary>
		[Association(ThisKey="ImportResultId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.ImportResultDetails_billing.ImportResult_ImportResul", BackReferenceName="BillingImportResultDetailsbillingImportResultImportResuls")]
		public billing_ImportResult ImportResult { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="mapping2")]
	public partial class billing_Mapping2
	{
		[Column("id"),           Identity] public int     Id           { get; set; } // integer
		[Column("sernum"),       NotNull ] public string  Sernum       { get; set; } // character varying(255)
		[Column("coefficient"),  NotNull ] public decimal Coefficient  { get; set; } // numeric(18,6)
		[Column("heatertypeid"), NotNull ] public int     Heatertypeid { get; set; } // integer
	}

	[Table(Schema="billing", Name="resources")]
	public partial class billing_Resource
	{
		[Column("resid"),   PrimaryKey,  NotNull] public int    Resid   { get; set; } // integer
		[Column("resname"),    Nullable         ] public string Resname { get; set; } // character varying(255)
		[Column("unitid"),     Nullable         ] public int?   Unitid  { get; set; } // integer

		#region Associations

		/// <summary>
		/// fk_devtypes_resid_resources_resid_BackReference
		/// </summary>
		[Association(ThisKey="Resid", OtherKey="Resid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devtype> Fkdevtypesresidresids { get; set; }

		/// <summary>
		/// fk_resources_unitid_units_unitid
		/// </summary>
		[Association(ThisKey="Unitid", OtherKey="Unitid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="fk_resources_unitid_units_unitid", BackReferenceName="Fkresourcesunitidunitids")]
		public billing_Unit Unit { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="Role")]
	public partial class billing_Role
	{
		[PrimaryKey, Identity] public int    Id          { get; set; } // integer
		[Column,     Nullable] public string Name        { get; set; } // character varying(255)
		[Column,     Nullable] public string Description { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_billing.UserRole_billing.Role_RoleId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RoleId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_UserRole> BillingUserRolebillingRoleRoleIds { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="rooms")]
	public partial class billing_Room
	{
		[Column("roomid"),          PrimaryKey,  Identity] public int         Roomid          { get; set; } // integer
		[Column("groupid"),         NotNull              ] public int         Groupid         { get; set; } // integer
		[Column("abnumber"),           Nullable          ] public string      Abnumber        { get; set; } // character varying(255)
		[Column("lastname"),           Nullable          ] public string      Lastname        { get; set; } // character varying(255)
		[Column("firstname"),          Nullable          ] public string      Firstname       { get; set; } // character varying(255)
		[Column("middlename"),         Nullable          ] public string      Middlename      { get; set; } // character varying(255)
		[Column("address"),            Nullable          ] public string      Address         { get; set; } // character varying(255)
		[Column("homephone"),          Nullable          ] public string      Homephone       { get; set; } // character varying(255)
		[Column("cellphone"),          Nullable          ] public string      Cellphone       { get; set; } // character varying(255)
		[Column("email"),              Nullable          ] public string      Email           { get; set; } // character varying(255)
		[Column("descr"),              Nullable          ] public string      Descr           { get; set; } // character varying(255)
		[Column("atype"),              Nullable          ] public int?        Atype           { get; set; } // integer
		[Column("floornum"),        NotNull              ] public int         Floornum        { get; set; } // integer
		[Column("aptnum"),          NotNull              ] public int         Aptnum          { get; set; } // integer
		[Column("aptarea"),         NotNull              ] public decimal     Aptarea         { get; set; } // numeric(18,2)
		[Column("abname"),             Nullable          ] public string      Abname          { get; set; } // text
		[Column("entrnum"),         NotNull              ] public int         Entrnum         { get; set; } // integer
		[Column("acttransferdate"),    Nullable          ] public NpgsqlDate? Acttransferdate { get; set; } // date
		[Column("coefflocation"),      Nullable          ] public float?      Coefflocation   { get; set; } // real
		[Column("roomtypeid"),      NotNull              ] public int         Roomtypeid      { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.Account_billing.rooms_FlatId_BackReference
		/// </summary>
		[Association(ThisKey="Roomid", OtherKey="FlatId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Account> BillingAccountbillingroomsFlatIds { get; set; }

		/// <summary>
		/// fk_abondev_abonentid_abonents_abonentid_BackReference
		/// </summary>
		[Association(ThisKey="Roomid", OtherKey="Roomid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Roomdevice> Fkabondevabonentidabonentsabonentids { get; set; }

		/// <summary>
		/// fk_abonents_groupid_abongroups_groupid
		/// </summary>
		[Association(ThisKey="Groupid", OtherKey="Groupid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_abonents_groupid_abongroups_groupid", BackReferenceName="Fkabonentsgroupidabongroupsgroupids")]
		public billing_Group Group { get; set; }

		/// <summary>
		/// FK_billing.rooms_billing.roomtypes_roomtypeid
		/// </summary>
		[Association(ThisKey="Roomtypeid", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.rooms_billing.roomtypes_roomtypeid", BackReferenceName="Billingroomsbillingroomtypesroomtypeids")]
		public billing_Roomtype Roomtype { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="roomdevices")]
	public partial class billing_Roomdevice
	{
		[Column("roomid"),     PrimaryKey(1), NotNull] public int     Roomid     { get; set; } // integer
		[Column("devid"),      PrimaryKey(2), NotNull] public string  Devid      { get; set; } // character varying(255)
		[Column("normvols"),      Nullable           ] public double? Normvols   { get; set; } // double precision
		[Column("normvolw"),      Nullable           ] public double? Normvolw   { get; set; } // double precision
		[Column("htypeid"),       Nullable           ] public int?    Htypeid    { get; set; } // integer
		[Column("krad"),          Nullable           ] public double? Krad       { get; set; } // double precision
		[Column("kroom"),         Nullable           ] public double? Kroom      { get; set; } // double precision
		[Column("balgroupid"),    Nullable           ] public int?    Balgroupid { get; set; } // integer

		#region Associations

		/// <summary>
		/// fk_abondev_devid_devices_devid
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_abondev_devid_devices_devid", BackReferenceName="Fkabondevdeviddevids")]
		public billing_Device Dev { get; set; }

		/// <summary>
		/// fk_abondev_htypeid_heatertypes_htypeid
		/// </summary>
		[Association(ThisKey="Htypeid", OtherKey="Htypeid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="fk_abondev_htypeid_heatertypes_htypeid", BackReferenceName="Fkabondevhtypeidhtypeids")]
		public billing_Heatertype Htype { get; set; }

		/// <summary>
		/// fk_abondev_abonentid_abonents_abonentid
		/// </summary>
		[Association(ThisKey="Roomid", OtherKey="Roomid", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="fk_abondev_abonentid_abonents_abonentid", BackReferenceName="Fkabondevabonentidabonentsabonentids")]
		public billing_Room Room { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="roomtypes")]
	public partial class billing_Roomtype
	{
		[Column("id"),       PrimaryKey, Identity] public int    Id       { get; set; } // integer
		[Column("typename"), Nullable            ] public string Typename { get; set; } // character varying(255)

		#region Associations

		/// <summary>
		/// FK_billing.housenorm_billing.roomtypes_roomtypeid_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Roomtypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Housenorm> Billinghousenormbillingroomtypesroomtypeids { get; set; }

		/// <summary>
		/// FK_billing.rooms_billing.roomtypes_roomtypeid_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Roomtypeid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Room> Billingroomsbillingroomtypesroomtypeids { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="Setting")]
	public partial class billing_Setting
	{
		[PrimaryKey, Identity] public int    Id           { get; set; } // integer
		[Column,     Nullable] public string SettingKey   { get; set; } // character varying(50)
		[Column,     Nullable] public string SettingValue { get; set; } // character varying(255)
		[Column,     Nullable] public string SettingType  { get; set; } // character varying(50)
		[Column,     Nullable] public string Description  { get; set; } // character varying(255)
	}

	[Table(Schema="billing", Name="TempReading")]
	public partial class billing_TempReading
	{
		[Column("id"),          PrimaryKey,  Identity] public int       Id               { get; set; } // integer
		[Column(),                 Nullable          ] public int?      ErrorCode        { get; set; } // integer
		[Column(),                 Nullable          ] public DateTime? TsErrorStart     { get; set; } // timestamp (6) without time zone
		[Column(),              NotNull              ] public int       Status           { get; set; } // integer
		[Column(),              NotNull              ] public string    DevSerNum        { get; set; } // text
		[Column("tsYearStart"), NotNull              ] public DateTime  TsYearStart      { get; set; } // timestamp (6) without time zone
		[Column("tsYearEnd"),   NotNull              ] public DateTime  TsYearEnd        { get; set; } // timestamp (6) without time zone
		[Column("devid"),          Nullable          ] public string    Devid            { get; set; } // character varying(255)
		[Column("rssi"),           Nullable          ] public short?    Rssi             { get; set; } // smallint
		[Column("receiversn"),     Nullable          ] public string    Receiversn       { get; set; } // text
		[Column("tsreceiver"),     Nullable          ] public DateTime? Tsreceiver       { get; set; } // timestamp (6) without time zone
		[Column("tsdevice"),    NotNull              ] public DateTime  Tsdevice         { get; set; } // timestamp (6) without time zone
		[Column("value"),       NotNull              ] public decimal   Value            { get; set; } // numeric(18,2)
		[Column("sourceid"),    NotNull              ] public short     Sourceid         { get; set; } // smallint
		[Column(),              NotNull              ] public int       ImportResultId   { get; set; } // integer
		[Column(),                 Nullable          ] public int?      OperationHours   { get; set; } // integer
		[Column(),                 Nullable          ] public string    ReadingGroup     { get; set; } // text
		[Column(),                 Nullable          ] public int?      DevReadingTypeId { get; set; } // integer
		[Column(),                 Nullable          ] public string    ReadingTypeName  { get; set; } // text
		[Column(),              NotNull              ] public int       DevGlobalType    { get; set; } // integer
		[Column(),              NotNull              ] public int       Responsibility   { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.TempReading_billing.devices_devid
		/// </summary>
		[Association(ThisKey="Devid", OtherKey="Devid", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.TempReading_billing.devices_devid", BackReferenceName="BillingTempReadingbillingdevicesdevids")]
		public billing_Device Dev { get; set; }

		/// <summary>
		/// FK_billing.TempReading_billing.DevReadingType_DevReadingTypeId
		/// </summary>
		[Association(ThisKey="DevReadingTypeId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_billing.TempReading_billing.DevReadingType_DevReadingTypeId", BackReferenceName="BillingTempReadingbillingDevReadingTypeDevReadingTypeIds")]
		public billing_DevReadingType DevReadingType { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="tmp_table")]
	public partial class billing_TmpTable
	{
		[Column("roomid"),          Nullable] public int?        Roomid          { get; set; } // integer
		[Column("abname"),          Nullable] public string      Abname          { get; set; } // text
		[Column("groupid"),         Nullable] public int?        Groupid         { get; set; } // integer
		[Column("abnumber"),        Nullable] public string      Abnumber        { get; set; } // character varying(255)
		[Column("lastname"),        Nullable] public string      Lastname        { get; set; } // character varying(255)
		[Column("firstname"),       Nullable] public string      Firstname       { get; set; } // character varying(255)
		[Column("middlename"),      Nullable] public string      Middlename      { get; set; } // character varying(255)
		[Column("address"),         Nullable] public string      Address         { get; set; } // character varying(255)
		[Column("homephone"),       Nullable] public string      Homephone       { get; set; } // character varying(255)
		[Column("cellphone"),       Nullable] public string      Cellphone       { get; set; } // character varying(255)
		[Column("email"),           Nullable] public string      Email           { get; set; } // character varying(255)
		[Column("descr"),           Nullable] public string      Descr           { get; set; } // character varying(255)
		[Column("atype"),           Nullable] public int?        Atype           { get; set; } // integer
		[Column("floornum"),        Nullable] public int?        Floornum        { get; set; } // integer
		[Column("aptnum"),          Nullable] public int?        Aptnum          { get; set; } // integer
		[Column("aptarea"),         Nullable] public decimal?    Aptarea         { get; set; } // numeric(18,2)
		[Column("roomtypeid"),      Nullable] public int?        Roomtypeid      { get; set; } // integer
		[Column("entrnum"),         Nullable] public int?        Entrnum         { get; set; } // integer
		[Column("coefflocation"),   Nullable] public float?      Coefflocation   { get; set; } // real
		[Column("acttransferdate"), Nullable] public NpgsqlDate? Acttransferdate { get; set; } // date
		[Column("roomid1"),         Nullable] public int?        Roomid1         { get; set; } // integer
		[Column("devid"),           Nullable] public string      Devid           { get; set; } // character varying(255)
		[Column("sernum"),          Nullable] public string      Sernum          { get; set; } // character varying(255)
		[Column("valvestatusid"),   Nullable] public int?        Valvestatusid   { get; set; } // integer
		[Column("devstatusid"),     Nullable] public int?        Devstatusid     { get; set; } // integer
		[Column("ts"),              Nullable] public DateTime?   Ts              { get; set; } // timestamp (6) without time zone
		[Column("valvechan"),       Nullable] public string      Valvechan       { get; set; } // character varying(255)
		[Column("devtypeid"),       Nullable] public int?        Devtypeid       { get; set; } // integer
		[Column("adapterid"),       Nullable] public string      Adapterid       { get; set; } // character varying(255)
		[Column("lastcheckdate"),   Nullable] public NpgsqlDate? Lastcheckdate   { get; set; } // date
		[Column("curvoli"),         Nullable] public double?     Curvoli         { get; set; } // double precision
		[Column("startdt"),         Nullable] public DateTime?   Startdt         { get; set; } // timestamp (6) without time zone
		[Column("enddt"),           Nullable] public DateTime?   Enddt           { get; set; } // timestamp (6) without time zone
		[Column("productdt"),       Nullable] public NpgsqlDate? Productdt       { get; set; } // date
		[Column("sernumold"),       Nullable] public string      Sernumold       { get; set; } // text
		[Column("workhours"),       Nullable] public int?        Workhours       { get; set; } // integer
		[Column("heatertypeid"),    Nullable] public int?        Heatertypeid    { get; set; } // integer
		[Column("typename"),        Nullable] public string      Typename        { get; set; } // character varying(255)
		[Column(),                  Nullable] public decimal?    C1              { get; set; } // numeric
		[Column("devid1"),          Nullable] public string      Devid1          { get; set; } // character varying(255)
		[Column("devtypeid1"),      Nullable] public int?        Devtypeid1      { get; set; } // integer
		[Column("id"),              Nullable] public int?        Id              { get; set; } // integer
		[Column(),                  Nullable] public int?        C2              { get; set; } // integer
		[Column("code"),            Nullable] public int?        Code            { get; set; } // integer
		[Column("devid2"),          Nullable] public string      Devid2          { get; set; } // character varying(255)
		[Column(),                  Nullable] public NpgsqlDate? DateStart       { get; set; } // date
		[Column(),                  Nullable] public NpgsqlDate? DateEnd         { get; set; } // date
	}

	[Table(Schema="billing", Name="units")]
	public partial class billing_Unit
	{
		[Column("unitid"),   PrimaryKey,  NotNull] public int    Unitid   { get; set; } // integer
		[Column("unitname"),    Nullable         ] public string Unitname { get; set; } // character varying(255)
		[Column("unitdes"),     Nullable         ] public string Unitdes  { get; set; } // character varying(255)

		#region Associations

		/// <summary>
		/// FK_billing.DevReadingType_billing.units_UnitId_BackReference
		/// </summary>
		[Association(ThisKey="Unitid", OtherKey="UnitId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_DevReadingType> BillingDevReadingTypebillingunitsUnitIds { get; set; }

		/// <summary>
		/// fk_devtypes_unitid_units_unitid_BackReference
		/// </summary>
		[Association(ThisKey="Unitid", OtherKey="Unitid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Devtype> Fkdevtypesunitidunitids { get; set; }

		/// <summary>
		/// fk_resources_unitid_units_unitid_BackReference
		/// </summary>
		[Association(ThisKey="Unitid", OtherKey="Unitid", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_Resource> Fkresourcesunitidunitids { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="User")]
	public partial class billing_User
	{
		[PrimaryKey, Identity   ] public int      Id           { get; set; } // integer
		[Column,        Nullable] public string   Login        { get; set; } // text
		[Column,        Nullable] public string   PasswordHash { get; set; } // text
		[Column,        Nullable] public string   Description  { get; set; } // text
		[Column,     NotNull    ] public DateTime EventDate    { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public string   Email        { get; set; } // text
		[Column,     NotNull    ] public bool     IsWorking    { get; set; } // boolean
		[Column,        Nullable] public string   Token        { get; set; } // text
		[Column,     NotNull    ] public DateTime TokenDateEnd { get; set; } // timestamp (6) without time zone

		#region Associations

		/// <summary>
		/// FK_billing.UserRole_billing.User_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<billing_UserRole> BillingUserRolebillingUserUserIds { get; set; }

		#endregion
	}

	[Table(Schema="billing", Name="UserRole")]
	public partial class billing_UserRole
	{
		[PrimaryKey(1), NotNull] public int UserId { get; set; } // integer
		[PrimaryKey(2), NotNull] public int RoleId { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_billing.UserRole_billing.Role_RoleId
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.UserRole_billing.Role_RoleId", BackReferenceName="BillingUserRolebillingRoleRoleIds")]
		public billing_Role Role { get; set; }

		/// <summary>
		/// FK_billing.UserRole_billing.User_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_billing.UserRole_billing.User_UserId", BackReferenceName="BillingUserRolebillingUserUserIds")]
		public billing_User User { get; set; }

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region AddExpenseDev

		[Sql.Function(Name="billing.add_expense_dev", ServerSideOnly=true)]
		public static int? AddExpenseDev(int? abonentid_in, DateTime? regdt_in, string devid_in, int? rectypeid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AddExpenseNorm

		[Sql.Function(Name="billing.add_expense_norm", ServerSideOnly=true)]
		public static int? AddExpenseNorm(int? abonentid_in, string devid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CalcAccTotals

		[Sql.Function(Name="billing.calc_acc_totals", ServerSideOnly=true)]
		public static int? CalcAccTotals(int? abonentid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CheckAccount

		[Sql.Function(Name="billing.check_account", ServerSideOnly=true)]
		public static int? CheckAccount(int? abonentid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CheckDbver

		[Sql.Function(Name="billing.check_dbver", ServerSideOnly=true)]
		public static int? CheckDbver(string curver_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CorrectDevdata

		[Sql.Function(Name="billing.correct_devdata", ServerSideOnly=true)]
		public static int? CorrectDevdata(string devid_in, DateTime? dt_in, double? voli_in, string doc_in, NpgsqlDate? docdate_in, bool? init_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaysInMonth

		[Sql.Function(Name="billing.days_in_month", ServerSideOnly=true)]
		public static int? DaysInMonth(DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DelDevdata

		[Sql.Function(Name="billing.del_devdata", ServerSideOnly=true)]
		public static int? DelDevdata(string devid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FillAbonbalgroup

		[Sql.Function(Name="billing.fill_abonbalgroup", ServerSideOnly=true)]
		public static int? FillAbonbalgroup(int? groupid_in, int? balgroupid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FillDevdata

		[Sql.Function(Name="billing.fill_devdata", ServerSideOnly=true)]
		public static int? FillDevdata(int? abonentid_in, string devid_in, DateTime? dt_in, DateTime? ts_in, double? voli_in, int? source_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetAccTotals

		[Sql.Function(Name="billing.get_acc_totals", ServerSideOnly=true)]
		public static decimal? GetAccTotals(int? abonentid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetAccTurnover

		[Sql.Function(Name="billing.get_acc_turnover", ServerSideOnly=true)]
		public static decimal? GetAccTurnover(int? abonentid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetAccTurnoverCr

		[Sql.Function(Name="billing.get_acc_turnover_cr", ServerSideOnly=true)]
		public static decimal? GetAccTurnoverCr(int? abonentid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetAccTurnoverDt

		[Sql.Function(Name="billing.get_acc_turnover_dt", ServerSideOnly=true)]
		public static decimal? GetAccTurnoverDt(int? abonentid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetBillStartDate

		[Sql.Function(Name="billing.get_bill_start_date", ServerSideOnly=true)]
		public static NpgsqlDate? GetBillStartDate()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetDelta

		[Sql.Function(Name="billing.get_delta", ServerSideOnly=true)]
		public static double? GetDelta(string devid_in, int? rectypeid_in, DateTime? dt_in, double? voli_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetDevid

		[Sql.Function(Name="billing.get_devid", ServerSideOnly=true)]
		public static string GetDevid(string devid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetNumber

		[Sql.Function(Name="billing.get_number", ServerSideOnly=true)]
		public static decimal? GetNumber(string par21)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetPgGroupName

		[Sql.Function(Name="billing.get_pg_group_name", ServerSideOnly=true)]
		public static string GetPgGroupName(int? roleid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetPgLoginName

		[Sql.Function(Name="billing.get_pg_login_name", ServerSideOnly=true)]
		public static string GetPgLoginName(int? userid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetRate

		[Sql.Function(Name="billing.get_rate", ServerSideOnly=true)]
		public static decimal? GetRate(int? abonentid_in, string devid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetSeason

		[Sql.Function(Name="billing.get_season", ServerSideOnly=true)]
		public static string GetSeason(DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetWarnLevel

		[Sql.Function(Name="billing.get_warn_level", ServerSideOnly=true)]
		public static int? GetWarnLevel(int? abonentid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ImpDevdata

		[Sql.Function(Name="billing.imp_devdata", ServerSideOnly=true)]
		public static int? ImpDevdata(int? abonentid_in, string devid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrepareAccInfo

		[Sql.Function(Name="billing.prepare_acc_info", ServerSideOnly=true)]
		public static int? PrepareAccInfo(string cellphone_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrepareMessage

		[Sql.Function(Name="billing.prepare_message", ServerSideOnly=true)]
		public static int? PrepareMessage(int? abonentid_in, string devid_in, int? typeid_in, string msgtemplid_in, DateTime? dt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegDevattr

		[Sql.Function(Name="billing.reg_devattr", ServerSideOnly=true)]
		public static int? RegDevattr(string devid_in, string attrid_in, string val_in, DateTime? ts_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegDevice

		[Sql.Function(Name="billing.reg_device", ServerSideOnly=true)]
		public static DateTime? RegDevice(string devid_in, string adapterid_in, string typename_in, string sernum_in, int? resid_in, int? unitid_in, bool? iscontint_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rep100Clear

		[Sql.Function(Name="billing.rep100_clear", ServerSideOnly=true)]
		public static int? Rep100Clear()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rep100Prepare

		[Sql.Function(Name="billing.rep100_prepare", ServerSideOnly=true)]
		public static int? Rep100Prepare(int? groupid_in, double? qtotal_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rep100PrepareR

		[Sql.Function(Name="billing.rep100_prepare_r", ServerSideOnly=true)]
		public static int? Rep100PrepareR(int? groupid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetDevdata

		[Sql.Function(Name="billing.set_devdata", ServerSideOnly=true)]
		public static int? SetDevdata(string devid_in, DateTime? dt_in, DateTime? ts_in, double? voli_in, bool? usevfactor_in, int? source_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetDevstatus

		[Sql.Function(Name="billing.set_devstatus", ServerSideOnly=true)]
		public static int? SetDevstatus(string devid_in, int? devstatusid_in, double? curvoli_in, bool? usevfactor_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetTsab

		[Sql.Function(Name="billing.set_tsab", ServerSideOnly=true)]
		public static int? SetTsab(string devid_in, DateTime? dt_in, DateTime? ts_in, double? tsabi_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgAbondevAfter

		[Sql.Function(Name="billing.trg_abondev_after", ServerSideOnly=true)]
		public static object TrgAbondevAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgAccoperAfter

		[Sql.Function(Name="billing.trg_accoper_after", ServerSideOnly=true)]
		public static object TrgAccoperAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgDevicesAfter

		[Sql.Function(Name="billing.trg_devices_after", ServerSideOnly=true)]
		public static object TrgDevicesAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgDevicesBefore

		[Sql.Function(Name="billing.trg_devices_before", ServerSideOnly=true)]
		public static object TrgDevicesBefore()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgExpensesAfter

		[Sql.Function(Name="billing.trg_expenses_after", ServerSideOnly=true)]
		public static object TrgExpensesAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgPaymentsAfter

		[Sql.Function(Name="billing.trg_payments_after", ServerSideOnly=true)]
		public static object TrgPaymentsAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgRestrictAbonentid

		[Sql.Function(Name="billing.trg_restrict_abonentid", ServerSideOnly=true)]
		public static object TrgRestrictAbonentid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgTarratesAfter

		[Sql.Function(Name="billing.trg_tarrates_after", ServerSideOnly=true)]
		public static object TrgTarratesAfter()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgUserrolesBefore

		[Sql.Function(Name="billing.trg_userroles_before", ServerSideOnly=true)]
		public static object TrgUserrolesBefore()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TrgUsersBefore

		[Sql.Function(Name="billing.trg_users_before", ServerSideOnly=true)]
		public static object TrgUsersBefore()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpdAbonents

		[Sql.Function(Name="billing.upd_abonents", ServerSideOnly=true)]
		public static int? UpdAbonents()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpdDbver

		[Sql.Function(Name="billing.upd_dbver", ServerSideOnly=true)]
		public static int? UpdDbver(string newver_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpdDevices

		[Sql.Function(Name="billing.upd_devices", ServerSideOnly=true)]
		public static int? UpdDevices()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpdExpenses

		[Sql.Function(Name="billing.upd_expenses", ServerSideOnly=true)]
		public static int? UpdExpenses(int? abonentid_in, string devid_in, DateTime? sdt_in, DateTime? edt_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ValveControl

		[Sql.Function(Name="billing.valve_control", ServerSideOnly=true)]
		public static int? ValveControl(string devid_in, bool? cmdopen_in, int? userid_in)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharMaxLength

		[Sql.Function(Name="information_schema._pg_char_max_length", ServerSideOnly=true)]
		public static int? PgCharMaxLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharOctetLength

		[Sql.Function(Name="information_schema._pg_char_octet_length", ServerSideOnly=true)]
		public static int? PgCharOctetLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatetimePrecision

		[Sql.Function(Name="information_schema._pg_datetime_precision", ServerSideOnly=true)]
		public static int? PgDatetimePrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexPosition

		[Sql.Function(Name="information_schema._pg_index_position", ServerSideOnly=true)]
		public static int? PgIndexPosition(int? par69, short? par70)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIntervalType

		[Sql.Function(Name="information_schema._pg_interval_type", ServerSideOnly=true)]
		public static string PgIntervalType(int? typid, int? mod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgKeysequal

		[Sql.Function(Name="information_schema._pg_keysequal", ServerSideOnly=true)]
		public static bool? PgKeysequal(object par73, object par74)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecision

		[Sql.Function(Name="information_schema._pg_numeric_precision", ServerSideOnly=true)]
		public static int? PgNumericPrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecisionRadix

		[Sql.Function(Name="information_schema._pg_numeric_precision_radix", ServerSideOnly=true)]
		public static int? PgNumericPrecisionRadix(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericScale

		[Sql.Function(Name="information_schema._pg_numeric_scale", ServerSideOnly=true)]
		public static int? PgNumericScale(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypid

		[Sql.Function(Name="information_schema._pg_truetypid", ServerSideOnly=true)]
		public static int? PgTruetypid(object par79, object par80)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypmod

		[Sql.Function(Name="information_schema._pg_truetypmod", ServerSideOnly=true)]
		public static int? PgTruetypmod(object par82, object par83)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abbrev

		[Sql.Function(Name="pg_catalog.abbrev", ServerSideOnly=true)]
		public static string Abbrev(NpgsqlInet? par87)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abs

		[Sql.Function(Name="pg_catalog.abs", ServerSideOnly=true)]
		public static decimal? Abs(decimal? par99)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstime

		[Sql.Function(Name="pg_catalog.abstime", ServerSideOnly=true)]
		public static object Abstime(DateTime? par103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimeeq

		[Sql.Function(Name="pg_catalog.abstimeeq", ServerSideOnly=true)]
		public static bool? Abstimeeq(object par105, object par106)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimege

		[Sql.Function(Name="pg_catalog.abstimege", ServerSideOnly=true)]
		public static bool? Abstimege(object par108, object par109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimegt

		[Sql.Function(Name="pg_catalog.abstimegt", ServerSideOnly=true)]
		public static bool? Abstimegt(object par111, object par112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimein

		[Sql.Function(Name="pg_catalog.abstimein", ServerSideOnly=true)]
		public static object Abstimein(object par114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimele

		[Sql.Function(Name="pg_catalog.abstimele", ServerSideOnly=true)]
		public static bool? Abstimele(object par116, object par117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimelt

		[Sql.Function(Name="pg_catalog.abstimelt", ServerSideOnly=true)]
		public static bool? Abstimelt(object par119, object par120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimene

		[Sql.Function(Name="pg_catalog.abstimene", ServerSideOnly=true)]
		public static bool? Abstimene(object par122, object par123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimeout

		[Sql.Function(Name="pg_catalog.abstimeout", ServerSideOnly=true)]
		public static object Abstimeout(object par125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimerecv

		[Sql.Function(Name="pg_catalog.abstimerecv", ServerSideOnly=true)]
		public static object Abstimerecv(object par127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimesend

		[Sql.Function(Name="pg_catalog.abstimesend", ServerSideOnly=true)]
		public static byte[] Abstimesend(object par129)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclcontains

		[Sql.Function(Name="pg_catalog.aclcontains", ServerSideOnly=true)]
		public static bool? Aclcontains(object par131, object par132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acldefault

		[Sql.Function(Name="pg_catalog.acldefault", ServerSideOnly=true)]
		public static object Acldefault(object par134, int? par135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclinsert

		[Sql.Function(Name="pg_catalog.aclinsert", ServerSideOnly=true)]
		public static object Aclinsert(object par137, object par138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemeq

		[Sql.Function(Name="pg_catalog.aclitemeq", ServerSideOnly=true)]
		public static bool? Aclitemeq(object par140, object par141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemin

		[Sql.Function(Name="pg_catalog.aclitemin", ServerSideOnly=true)]
		public static object Aclitemin(object par143)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemout

		[Sql.Function(Name="pg_catalog.aclitemout", ServerSideOnly=true)]
		public static object Aclitemout(object par145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclremove

		[Sql.Function(Name="pg_catalog.aclremove", ServerSideOnly=true)]
		public static object Aclremove(object par147, object par148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acos

		[Sql.Function(Name="pg_catalog.acos", ServerSideOnly=true)]
		public static double? Acos(double? par150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acosd

		[Sql.Function(Name="pg_catalog.acosd", ServerSideOnly=true)]
		public static double? Acosd(double? par152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Age

		[Sql.Function(Name="pg_catalog.age", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Age(DateTime? par164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Amvalidate

		[Sql.Function(Name="pg_catalog.amvalidate", ServerSideOnly=true)]
		public static bool? Amvalidate(int? par166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyIn

		[Sql.Function(Name="pg_catalog.any_in", ServerSideOnly=true)]
		public static object AnyIn(object par168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyOut

		[Sql.Function(Name="pg_catalog.any_out", ServerSideOnly=true)]
		public static object AnyOut(object par170)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayIn

		[Sql.Function(Name="pg_catalog.anyarray_in", ServerSideOnly=true)]
		public static object AnyarrayIn(object par172)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayOut

		[Sql.Function(Name="pg_catalog.anyarray_out", ServerSideOnly=true)]
		public static object AnyarrayOut(object par174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayRecv

		[Sql.Function(Name="pg_catalog.anyarray_recv", ServerSideOnly=true)]
		public static object AnyarrayRecv(object par176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarraySend

		[Sql.Function(Name="pg_catalog.anyarray_send", ServerSideOnly=true)]
		public static byte[] AnyarraySend(object par178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementIn

		[Sql.Function(Name="pg_catalog.anyelement_in", ServerSideOnly=true)]
		public static object AnyelementIn(object par180)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementOut

		[Sql.Function(Name="pg_catalog.anyelement_out", ServerSideOnly=true)]
		public static object AnyelementOut(object par182)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumIn

		[Sql.Function(Name="pg_catalog.anyenum_in", ServerSideOnly=true)]
		public static object AnyenumIn(object par184)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumOut

		[Sql.Function(Name="pg_catalog.anyenum_out", ServerSideOnly=true)]
		public static object AnyenumOut(object par186)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayIn

		[Sql.Function(Name="pg_catalog.anynonarray_in", ServerSideOnly=true)]
		public static object AnynonarrayIn(object par188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayOut

		[Sql.Function(Name="pg_catalog.anynonarray_out", ServerSideOnly=true)]
		public static object AnynonarrayOut(object par190)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeIn

		[Sql.Function(Name="pg_catalog.anyrange_in", ServerSideOnly=true)]
		public static object AnyrangeIn(object par192, int? par193, int? par194)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeOut

		[Sql.Function(Name="pg_catalog.anyrange_out", ServerSideOnly=true)]
		public static object AnyrangeOut(object par196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Anytextcat

		[Sql.Function(Name="pg_catalog.anytextcat", ServerSideOnly=true)]
		public static string Anytextcat(object par198, string par199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Area

		[Sql.Function(Name="pg_catalog.area", ServerSideOnly=true)]
		public static double? Area(NpgsqlPath? par205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areajoinsel

		[Sql.Function(Name="pg_catalog.areajoinsel", ServerSideOnly=true)]
		public static double? Areajoinsel(object par207, int? par208, object par209, short? par210, object par211)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areasel

		[Sql.Function(Name="pg_catalog.areasel", ServerSideOnly=true)]
		public static double? Areasel(object par213, int? par214, object par215, int? par216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAgg

		[Sql.Function(Name="pg_catalog.array_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object ArrayAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_array_finalfn", ServerSideOnly=true)]
		public static object ArrayAggArrayFinalfn(object par222, object par223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayTransfn

		[Sql.Function(Name="pg_catalog.array_agg_array_transfn", ServerSideOnly=true)]
		public static object ArrayAggArrayTransfn(object par225, object par226)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_finalfn", ServerSideOnly=true)]
		public static object ArrayAggFinalfn(object par228, object par229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggTransfn

		[Sql.Function(Name="pg_catalog.array_agg_transfn", ServerSideOnly=true)]
		public static object ArrayAggTransfn(object par231, object par232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAppend

		[Sql.Function(Name="pg_catalog.array_append", ServerSideOnly=true)]
		public static object ArrayAppend(object par234, object par235)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayCat

		[Sql.Function(Name="pg_catalog.array_cat", ServerSideOnly=true)]
		public static object ArrayCat(object par237, object par238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayDims

		[Sql.Function(Name="pg_catalog.array_dims", ServerSideOnly=true)]
		public static string ArrayDims(object par240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayEq

		[Sql.Function(Name="pg_catalog.array_eq", ServerSideOnly=true)]
		public static bool? ArrayEq(object par242, object par243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayFill

		[Sql.Function(Name="pg_catalog.array_fill", ServerSideOnly=true)]
		public static object ArrayFill(object par248, object par249, object par250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGe

		[Sql.Function(Name="pg_catalog.array_ge", ServerSideOnly=true)]
		public static bool? ArrayGe(object par252, object par253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGt

		[Sql.Function(Name="pg_catalog.array_gt", ServerSideOnly=true)]
		public static bool? ArrayGt(object par255, object par256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayIn

		[Sql.Function(Name="pg_catalog.array_in", ServerSideOnly=true)]
		public static object ArrayIn(object par258, int? par259, int? par260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLarger

		[Sql.Function(Name="pg_catalog.array_larger", ServerSideOnly=true)]
		public static object ArrayLarger(object par262, object par263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLe

		[Sql.Function(Name="pg_catalog.array_le", ServerSideOnly=true)]
		public static bool? ArrayLe(object par265, object par266)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLength

		[Sql.Function(Name="pg_catalog.array_length", ServerSideOnly=true)]
		public static int? ArrayLength(object par268, int? par269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLower

		[Sql.Function(Name="pg_catalog.array_lower", ServerSideOnly=true)]
		public static int? ArrayLower(object par271, int? par272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLt

		[Sql.Function(Name="pg_catalog.array_lt", ServerSideOnly=true)]
		public static bool? ArrayLt(object par274, object par275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNdims

		[Sql.Function(Name="pg_catalog.array_ndims", ServerSideOnly=true)]
		public static int? ArrayNdims(object par277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNe

		[Sql.Function(Name="pg_catalog.array_ne", ServerSideOnly=true)]
		public static bool? ArrayNe(object par279, object par280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayOut

		[Sql.Function(Name="pg_catalog.array_out", ServerSideOnly=true)]
		public static object ArrayOut(object par282)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPosition

		[Sql.Function(Name="pg_catalog.array_position", ServerSideOnly=true)]
		public static int? ArrayPosition(object par287, object par288, int? par289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPositions

		[Sql.Function(Name="pg_catalog.array_positions", ServerSideOnly=true)]
		public static object ArrayPositions(object par291, object par292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPrepend

		[Sql.Function(Name="pg_catalog.array_prepend", ServerSideOnly=true)]
		public static object ArrayPrepend(object par294, object par295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRecv

		[Sql.Function(Name="pg_catalog.array_recv", ServerSideOnly=true)]
		public static object ArrayRecv(object par297, int? par298, int? par299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRemove

		[Sql.Function(Name="pg_catalog.array_remove", ServerSideOnly=true)]
		public static object ArrayRemove(object par301, object par302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayReplace

		[Sql.Function(Name="pg_catalog.array_replace", ServerSideOnly=true)]
		public static object ArrayReplace(object par304, object par305, object par306)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySend

		[Sql.Function(Name="pg_catalog.array_send", ServerSideOnly=true)]
		public static byte[] ArraySend(object par308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySmaller

		[Sql.Function(Name="pg_catalog.array_smaller", ServerSideOnly=true)]
		public static object ArraySmaller(object par310, object par311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToJson

		[Sql.Function(Name="pg_catalog.array_to_json", ServerSideOnly=true)]
		public static string ArrayToJson(object par315, bool? par316)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToString

		[Sql.Function(Name="pg_catalog.array_to_string", ServerSideOnly=true)]
		public static string ArrayToString(object par322, string par323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToTsvector

		[Sql.Function(Name="pg_catalog.array_to_tsvector", ServerSideOnly=true)]
		public static object ArrayToTsvector(object par325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayTypanalyze

		[Sql.Function(Name="pg_catalog.array_typanalyze", ServerSideOnly=true)]
		public static bool? ArrayTypanalyze(object par327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayUpper

		[Sql.Function(Name="pg_catalog.array_upper", ServerSideOnly=true)]
		public static int? ArrayUpper(object par329, int? par330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontained

		[Sql.Function(Name="pg_catalog.arraycontained", ServerSideOnly=true)]
		public static bool? Arraycontained(object par332, object par333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontains

		[Sql.Function(Name="pg_catalog.arraycontains", ServerSideOnly=true)]
		public static bool? Arraycontains(object par335, object par336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontjoinsel

		[Sql.Function(Name="pg_catalog.arraycontjoinsel", ServerSideOnly=true)]
		public static double? Arraycontjoinsel(object par338, int? par339, object par340, short? par341, object par342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontsel

		[Sql.Function(Name="pg_catalog.arraycontsel", ServerSideOnly=true)]
		public static double? Arraycontsel(object par344, int? par345, object par346, int? par347)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arrayoverlap

		[Sql.Function(Name="pg_catalog.arrayoverlap", ServerSideOnly=true)]
		public static bool? Arrayoverlap(object par349, object par350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ascii

		[Sql.Function(Name="pg_catalog.ascii", ServerSideOnly=true)]
		public static int? Ascii(string par352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToMic

		[Sql.Function(Name="pg_catalog.ascii_to_mic", ServerSideOnly=true)]
		public static object AsciiToMic(int? par353, int? par354, object par355, object par356, int? par357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToUtf8

		[Sql.Function(Name="pg_catalog.ascii_to_utf8", ServerSideOnly=true)]
		public static object AsciiToUtf8(int? par358, int? par359, object par360, object par361, int? par362)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asin

		[Sql.Function(Name="pg_catalog.asin", ServerSideOnly=true)]
		public static double? Asin(double? par364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asind

		[Sql.Function(Name="pg_catalog.asind", ServerSideOnly=true)]
		public static double? Asind(double? par366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan

		[Sql.Function(Name="pg_catalog.atan", ServerSideOnly=true)]
		public static double? Atan(double? par368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan2

		[Sql.Function(Name="pg_catalog.atan2", ServerSideOnly=true)]
		public static double? Atan2(double? par370, double? par371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan2d

		[Sql.Function(Name="pg_catalog.atan2d", ServerSideOnly=true)]
		public static double? Atan2d(double? par373, double? par374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atand

		[Sql.Function(Name="pg_catalog.atand", ServerSideOnly=true)]
		public static double? Atand(double? par376)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Avg

		[Sql.Function(Name="pg_catalog.avg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlTimeSpan? Avg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlTimeSpan?>> par390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bernoulli

		[Sql.Function(Name="pg_catalog.bernoulli", ServerSideOnly=true)]
		public static object Bernoulli(object par392)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToEucTw

		[Sql.Function(Name="pg_catalog.big5_to_euc_tw", ServerSideOnly=true)]
		public static object Big5ToEucTw(int? par393, int? par394, object par395, object par396, int? par397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToMic

		[Sql.Function(Name="pg_catalog.big5_to_mic", ServerSideOnly=true)]
		public static object Big5ToMic(int? par398, int? par399, object par400, object par401, int? par402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToUtf8

		[Sql.Function(Name="pg_catalog.big5_to_utf8", ServerSideOnly=true)]
		public static object Big5ToUtf8(int? par403, int? par404, object par405, object par406, int? par407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeCreateEmptyExtension

		[Sql.Function(Name="pg_catalog.binary_upgrade_create_empty_extension", ServerSideOnly=true)]
		public static object BinaryUpgradeCreateEmptyExtension(string par408, string par409, bool? par410, string par411, object par412, object par413, object par414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextArrayPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_array_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextArrayPgTypeOid(int? par415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextHeapPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_heap_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextHeapPgClassOid(int? par416)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextIndexPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_index_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextIndexPgClassOid(int? par417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgAuthidOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_authid_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgAuthidOid(int? par418)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgEnumOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_enum_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgEnumOid(int? par419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextPgTypeOid(int? par420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_class_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextToastPgClassOid(int? par421)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_type_oid", ServerSideOnly=true)]
		public static object BinaryUpgradeSetNextToastPgTypeOid(int? par422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetRecordInitPrivs

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_record_init_privs", ServerSideOnly=true)]
		public static object BinaryUpgradeSetRecordInitPrivs(bool? par423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bit

		[Sql.Function(Name="pg_catalog.bit", ServerSideOnly=true)]
		public static BitArray Bit(long? par432, int? par433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitAnd

		[Sql.Function(Name="pg_catalog.bit_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray BitAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray>> par441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitIn

		[Sql.Function(Name="pg_catalog.bit_in", ServerSideOnly=true)]
		public static BitArray BitIn(object par443, int? par444, int? par445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitLength

		[Sql.Function(Name="pg_catalog.bit_length", ServerSideOnly=true)]
		public static int? BitLength(BitArray par451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOr

		[Sql.Function(Name="pg_catalog.bit_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray BitOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray>> par459)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOut

		[Sql.Function(Name="pg_catalog.bit_out", ServerSideOnly=true)]
		public static object BitOut(BitArray par461)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitRecv

		[Sql.Function(Name="pg_catalog.bit_recv", ServerSideOnly=true)]
		public static BitArray BitRecv(object par463, int? par464, int? par465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitSend

		[Sql.Function(Name="pg_catalog.bit_send", ServerSideOnly=true)]
		public static byte[] BitSend(BitArray par467)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitand

		[Sql.Function(Name="pg_catalog.bitand", ServerSideOnly=true)]
		public static BitArray Bitand(BitArray par469, BitArray par470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcat

		[Sql.Function(Name="pg_catalog.bitcat", ServerSideOnly=true)]
		public static BitArray Bitcat(BitArray par472, BitArray par473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcmp

		[Sql.Function(Name="pg_catalog.bitcmp", ServerSideOnly=true)]
		public static int? Bitcmp(BitArray par475, BitArray par476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Biteq

		[Sql.Function(Name="pg_catalog.biteq", ServerSideOnly=true)]
		public static bool? Biteq(BitArray par478, BitArray par479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitge

		[Sql.Function(Name="pg_catalog.bitge", ServerSideOnly=true)]
		public static bool? Bitge(BitArray par481, BitArray par482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitgt

		[Sql.Function(Name="pg_catalog.bitgt", ServerSideOnly=true)]
		public static bool? Bitgt(BitArray par484, BitArray par485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitle

		[Sql.Function(Name="pg_catalog.bitle", ServerSideOnly=true)]
		public static bool? Bitle(BitArray par487, BitArray par488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitlt

		[Sql.Function(Name="pg_catalog.bitlt", ServerSideOnly=true)]
		public static bool? Bitlt(BitArray par490, BitArray par491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitne

		[Sql.Function(Name="pg_catalog.bitne", ServerSideOnly=true)]
		public static bool? Bitne(BitArray par493, BitArray par494)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitnot

		[Sql.Function(Name="pg_catalog.bitnot", ServerSideOnly=true)]
		public static BitArray Bitnot(BitArray par496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitor

		[Sql.Function(Name="pg_catalog.bitor", ServerSideOnly=true)]
		public static BitArray Bitor(BitArray par498, BitArray par499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftleft

		[Sql.Function(Name="pg_catalog.bitshiftleft", ServerSideOnly=true)]
		public static BitArray Bitshiftleft(BitArray par501, int? par502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftright

		[Sql.Function(Name="pg_catalog.bitshiftright", ServerSideOnly=true)]
		public static BitArray Bitshiftright(BitArray par504, int? par505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodin

		[Sql.Function(Name="pg_catalog.bittypmodin", ServerSideOnly=true)]
		public static int? Bittypmodin(object par507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodout

		[Sql.Function(Name="pg_catalog.bittypmodout", ServerSideOnly=true)]
		public static object Bittypmodout(int? par509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitxor

		[Sql.Function(Name="pg_catalog.bitxor", ServerSideOnly=true)]
		public static BitArray Bitxor(BitArray par511, BitArray par512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bool

		[Sql.Function(Name="pg_catalog.bool", ServerSideOnly=true)]
		public static bool? Bool(int? par514)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccum

		[Sql.Function(Name="pg_catalog.bool_accum", ServerSideOnly=true)]
		public static object BoolAccum(object par516, bool? par517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccumInv

		[Sql.Function(Name="pg_catalog.bool_accum_inv", ServerSideOnly=true)]
		public static object BoolAccumInv(object par519, bool? par520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAlltrue

		[Sql.Function(Name="pg_catalog.bool_alltrue", ServerSideOnly=true)]
		public static bool? BoolAlltrue(object par522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnd

		[Sql.Function(Name="pg_catalog.bool_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnytrue

		[Sql.Function(Name="pg_catalog.bool_anytrue", ServerSideOnly=true)]
		public static bool? BoolAnytrue(object par526)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolOr

		[Sql.Function(Name="pg_catalog.bool_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par528)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolandStatefunc

		[Sql.Function(Name="pg_catalog.booland_statefunc", ServerSideOnly=true)]
		public static bool? BoolandStatefunc(bool? par530, bool? par531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Booleq

		[Sql.Function(Name="pg_catalog.booleq", ServerSideOnly=true)]
		public static bool? Booleq(bool? par533, bool? par534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolge

		[Sql.Function(Name="pg_catalog.boolge", ServerSideOnly=true)]
		public static bool? Boolge(bool? par536, bool? par537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolgt

		[Sql.Function(Name="pg_catalog.boolgt", ServerSideOnly=true)]
		public static bool? Boolgt(bool? par539, bool? par540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolin

		[Sql.Function(Name="pg_catalog.boolin", ServerSideOnly=true)]
		public static bool? Boolin(object par542)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolle

		[Sql.Function(Name="pg_catalog.boolle", ServerSideOnly=true)]
		public static bool? Boolle(bool? par544, bool? par545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boollt

		[Sql.Function(Name="pg_catalog.boollt", ServerSideOnly=true)]
		public static bool? Boollt(bool? par547, bool? par548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolne

		[Sql.Function(Name="pg_catalog.boolne", ServerSideOnly=true)]
		public static bool? Boolne(bool? par550, bool? par551)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolorStatefunc

		[Sql.Function(Name="pg_catalog.boolor_statefunc", ServerSideOnly=true)]
		public static bool? BoolorStatefunc(bool? par553, bool? par554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolout

		[Sql.Function(Name="pg_catalog.boolout", ServerSideOnly=true)]
		public static object Boolout(bool? par556)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolrecv

		[Sql.Function(Name="pg_catalog.boolrecv", ServerSideOnly=true)]
		public static bool? Boolrecv(object par558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolsend

		[Sql.Function(Name="pg_catalog.boolsend", ServerSideOnly=true)]
		public static byte[] Boolsend(bool? par560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoundBox

		[Sql.Function(Name="pg_catalog.bound_box", ServerSideOnly=true)]
		public static NpgsqlBox? BoundBox(NpgsqlBox? par562, NpgsqlBox? par563)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Box

		[Sql.Function(Name="pg_catalog.box", ServerSideOnly=true)]
		public static NpgsqlBox? Box(NpgsqlPoint? par572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAbove

		[Sql.Function(Name="pg_catalog.box_above", ServerSideOnly=true)]
		public static bool? BoxAbove(NpgsqlBox? par574, NpgsqlBox? par575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAboveEq

		[Sql.Function(Name="pg_catalog.box_above_eq", ServerSideOnly=true)]
		public static bool? BoxAboveEq(NpgsqlBox? par577, NpgsqlBox? par578)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAdd

		[Sql.Function(Name="pg_catalog.box_add", ServerSideOnly=true)]
		public static NpgsqlBox? BoxAdd(NpgsqlBox? par580, NpgsqlPoint? par581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelow

		[Sql.Function(Name="pg_catalog.box_below", ServerSideOnly=true)]
		public static bool? BoxBelow(NpgsqlBox? par583, NpgsqlBox? par584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelowEq

		[Sql.Function(Name="pg_catalog.box_below_eq", ServerSideOnly=true)]
		public static bool? BoxBelowEq(NpgsqlBox? par586, NpgsqlBox? par587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxCenter

		[Sql.Function(Name="pg_catalog.box_center", ServerSideOnly=true)]
		public static NpgsqlPoint? BoxCenter(NpgsqlBox? par589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContain

		[Sql.Function(Name="pg_catalog.box_contain", ServerSideOnly=true)]
		public static bool? BoxContain(NpgsqlBox? par591, NpgsqlBox? par592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContainPt

		[Sql.Function(Name="pg_catalog.box_contain_pt", ServerSideOnly=true)]
		public static bool? BoxContainPt(NpgsqlBox? par594, NpgsqlPoint? par595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContained

		[Sql.Function(Name="pg_catalog.box_contained", ServerSideOnly=true)]
		public static bool? BoxContained(NpgsqlBox? par597, NpgsqlBox? par598)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDistance

		[Sql.Function(Name="pg_catalog.box_distance", ServerSideOnly=true)]
		public static double? BoxDistance(NpgsqlBox? par600, NpgsqlBox? par601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDiv

		[Sql.Function(Name="pg_catalog.box_div", ServerSideOnly=true)]
		public static NpgsqlBox? BoxDiv(NpgsqlBox? par603, NpgsqlPoint? par604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxEq

		[Sql.Function(Name="pg_catalog.box_eq", ServerSideOnly=true)]
		public static bool? BoxEq(NpgsqlBox? par606, NpgsqlBox? par607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGe

		[Sql.Function(Name="pg_catalog.box_ge", ServerSideOnly=true)]
		public static bool? BoxGe(NpgsqlBox? par609, NpgsqlBox? par610)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGt

		[Sql.Function(Name="pg_catalog.box_gt", ServerSideOnly=true)]
		public static bool? BoxGt(NpgsqlBox? par612, NpgsqlBox? par613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIn

		[Sql.Function(Name="pg_catalog.box_in", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIn(object par615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIntersect

		[Sql.Function(Name="pg_catalog.box_intersect", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIntersect(NpgsqlBox? par617, NpgsqlBox? par618)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLe

		[Sql.Function(Name="pg_catalog.box_le", ServerSideOnly=true)]
		public static bool? BoxLe(NpgsqlBox? par620, NpgsqlBox? par621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLeft

		[Sql.Function(Name="pg_catalog.box_left", ServerSideOnly=true)]
		public static bool? BoxLeft(NpgsqlBox? par623, NpgsqlBox? par624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLt

		[Sql.Function(Name="pg_catalog.box_lt", ServerSideOnly=true)]
		public static bool? BoxLt(NpgsqlBox? par626, NpgsqlBox? par627)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxMul

		[Sql.Function(Name="pg_catalog.box_mul", ServerSideOnly=true)]
		public static NpgsqlBox? BoxMul(NpgsqlBox? par629, NpgsqlPoint? par630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOut

		[Sql.Function(Name="pg_catalog.box_out", ServerSideOnly=true)]
		public static object BoxOut(NpgsqlBox? par632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverabove

		[Sql.Function(Name="pg_catalog.box_overabove", ServerSideOnly=true)]
		public static bool? BoxOverabove(NpgsqlBox? par634, NpgsqlBox? par635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverbelow

		[Sql.Function(Name="pg_catalog.box_overbelow", ServerSideOnly=true)]
		public static bool? BoxOverbelow(NpgsqlBox? par637, NpgsqlBox? par638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverlap

		[Sql.Function(Name="pg_catalog.box_overlap", ServerSideOnly=true)]
		public static bool? BoxOverlap(NpgsqlBox? par640, NpgsqlBox? par641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverleft

		[Sql.Function(Name="pg_catalog.box_overleft", ServerSideOnly=true)]
		public static bool? BoxOverleft(NpgsqlBox? par643, NpgsqlBox? par644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverright

		[Sql.Function(Name="pg_catalog.box_overright", ServerSideOnly=true)]
		public static bool? BoxOverright(NpgsqlBox? par646, NpgsqlBox? par647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRecv

		[Sql.Function(Name="pg_catalog.box_recv", ServerSideOnly=true)]
		public static NpgsqlBox? BoxRecv(object par649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRight

		[Sql.Function(Name="pg_catalog.box_right", ServerSideOnly=true)]
		public static bool? BoxRight(NpgsqlBox? par651, NpgsqlBox? par652)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSame

		[Sql.Function(Name="pg_catalog.box_same", ServerSideOnly=true)]
		public static bool? BoxSame(NpgsqlBox? par654, NpgsqlBox? par655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSend

		[Sql.Function(Name="pg_catalog.box_send", ServerSideOnly=true)]
		public static byte[] BoxSend(NpgsqlBox? par657)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSub

		[Sql.Function(Name="pg_catalog.box_sub", ServerSideOnly=true)]
		public static NpgsqlBox? BoxSub(NpgsqlBox? par659, NpgsqlPoint? par660)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchar

		[Sql.Function(Name="pg_catalog.bpchar", ServerSideOnly=true)]
		public static string Bpchar(object par668)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharLarger

		[Sql.Function(Name="pg_catalog.bpchar_larger", ServerSideOnly=true)]
		public static string BpcharLarger(string par670, string par671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_ge", ServerSideOnly=true)]
		public static bool? BpcharPatternGe(string par673, string par674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_gt", ServerSideOnly=true)]
		public static bool? BpcharPatternGt(string par676, string par677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_le", ServerSideOnly=true)]
		public static bool? BpcharPatternLe(string par679, string par680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_lt", ServerSideOnly=true)]
		public static bool? BpcharPatternLt(string par682, string par683)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharSmaller

		[Sql.Function(Name="pg_catalog.bpchar_smaller", ServerSideOnly=true)]
		public static string BpcharSmaller(string par685, string par686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharSortsupport

		[Sql.Function(Name="pg_catalog.bpchar_sortsupport", ServerSideOnly=true)]
		public static object BpcharSortsupport(object par687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharcmp

		[Sql.Function(Name="pg_catalog.bpcharcmp", ServerSideOnly=true)]
		public static int? Bpcharcmp(string par689, string par690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchareq

		[Sql.Function(Name="pg_catalog.bpchareq", ServerSideOnly=true)]
		public static bool? Bpchareq(string par692, string par693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharge

		[Sql.Function(Name="pg_catalog.bpcharge", ServerSideOnly=true)]
		public static bool? Bpcharge(string par695, string par696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchargt

		[Sql.Function(Name="pg_catalog.bpchargt", ServerSideOnly=true)]
		public static bool? Bpchargt(string par698, string par699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchariclike

		[Sql.Function(Name="pg_catalog.bpchariclike", ServerSideOnly=true)]
		public static bool? Bpchariclike(string par701, string par702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicnlike

		[Sql.Function(Name="pg_catalog.bpcharicnlike", ServerSideOnly=true)]
		public static bool? Bpcharicnlike(string par704, string par705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexeq

		[Sql.Function(Name="pg_catalog.bpcharicregexeq", ServerSideOnly=true)]
		public static bool? Bpcharicregexeq(string par707, string par708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexne

		[Sql.Function(Name="pg_catalog.bpcharicregexne", ServerSideOnly=true)]
		public static bool? Bpcharicregexne(string par710, string par711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharin

		[Sql.Function(Name="pg_catalog.bpcharin", ServerSideOnly=true)]
		public static string Bpcharin(object par713, int? par714, int? par715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharle

		[Sql.Function(Name="pg_catalog.bpcharle", ServerSideOnly=true)]
		public static bool? Bpcharle(string par717, string par718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlike

		[Sql.Function(Name="pg_catalog.bpcharlike", ServerSideOnly=true)]
		public static bool? Bpcharlike(string par720, string par721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlt

		[Sql.Function(Name="pg_catalog.bpcharlt", ServerSideOnly=true)]
		public static bool? Bpcharlt(string par723, string par724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharne

		[Sql.Function(Name="pg_catalog.bpcharne", ServerSideOnly=true)]
		public static bool? Bpcharne(string par726, string par727)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharnlike

		[Sql.Function(Name="pg_catalog.bpcharnlike", ServerSideOnly=true)]
		public static bool? Bpcharnlike(string par729, string par730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharout

		[Sql.Function(Name="pg_catalog.bpcharout", ServerSideOnly=true)]
		public static object Bpcharout(string par732)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharrecv

		[Sql.Function(Name="pg_catalog.bpcharrecv", ServerSideOnly=true)]
		public static string Bpcharrecv(object par734, int? par735, int? par736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexeq

		[Sql.Function(Name="pg_catalog.bpcharregexeq", ServerSideOnly=true)]
		public static bool? Bpcharregexeq(string par738, string par739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexne

		[Sql.Function(Name="pg_catalog.bpcharregexne", ServerSideOnly=true)]
		public static bool? Bpcharregexne(string par741, string par742)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharsend

		[Sql.Function(Name="pg_catalog.bpcharsend", ServerSideOnly=true)]
		public static byte[] Bpcharsend(string par744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodin

		[Sql.Function(Name="pg_catalog.bpchartypmodin", ServerSideOnly=true)]
		public static int? Bpchartypmodin(object par746)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodout

		[Sql.Function(Name="pg_catalog.bpchartypmodout", ServerSideOnly=true)]
		public static object Bpchartypmodout(int? par748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionAddValue

		[Sql.Function(Name="pg_catalog.brin_inclusion_add_value", ServerSideOnly=true)]
		public static bool? BrinInclusionAddValue(object par750, object par751, object par752, object par753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionConsistent

		[Sql.Function(Name="pg_catalog.brin_inclusion_consistent", ServerSideOnly=true)]
		public static bool? BrinInclusionConsistent(object par755, object par756, object par757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionOpcinfo

		[Sql.Function(Name="pg_catalog.brin_inclusion_opcinfo", ServerSideOnly=true)]
		public static object BrinInclusionOpcinfo(object par759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionUnion

		[Sql.Function(Name="pg_catalog.brin_inclusion_union", ServerSideOnly=true)]
		public static bool? BrinInclusionUnion(object par761, object par762, object par763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxAddValue

		[Sql.Function(Name="pg_catalog.brin_minmax_add_value", ServerSideOnly=true)]
		public static bool? BrinMinmaxAddValue(object par765, object par766, object par767, object par768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxConsistent

		[Sql.Function(Name="pg_catalog.brin_minmax_consistent", ServerSideOnly=true)]
		public static bool? BrinMinmaxConsistent(object par770, object par771, object par772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxOpcinfo

		[Sql.Function(Name="pg_catalog.brin_minmax_opcinfo", ServerSideOnly=true)]
		public static object BrinMinmaxOpcinfo(object par774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxUnion

		[Sql.Function(Name="pg_catalog.brin_minmax_union", ServerSideOnly=true)]
		public static bool? BrinMinmaxUnion(object par776, object par777, object par778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinSummarizeNewValues

		[Sql.Function(Name="pg_catalog.brin_summarize_new_values", ServerSideOnly=true)]
		public static int? BrinSummarizeNewValues(object par780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinhandler

		[Sql.Function(Name="pg_catalog.brinhandler", ServerSideOnly=true)]
		public static object Brinhandler(object par782)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Broadcast

		[Sql.Function(Name="pg_catalog.broadcast", ServerSideOnly=true)]
		public static NpgsqlInet? Broadcast(NpgsqlInet? par784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btabstimecmp

		[Sql.Function(Name="pg_catalog.btabstimecmp", ServerSideOnly=true)]
		public static int? Btabstimecmp(object par786, object par787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btarraycmp

		[Sql.Function(Name="pg_catalog.btarraycmp", ServerSideOnly=true)]
		public static int? Btarraycmp(object par789, object par790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btboolcmp

		[Sql.Function(Name="pg_catalog.btboolcmp", ServerSideOnly=true)]
		public static int? Btboolcmp(bool? par792, bool? par793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BtbpcharPatternCmp

		[Sql.Function(Name="pg_catalog.btbpchar_pattern_cmp", ServerSideOnly=true)]
		public static int? BtbpcharPatternCmp(string par795, string par796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BtbpcharPatternSortsupport

		[Sql.Function(Name="pg_catalog.btbpchar_pattern_sortsupport", ServerSideOnly=true)]
		public static object BtbpcharPatternSortsupport(object par797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btcharcmp

		[Sql.Function(Name="pg_catalog.btcharcmp", ServerSideOnly=true)]
		public static int? Btcharcmp(object par799, object par800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat48cmp

		[Sql.Function(Name="pg_catalog.btfloat48cmp", ServerSideOnly=true)]
		public static int? Btfloat48cmp(float? par802, double? par803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4cmp

		[Sql.Function(Name="pg_catalog.btfloat4cmp", ServerSideOnly=true)]
		public static int? Btfloat4cmp(float? par805, float? par806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4sortsupport

		[Sql.Function(Name="pg_catalog.btfloat4sortsupport", ServerSideOnly=true)]
		public static object Btfloat4sortsupport(object par807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat84cmp

		[Sql.Function(Name="pg_catalog.btfloat84cmp", ServerSideOnly=true)]
		public static int? Btfloat84cmp(double? par809, float? par810)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8cmp

		[Sql.Function(Name="pg_catalog.btfloat8cmp", ServerSideOnly=true)]
		public static int? Btfloat8cmp(double? par812, double? par813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8sortsupport

		[Sql.Function(Name="pg_catalog.btfloat8sortsupport", ServerSideOnly=true)]
		public static object Btfloat8sortsupport(object par814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bthandler

		[Sql.Function(Name="pg_catalog.bthandler", ServerSideOnly=true)]
		public static object Bthandler(object par816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint24cmp

		[Sql.Function(Name="pg_catalog.btint24cmp", ServerSideOnly=true)]
		public static int? Btint24cmp(short? par818, int? par819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint28cmp

		[Sql.Function(Name="pg_catalog.btint28cmp", ServerSideOnly=true)]
		public static int? Btint28cmp(short? par821, long? par822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2cmp

		[Sql.Function(Name="pg_catalog.btint2cmp", ServerSideOnly=true)]
		public static int? Btint2cmp(short? par824, short? par825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2sortsupport

		[Sql.Function(Name="pg_catalog.btint2sortsupport", ServerSideOnly=true)]
		public static object Btint2sortsupport(object par826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint42cmp

		[Sql.Function(Name="pg_catalog.btint42cmp", ServerSideOnly=true)]
		public static int? Btint42cmp(int? par828, short? par829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint48cmp

		[Sql.Function(Name="pg_catalog.btint48cmp", ServerSideOnly=true)]
		public static int? Btint48cmp(int? par831, long? par832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4cmp

		[Sql.Function(Name="pg_catalog.btint4cmp", ServerSideOnly=true)]
		public static int? Btint4cmp(int? par834, int? par835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4sortsupport

		[Sql.Function(Name="pg_catalog.btint4sortsupport", ServerSideOnly=true)]
		public static object Btint4sortsupport(object par836)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint82cmp

		[Sql.Function(Name="pg_catalog.btint82cmp", ServerSideOnly=true)]
		public static int? Btint82cmp(long? par838, short? par839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint84cmp

		[Sql.Function(Name="pg_catalog.btint84cmp", ServerSideOnly=true)]
		public static int? Btint84cmp(long? par841, int? par842)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8cmp

		[Sql.Function(Name="pg_catalog.btint8cmp", ServerSideOnly=true)]
		public static int? Btint8cmp(long? par844, long? par845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8sortsupport

		[Sql.Function(Name="pg_catalog.btint8sortsupport", ServerSideOnly=true)]
		public static object Btint8sortsupport(object par846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamecmp

		[Sql.Function(Name="pg_catalog.btnamecmp", ServerSideOnly=true)]
		public static int? Btnamecmp(string par848, string par849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamesortsupport

		[Sql.Function(Name="pg_catalog.btnamesortsupport", ServerSideOnly=true)]
		public static object Btnamesortsupport(object par850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidcmp

		[Sql.Function(Name="pg_catalog.btoidcmp", ServerSideOnly=true)]
		public static int? Btoidcmp(int? par852, int? par853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidsortsupport

		[Sql.Function(Name="pg_catalog.btoidsortsupport", ServerSideOnly=true)]
		public static object Btoidsortsupport(object par854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidvectorcmp

		[Sql.Function(Name="pg_catalog.btoidvectorcmp", ServerSideOnly=true)]
		public static int? Btoidvectorcmp(object par856, object par857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordcmp

		[Sql.Function(Name="pg_catalog.btrecordcmp", ServerSideOnly=true)]
		public static int? Btrecordcmp(object par859, object par860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordimagecmp

		[Sql.Function(Name="pg_catalog.btrecordimagecmp", ServerSideOnly=true)]
		public static int? Btrecordimagecmp(object par862, object par863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btreltimecmp

		[Sql.Function(Name="pg_catalog.btreltimecmp", ServerSideOnly=true)]
		public static int? Btreltimecmp(object par865, object par866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrim

		[Sql.Function(Name="pg_catalog.btrim", ServerSideOnly=true)]
		public static string Btrim(string par874)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BttextPatternCmp

		[Sql.Function(Name="pg_catalog.bttext_pattern_cmp", ServerSideOnly=true)]
		public static int? BttextPatternCmp(string par876, string par877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BttextPatternSortsupport

		[Sql.Function(Name="pg_catalog.bttext_pattern_sortsupport", ServerSideOnly=true)]
		public static object BttextPatternSortsupport(object par878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextcmp

		[Sql.Function(Name="pg_catalog.bttextcmp", ServerSideOnly=true)]
		public static int? Bttextcmp(string par880, string par881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextsortsupport

		[Sql.Function(Name="pg_catalog.bttextsortsupport", ServerSideOnly=true)]
		public static object Bttextsortsupport(object par882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttidcmp

		[Sql.Function(Name="pg_catalog.bttidcmp", ServerSideOnly=true)]
		public static int? Bttidcmp(object par884, object par885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttintervalcmp

		[Sql.Function(Name="pg_catalog.bttintervalcmp", ServerSideOnly=true)]
		public static int? Bttintervalcmp(object par887, object par888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaSortsupport

		[Sql.Function(Name="pg_catalog.bytea_sortsupport", ServerSideOnly=true)]
		public static object ByteaSortsupport(object par889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggFinalfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_finalfn", ServerSideOnly=true)]
		public static byte[] ByteaStringAggFinalfn(object par891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggTransfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_transfn", ServerSideOnly=true)]
		public static object ByteaStringAggTransfn(object par893, byte[] par894, byte[] par895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacat

		[Sql.Function(Name="pg_catalog.byteacat", ServerSideOnly=true)]
		public static byte[] Byteacat(byte[] par897, byte[] par898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacmp

		[Sql.Function(Name="pg_catalog.byteacmp", ServerSideOnly=true)]
		public static int? Byteacmp(byte[] par900, byte[] par901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaeq

		[Sql.Function(Name="pg_catalog.byteaeq", ServerSideOnly=true)]
		public static bool? Byteaeq(byte[] par903, byte[] par904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteage

		[Sql.Function(Name="pg_catalog.byteage", ServerSideOnly=true)]
		public static bool? Byteage(byte[] par906, byte[] par907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteagt

		[Sql.Function(Name="pg_catalog.byteagt", ServerSideOnly=true)]
		public static bool? Byteagt(byte[] par909, byte[] par910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteain

		[Sql.Function(Name="pg_catalog.byteain", ServerSideOnly=true)]
		public static byte[] Byteain(object par912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteale

		[Sql.Function(Name="pg_catalog.byteale", ServerSideOnly=true)]
		public static bool? Byteale(byte[] par914, byte[] par915)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealike

		[Sql.Function(Name="pg_catalog.bytealike", ServerSideOnly=true)]
		public static bool? Bytealike(byte[] par917, byte[] par918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealt

		[Sql.Function(Name="pg_catalog.bytealt", ServerSideOnly=true)]
		public static bool? Bytealt(byte[] par920, byte[] par921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteane

		[Sql.Function(Name="pg_catalog.byteane", ServerSideOnly=true)]
		public static bool? Byteane(byte[] par923, byte[] par924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteanlike

		[Sql.Function(Name="pg_catalog.byteanlike", ServerSideOnly=true)]
		public static bool? Byteanlike(byte[] par926, byte[] par927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaout

		[Sql.Function(Name="pg_catalog.byteaout", ServerSideOnly=true)]
		public static object Byteaout(byte[] par929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytearecv

		[Sql.Function(Name="pg_catalog.bytearecv", ServerSideOnly=true)]
		public static byte[] Bytearecv(object par931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteasend

		[Sql.Function(Name="pg_catalog.byteasend", ServerSideOnly=true)]
		public static byte[] Byteasend(byte[] par933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cardinality

		[Sql.Function(Name="pg_catalog.cardinality", ServerSideOnly=true)]
		public static int? Cardinality(object par935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashCmp

		[Sql.Function(Name="pg_catalog.cash_cmp", ServerSideOnly=true)]
		public static int? CashCmp(decimal? par937, decimal? par938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivCash

		[Sql.Function(Name="pg_catalog.cash_div_cash", ServerSideOnly=true)]
		public static double? CashDivCash(decimal? par940, decimal? par941)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt4

		[Sql.Function(Name="pg_catalog.cash_div_flt4", ServerSideOnly=true)]
		public static decimal? CashDivFlt4(decimal? par943, float? par944)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt8

		[Sql.Function(Name="pg_catalog.cash_div_flt8", ServerSideOnly=true)]
		public static decimal? CashDivFlt8(decimal? par946, double? par947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt2

		[Sql.Function(Name="pg_catalog.cash_div_int2", ServerSideOnly=true)]
		public static decimal? CashDivInt2(decimal? par949, short? par950)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt4

		[Sql.Function(Name="pg_catalog.cash_div_int4", ServerSideOnly=true)]
		public static decimal? CashDivInt4(decimal? par952, int? par953)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashEq

		[Sql.Function(Name="pg_catalog.cash_eq", ServerSideOnly=true)]
		public static bool? CashEq(decimal? par955, decimal? par956)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGe

		[Sql.Function(Name="pg_catalog.cash_ge", ServerSideOnly=true)]
		public static bool? CashGe(decimal? par958, decimal? par959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGt

		[Sql.Function(Name="pg_catalog.cash_gt", ServerSideOnly=true)]
		public static bool? CashGt(decimal? par961, decimal? par962)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashIn

		[Sql.Function(Name="pg_catalog.cash_in", ServerSideOnly=true)]
		public static decimal? CashIn(object par964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLe

		[Sql.Function(Name="pg_catalog.cash_le", ServerSideOnly=true)]
		public static bool? CashLe(decimal? par966, decimal? par967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLt

		[Sql.Function(Name="pg_catalog.cash_lt", ServerSideOnly=true)]
		public static bool? CashLt(decimal? par969, decimal? par970)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMi

		[Sql.Function(Name="pg_catalog.cash_mi", ServerSideOnly=true)]
		public static decimal? CashMi(decimal? par972, decimal? par973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt4

		[Sql.Function(Name="pg_catalog.cash_mul_flt4", ServerSideOnly=true)]
		public static decimal? CashMulFlt4(decimal? par975, float? par976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt8

		[Sql.Function(Name="pg_catalog.cash_mul_flt8", ServerSideOnly=true)]
		public static decimal? CashMulFlt8(decimal? par978, double? par979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt2

		[Sql.Function(Name="pg_catalog.cash_mul_int2", ServerSideOnly=true)]
		public static decimal? CashMulInt2(decimal? par981, short? par982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt4

		[Sql.Function(Name="pg_catalog.cash_mul_int4", ServerSideOnly=true)]
		public static decimal? CashMulInt4(decimal? par984, int? par985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashNe

		[Sql.Function(Name="pg_catalog.cash_ne", ServerSideOnly=true)]
		public static bool? CashNe(decimal? par987, decimal? par988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashOut

		[Sql.Function(Name="pg_catalog.cash_out", ServerSideOnly=true)]
		public static object CashOut(decimal? par990)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashPl

		[Sql.Function(Name="pg_catalog.cash_pl", ServerSideOnly=true)]
		public static decimal? CashPl(decimal? par992, decimal? par993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashRecv

		[Sql.Function(Name="pg_catalog.cash_recv", ServerSideOnly=true)]
		public static decimal? CashRecv(object par995)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashSend

		[Sql.Function(Name="pg_catalog.cash_send", ServerSideOnly=true)]
		public static byte[] CashSend(decimal? par997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashWords

		[Sql.Function(Name="pg_catalog.cash_words", ServerSideOnly=true)]
		public static string CashWords(decimal? par999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashlarger

		[Sql.Function(Name="pg_catalog.cashlarger", ServerSideOnly=true)]
		public static decimal? Cashlarger(decimal? par1001, decimal? par1002)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashsmaller

		[Sql.Function(Name="pg_catalog.cashsmaller", ServerSideOnly=true)]
		public static decimal? Cashsmaller(decimal? par1004, decimal? par1005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cbrt

		[Sql.Function(Name="pg_catalog.cbrt", ServerSideOnly=true)]
		public static double? Cbrt(double? par1007)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceil

		[Sql.Function(Name="pg_catalog.ceil", ServerSideOnly=true)]
		public static double? Ceil(double? par1011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceiling

		[Sql.Function(Name="pg_catalog.ceiling", ServerSideOnly=true)]
		public static double? Ceiling(double? par1015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Center

		[Sql.Function(Name="pg_catalog.center", ServerSideOnly=true)]
		public static NpgsqlPoint? Center(NpgsqlCircle? par1019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Char

		[Sql.Function(Name="pg_catalog.char", ServerSideOnly=true)]
		public static object Char(string par1023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharLength

		[Sql.Function(Name="pg_catalog.char_length", ServerSideOnly=true)]
		public static int? CharLength(string par1027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharacterLength

		[Sql.Function(Name="pg_catalog.character_length", ServerSideOnly=true)]
		public static int? CharacterLength(string par1031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chareq

		[Sql.Function(Name="pg_catalog.chareq", ServerSideOnly=true)]
		public static bool? Chareq(object par1033, object par1034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charge

		[Sql.Function(Name="pg_catalog.charge", ServerSideOnly=true)]
		public static bool? Charge(object par1036, object par1037)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chargt

		[Sql.Function(Name="pg_catalog.chargt", ServerSideOnly=true)]
		public static bool? Chargt(object par1039, object par1040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charin

		[Sql.Function(Name="pg_catalog.charin", ServerSideOnly=true)]
		public static object Charin(object par1042)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charle

		[Sql.Function(Name="pg_catalog.charle", ServerSideOnly=true)]
		public static bool? Charle(object par1044, object par1045)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charlt

		[Sql.Function(Name="pg_catalog.charlt", ServerSideOnly=true)]
		public static bool? Charlt(object par1047, object par1048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charne

		[Sql.Function(Name="pg_catalog.charne", ServerSideOnly=true)]
		public static bool? Charne(object par1050, object par1051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charout

		[Sql.Function(Name="pg_catalog.charout", ServerSideOnly=true)]
		public static object Charout(object par1053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charrecv

		[Sql.Function(Name="pg_catalog.charrecv", ServerSideOnly=true)]
		public static object Charrecv(object par1055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charsend

		[Sql.Function(Name="pg_catalog.charsend", ServerSideOnly=true)]
		public static byte[] Charsend(object par1057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chr

		[Sql.Function(Name="pg_catalog.chr", ServerSideOnly=true)]
		public static string Chr(int? par1059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cideq

		[Sql.Function(Name="pg_catalog.cideq", ServerSideOnly=true)]
		public static bool? Cideq(object par1061, object par1062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidin

		[Sql.Function(Name="pg_catalog.cidin", ServerSideOnly=true)]
		public static object Cidin(object par1064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidout

		[Sql.Function(Name="pg_catalog.cidout", ServerSideOnly=true)]
		public static object Cidout(object par1066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidr

		[Sql.Function(Name="pg_catalog.cidr", ServerSideOnly=true)]
		public static NpgsqlInet? Cidr(NpgsqlInet? par1068)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrIn

		[Sql.Function(Name="pg_catalog.cidr_in", ServerSideOnly=true)]
		public static NpgsqlInet? CidrIn(object par1070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrOut

		[Sql.Function(Name="pg_catalog.cidr_out", ServerSideOnly=true)]
		public static object CidrOut(NpgsqlInet? par1072)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrRecv

		[Sql.Function(Name="pg_catalog.cidr_recv", ServerSideOnly=true)]
		public static NpgsqlInet? CidrRecv(object par1074)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrSend

		[Sql.Function(Name="pg_catalog.cidr_send", ServerSideOnly=true)]
		public static byte[] CidrSend(NpgsqlInet? par1076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidrecv

		[Sql.Function(Name="pg_catalog.cidrecv", ServerSideOnly=true)]
		public static object Cidrecv(object par1078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidsend

		[Sql.Function(Name="pg_catalog.cidsend", ServerSideOnly=true)]
		public static byte[] Cidsend(object par1080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Circle

		[Sql.Function(Name="pg_catalog.circle", ServerSideOnly=true)]
		public static NpgsqlCircle? Circle(NpgsqlBox? par1087)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAbove

		[Sql.Function(Name="pg_catalog.circle_above", ServerSideOnly=true)]
		public static bool? CircleAbove(NpgsqlCircle? par1089, NpgsqlCircle? par1090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAddPt

		[Sql.Function(Name="pg_catalog.circle_add_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleAddPt(NpgsqlCircle? par1092, NpgsqlPoint? par1093)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleBelow

		[Sql.Function(Name="pg_catalog.circle_below", ServerSideOnly=true)]
		public static bool? CircleBelow(NpgsqlCircle? par1095, NpgsqlCircle? par1096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleCenter

		[Sql.Function(Name="pg_catalog.circle_center", ServerSideOnly=true)]
		public static NpgsqlPoint? CircleCenter(NpgsqlCircle? par1098)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContain

		[Sql.Function(Name="pg_catalog.circle_contain", ServerSideOnly=true)]
		public static bool? CircleContain(NpgsqlCircle? par1100, NpgsqlCircle? par1101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContainPt

		[Sql.Function(Name="pg_catalog.circle_contain_pt", ServerSideOnly=true)]
		public static bool? CircleContainPt(NpgsqlCircle? par1103, NpgsqlPoint? par1104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContained

		[Sql.Function(Name="pg_catalog.circle_contained", ServerSideOnly=true)]
		public static bool? CircleContained(NpgsqlCircle? par1106, NpgsqlCircle? par1107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDistance

		[Sql.Function(Name="pg_catalog.circle_distance", ServerSideOnly=true)]
		public static double? CircleDistance(NpgsqlCircle? par1109, NpgsqlCircle? par1110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDivPt

		[Sql.Function(Name="pg_catalog.circle_div_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleDivPt(NpgsqlCircle? par1112, NpgsqlPoint? par1113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleEq

		[Sql.Function(Name="pg_catalog.circle_eq", ServerSideOnly=true)]
		public static bool? CircleEq(NpgsqlCircle? par1115, NpgsqlCircle? par1116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGe

		[Sql.Function(Name="pg_catalog.circle_ge", ServerSideOnly=true)]
		public static bool? CircleGe(NpgsqlCircle? par1118, NpgsqlCircle? par1119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGt

		[Sql.Function(Name="pg_catalog.circle_gt", ServerSideOnly=true)]
		public static bool? CircleGt(NpgsqlCircle? par1121, NpgsqlCircle? par1122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleIn

		[Sql.Function(Name="pg_catalog.circle_in", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleIn(object par1124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLe

		[Sql.Function(Name="pg_catalog.circle_le", ServerSideOnly=true)]
		public static bool? CircleLe(NpgsqlCircle? par1126, NpgsqlCircle? par1127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLeft

		[Sql.Function(Name="pg_catalog.circle_left", ServerSideOnly=true)]
		public static bool? CircleLeft(NpgsqlCircle? par1129, NpgsqlCircle? par1130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLt

		[Sql.Function(Name="pg_catalog.circle_lt", ServerSideOnly=true)]
		public static bool? CircleLt(NpgsqlCircle? par1132, NpgsqlCircle? par1133)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleMulPt

		[Sql.Function(Name="pg_catalog.circle_mul_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleMulPt(NpgsqlCircle? par1135, NpgsqlPoint? par1136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleNe

		[Sql.Function(Name="pg_catalog.circle_ne", ServerSideOnly=true)]
		public static bool? CircleNe(NpgsqlCircle? par1138, NpgsqlCircle? par1139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOut

		[Sql.Function(Name="pg_catalog.circle_out", ServerSideOnly=true)]
		public static object CircleOut(NpgsqlCircle? par1141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverabove

		[Sql.Function(Name="pg_catalog.circle_overabove", ServerSideOnly=true)]
		public static bool? CircleOverabove(NpgsqlCircle? par1143, NpgsqlCircle? par1144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverbelow

		[Sql.Function(Name="pg_catalog.circle_overbelow", ServerSideOnly=true)]
		public static bool? CircleOverbelow(NpgsqlCircle? par1146, NpgsqlCircle? par1147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverlap

		[Sql.Function(Name="pg_catalog.circle_overlap", ServerSideOnly=true)]
		public static bool? CircleOverlap(NpgsqlCircle? par1149, NpgsqlCircle? par1150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverleft

		[Sql.Function(Name="pg_catalog.circle_overleft", ServerSideOnly=true)]
		public static bool? CircleOverleft(NpgsqlCircle? par1152, NpgsqlCircle? par1153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverright

		[Sql.Function(Name="pg_catalog.circle_overright", ServerSideOnly=true)]
		public static bool? CircleOverright(NpgsqlCircle? par1155, NpgsqlCircle? par1156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRecv

		[Sql.Function(Name="pg_catalog.circle_recv", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleRecv(object par1158)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRight

		[Sql.Function(Name="pg_catalog.circle_right", ServerSideOnly=true)]
		public static bool? CircleRight(NpgsqlCircle? par1160, NpgsqlCircle? par1161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSame

		[Sql.Function(Name="pg_catalog.circle_same", ServerSideOnly=true)]
		public static bool? CircleSame(NpgsqlCircle? par1163, NpgsqlCircle? par1164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSend

		[Sql.Function(Name="pg_catalog.circle_send", ServerSideOnly=true)]
		public static byte[] CircleSend(NpgsqlCircle? par1166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSubPt

		[Sql.Function(Name="pg_catalog.circle_sub_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleSubPt(NpgsqlCircle? par1168, NpgsqlPoint? par1169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClockTimestamp

		[Sql.Function(Name="pg_catalog.clock_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? ClockTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLb

		[Sql.Function(Name="pg_catalog.close_lb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLb(NpgsqlLine? par1172, NpgsqlBox? par1173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLs

		[Sql.Function(Name="pg_catalog.close_ls", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLs(NpgsqlLine? par1175, NpgsqlLSeg? par1176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLseg

		[Sql.Function(Name="pg_catalog.close_lseg", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLseg(NpgsqlLSeg? par1178, NpgsqlLSeg? par1179)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePb

		[Sql.Function(Name="pg_catalog.close_pb", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePb(NpgsqlPoint? par1181, NpgsqlBox? par1182)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePl

		[Sql.Function(Name="pg_catalog.close_pl", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePl(NpgsqlPoint? par1184, NpgsqlLine? par1185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePs

		[Sql.Function(Name="pg_catalog.close_ps", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePs(NpgsqlPoint? par1187, NpgsqlLSeg? par1188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSb

		[Sql.Function(Name="pg_catalog.close_sb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSb(NpgsqlLSeg? par1190, NpgsqlBox? par1191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSl

		[Sql.Function(Name="pg_catalog.close_sl", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSl(NpgsqlLSeg? par1193, NpgsqlLine? par1194)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ColDescription

		[Sql.Function(Name="pg_catalog.col_description", ServerSideOnly=true)]
		public static string ColDescription(int? par1196, int? par1197)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Concat

		[Sql.Function(Name="pg_catalog.concat", ServerSideOnly=true)]
		public static string Concat(object par1199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConcatWs

		[Sql.Function(Name="pg_catalog.concat_ws", ServerSideOnly=true)]
		public static string ConcatWs(string par1201, object par1202)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contjoinsel

		[Sql.Function(Name="pg_catalog.contjoinsel", ServerSideOnly=true)]
		public static double? Contjoinsel(object par1204, int? par1205, object par1206, short? par1207, object par1208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contsel

		[Sql.Function(Name="pg_catalog.contsel", ServerSideOnly=true)]
		public static double? Contsel(object par1210, int? par1211, object par1212, int? par1213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Convert

		[Sql.Function(Name="pg_catalog.convert", ServerSideOnly=true)]
		public static byte[] Convert(byte[] par1215, string par1216, string par1217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertFrom

		[Sql.Function(Name="pg_catalog.convert_from", ServerSideOnly=true)]
		public static string ConvertFrom(byte[] par1219, string par1220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertTo

		[Sql.Function(Name="pg_catalog.convert_to", ServerSideOnly=true)]
		public static byte[] ConvertTo(string par1222, string par1223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Corr

		[Sql.Function(Name="pg_catalog.corr", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? Corr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1225, Expression<Func<TSource, double?>> par1226)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cos

		[Sql.Function(Name="pg_catalog.cos", ServerSideOnly=true)]
		public static double? Cos(double? par1228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cosd

		[Sql.Function(Name="pg_catalog.cosd", ServerSideOnly=true)]
		public static double? Cosd(double? par1230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cot

		[Sql.Function(Name="pg_catalog.cot", ServerSideOnly=true)]
		public static double? Cot(double? par1232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cotd

		[Sql.Function(Name="pg_catalog.cotd", ServerSideOnly=true)]
		public static double? Cotd(double? par1234)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Count

		[Sql.Function(Name="pg_catalog.count", ServerSideOnly=true, IsAggregate = true)]
		public static long? Count<TSource>(this IEnumerable<TSource> src)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarPop

		[Sql.Function(Name="pg_catalog.covar_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1239, Expression<Func<TSource, double?>> par1240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarSamp

		[Sql.Function(Name="pg_catalog.covar_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1242, Expression<Func<TSource, double?>> par1243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringIn

		[Sql.Function(Name="pg_catalog.cstring_in", ServerSideOnly=true)]
		public static object CstringIn(object par1245)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringOut

		[Sql.Function(Name="pg_catalog.cstring_out", ServerSideOnly=true)]
		public static object CstringOut(object par1247)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringRecv

		[Sql.Function(Name="pg_catalog.cstring_recv", ServerSideOnly=true)]
		public static object CstringRecv(object par1249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringSend

		[Sql.Function(Name="pg_catalog.cstring_send", ServerSideOnly=true)]
		public static byte[] CstringSend(object par1251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDist

		[Sql.Function(Name="pg_catalog.cume_dist", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? CumeDist<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par1254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDistFinal

		[Sql.Function(Name="pg_catalog.cume_dist_final", ServerSideOnly=true)]
		public static double? CumeDistFinal(object par1256, object par1257)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentDatabase

		[Sql.Function(Name="pg_catalog.current_database", ServerSideOnly=true)]
		public static string CurrentDatabase()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentQuery

		[Sql.Function(Name="pg_catalog.current_query", ServerSideOnly=true)]
		public static string CurrentQuery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchema

		[Sql.Function(Name="pg_catalog.current_schema", ServerSideOnly=true)]
		public static string CurrentSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchemas

		[Sql.Function(Name="pg_catalog.current_schemas", ServerSideOnly=true)]
		public static object CurrentSchemas(bool? par1262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSetting

		[Sql.Function(Name="pg_catalog.current_setting", ServerSideOnly=true)]
		public static string CurrentSetting(string par1266, bool? par1267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentUser

		[Sql.Function(Name="pg_catalog.current_user", ServerSideOnly=true)]
		public static string CurrentUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid

		[Sql.Function(Name="pg_catalog.currtid", ServerSideOnly=true)]
		public static object Currtid(int? par1270, object par1271)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid2

		[Sql.Function(Name="pg_catalog.currtid2", ServerSideOnly=true)]
		public static object Currtid2(string par1273, object par1274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currval

		[Sql.Function(Name="pg_catalog.currval", ServerSideOnly=true)]
		public static long? Currval(object par1276)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXml

		[Sql.Function(Name="pg_catalog.cursor_to_xml", ServerSideOnly=true)]
		public static string CursorToXml(object cursor, int? count, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXmlschema

		[Sql.Function(Name="pg_catalog.cursor_to_xmlschema", ServerSideOnly=true)]
		public static string CursorToXmlschema(object cursor, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXml

		[Sql.Function(Name="pg_catalog.database_to_xml", ServerSideOnly=true)]
		public static string DatabaseToXml(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string DatabaseToXmlAndXmlschema(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xmlschema", ServerSideOnly=true)]
		public static string DatabaseToXmlschema(bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Date

		[Sql.Function(Name="pg_catalog.date", ServerSideOnly=true)]
		public static NpgsqlDate? Date(DateTime? par1287)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmp

		[Sql.Function(Name="pg_catalog.date_cmp", ServerSideOnly=true)]
		public static int? DateCmp(NpgsqlDate? par1289, NpgsqlDate? par1290)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamp

		[Sql.Function(Name="pg_catalog.date_cmp_timestamp", ServerSideOnly=true)]
		public static int? DateCmpTimestamp(NpgsqlDate? par1292, DateTime? par1293)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamptz

		[Sql.Function(Name="pg_catalog.date_cmp_timestamptz", ServerSideOnly=true)]
		public static int? DateCmpTimestamptz(NpgsqlDate? par1295, DateTimeOffset? par1296)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEq

		[Sql.Function(Name="pg_catalog.date_eq", ServerSideOnly=true)]
		public static bool? DateEq(NpgsqlDate? par1298, NpgsqlDate? par1299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamp

		[Sql.Function(Name="pg_catalog.date_eq_timestamp", ServerSideOnly=true)]
		public static bool? DateEqTimestamp(NpgsqlDate? par1301, DateTime? par1302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamptz

		[Sql.Function(Name="pg_catalog.date_eq_timestamptz", ServerSideOnly=true)]
		public static bool? DateEqTimestamptz(NpgsqlDate? par1304, DateTimeOffset? par1305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGe

		[Sql.Function(Name="pg_catalog.date_ge", ServerSideOnly=true)]
		public static bool? DateGe(NpgsqlDate? par1307, NpgsqlDate? par1308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamp

		[Sql.Function(Name="pg_catalog.date_ge_timestamp", ServerSideOnly=true)]
		public static bool? DateGeTimestamp(NpgsqlDate? par1310, DateTime? par1311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ge_timestamptz", ServerSideOnly=true)]
		public static bool? DateGeTimestamptz(NpgsqlDate? par1313, DateTimeOffset? par1314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGt

		[Sql.Function(Name="pg_catalog.date_gt", ServerSideOnly=true)]
		public static bool? DateGt(NpgsqlDate? par1316, NpgsqlDate? par1317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamp

		[Sql.Function(Name="pg_catalog.date_gt_timestamp", ServerSideOnly=true)]
		public static bool? DateGtTimestamp(NpgsqlDate? par1319, DateTime? par1320)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamptz

		[Sql.Function(Name="pg_catalog.date_gt_timestamptz", ServerSideOnly=true)]
		public static bool? DateGtTimestamptz(NpgsqlDate? par1322, DateTimeOffset? par1323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateIn

		[Sql.Function(Name="pg_catalog.date_in", ServerSideOnly=true)]
		public static NpgsqlDate? DateIn(object par1325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLarger

		[Sql.Function(Name="pg_catalog.date_larger", ServerSideOnly=true)]
		public static NpgsqlDate? DateLarger(NpgsqlDate? par1327, NpgsqlDate? par1328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLe

		[Sql.Function(Name="pg_catalog.date_le", ServerSideOnly=true)]
		public static bool? DateLe(NpgsqlDate? par1330, NpgsqlDate? par1331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamp

		[Sql.Function(Name="pg_catalog.date_le_timestamp", ServerSideOnly=true)]
		public static bool? DateLeTimestamp(NpgsqlDate? par1333, DateTime? par1334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamptz

		[Sql.Function(Name="pg_catalog.date_le_timestamptz", ServerSideOnly=true)]
		public static bool? DateLeTimestamptz(NpgsqlDate? par1336, DateTimeOffset? par1337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLt

		[Sql.Function(Name="pg_catalog.date_lt", ServerSideOnly=true)]
		public static bool? DateLt(NpgsqlDate? par1339, NpgsqlDate? par1340)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamp

		[Sql.Function(Name="pg_catalog.date_lt_timestamp", ServerSideOnly=true)]
		public static bool? DateLtTimestamp(NpgsqlDate? par1342, DateTime? par1343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamptz

		[Sql.Function(Name="pg_catalog.date_lt_timestamptz", ServerSideOnly=true)]
		public static bool? DateLtTimestamptz(NpgsqlDate? par1345, DateTimeOffset? par1346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMi

		[Sql.Function(Name="pg_catalog.date_mi", ServerSideOnly=true)]
		public static int? DateMi(NpgsqlDate? par1348, NpgsqlDate? par1349)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMiInterval

		[Sql.Function(Name="pg_catalog.date_mi_interval", ServerSideOnly=true)]
		public static DateTime? DateMiInterval(NpgsqlDate? par1351, NpgsqlTimeSpan? par1352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMii

		[Sql.Function(Name="pg_catalog.date_mii", ServerSideOnly=true)]
		public static NpgsqlDate? DateMii(NpgsqlDate? par1354, int? par1355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNe

		[Sql.Function(Name="pg_catalog.date_ne", ServerSideOnly=true)]
		public static bool? DateNe(NpgsqlDate? par1357, NpgsqlDate? par1358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamp

		[Sql.Function(Name="pg_catalog.date_ne_timestamp", ServerSideOnly=true)]
		public static bool? DateNeTimestamp(NpgsqlDate? par1360, DateTime? par1361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ne_timestamptz", ServerSideOnly=true)]
		public static bool? DateNeTimestamptz(NpgsqlDate? par1363, DateTimeOffset? par1364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateOut

		[Sql.Function(Name="pg_catalog.date_out", ServerSideOnly=true)]
		public static object DateOut(NpgsqlDate? par1366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePart

		[Sql.Function(Name="pg_catalog.date_part", ServerSideOnly=true)]
		public static double? DatePart(string par1389, DateTime? par1390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePlInterval

		[Sql.Function(Name="pg_catalog.date_pl_interval", ServerSideOnly=true)]
		public static DateTime? DatePlInterval(NpgsqlDate? par1392, NpgsqlTimeSpan? par1393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePli

		[Sql.Function(Name="pg_catalog.date_pli", ServerSideOnly=true)]
		public static NpgsqlDate? DatePli(NpgsqlDate? par1395, int? par1396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateRecv

		[Sql.Function(Name="pg_catalog.date_recv", ServerSideOnly=true)]
		public static NpgsqlDate? DateRecv(object par1398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSend

		[Sql.Function(Name="pg_catalog.date_send", ServerSideOnly=true)]
		public static byte[] DateSend(NpgsqlDate? par1400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSmaller

		[Sql.Function(Name="pg_catalog.date_smaller", ServerSideOnly=true)]
		public static NpgsqlDate? DateSmaller(NpgsqlDate? par1402, NpgsqlDate? par1403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSortsupport

		[Sql.Function(Name="pg_catalog.date_sortsupport", ServerSideOnly=true)]
		public static object DateSortsupport(object par1404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateTrunc

		[Sql.Function(Name="pg_catalog.date_trunc", ServerSideOnly=true)]
		public static DateTime? DateTrunc(string par1412, DateTime? par1413)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Daterange

		[Sql.Function(Name="pg_catalog.daterange", ServerSideOnly=true)]
		public static object Daterange(NpgsqlDate? par1418, NpgsqlDate? par1419, string par1420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeCanonical

		[Sql.Function(Name="pg_catalog.daterange_canonical", ServerSideOnly=true)]
		public static object DaterangeCanonical(object par1422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeSubdiff

		[Sql.Function(Name="pg_catalog.daterange_subdiff", ServerSideOnly=true)]
		public static double? DaterangeSubdiff(NpgsqlDate? par1424, NpgsqlDate? par1425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimePl

		[Sql.Function(Name="pg_catalog.datetime_pl", ServerSideOnly=true)]
		public static DateTime? DatetimePl(NpgsqlDate? par1427, TimeSpan? par1428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimetzPl

		[Sql.Function(Name="pg_catalog.datetimetz_pl", ServerSideOnly=true)]
		public static DateTimeOffset? DatetimetzPl(NpgsqlDate? par1430, DateTimeOffset? par1431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dcbrt

		[Sql.Function(Name="pg_catalog.dcbrt", ServerSideOnly=true)]
		public static double? Dcbrt(double? par1433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Decode

		[Sql.Function(Name="pg_catalog.decode", ServerSideOnly=true)]
		public static byte[] Decode(string par1435, string par1436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Degrees

		[Sql.Function(Name="pg_catalog.degrees", ServerSideOnly=true)]
		public static double? Degrees(double? par1438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRank

		[Sql.Function(Name="pg_catalog.dense_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? DenseRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par1441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRankFinal

		[Sql.Function(Name="pg_catalog.dense_rank_final", ServerSideOnly=true)]
		public static long? DenseRankFinal(object par1443, object par1444)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dexp

		[Sql.Function(Name="pg_catalog.dexp", ServerSideOnly=true)]
		public static double? Dexp(double? par1446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diagonal

		[Sql.Function(Name="pg_catalog.diagonal", ServerSideOnly=true)]
		public static NpgsqlLSeg? Diagonal(NpgsqlBox? par1448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diameter

		[Sql.Function(Name="pg_catalog.diameter", ServerSideOnly=true)]
		public static double? Diameter(NpgsqlCircle? par1450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellInit

		[Sql.Function(Name="pg_catalog.dispell_init", ServerSideOnly=true)]
		public static object DispellInit(object par1452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellLexize

		[Sql.Function(Name="pg_catalog.dispell_lexize", ServerSideOnly=true)]
		public static object DispellLexize(object par1454, object par1455, object par1456, object par1457)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoint

		[Sql.Function(Name="pg_catalog.dist_cpoint", ServerSideOnly=true)]
		public static double? DistCpoint(NpgsqlCircle? par1459, NpgsqlPoint? par1460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoly

		[Sql.Function(Name="pg_catalog.dist_cpoly", ServerSideOnly=true)]
		public static double? DistCpoly(NpgsqlCircle? par1462, NpgsqlPolygon? par1463)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistLb

		[Sql.Function(Name="pg_catalog.dist_lb", ServerSideOnly=true)]
		public static double? DistLb(NpgsqlLine? par1465, NpgsqlBox? par1466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPb

		[Sql.Function(Name="pg_catalog.dist_pb", ServerSideOnly=true)]
		public static double? DistPb(NpgsqlPoint? par1468, NpgsqlBox? par1469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPc

		[Sql.Function(Name="pg_catalog.dist_pc", ServerSideOnly=true)]
		public static double? DistPc(NpgsqlPoint? par1471, NpgsqlCircle? par1472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPl

		[Sql.Function(Name="pg_catalog.dist_pl", ServerSideOnly=true)]
		public static double? DistPl(NpgsqlPoint? par1474, NpgsqlLine? par1475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPolyp

		[Sql.Function(Name="pg_catalog.dist_polyp", ServerSideOnly=true)]
		public static double? DistPolyp(NpgsqlPolygon? par1477, NpgsqlPoint? par1478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpath

		[Sql.Function(Name="pg_catalog.dist_ppath", ServerSideOnly=true)]
		public static double? DistPpath(NpgsqlPoint? par1480, NpgsqlPath? par1481)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpoly

		[Sql.Function(Name="pg_catalog.dist_ppoly", ServerSideOnly=true)]
		public static double? DistPpoly(NpgsqlPoint? par1483, NpgsqlPolygon? par1484)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPs

		[Sql.Function(Name="pg_catalog.dist_ps", ServerSideOnly=true)]
		public static double? DistPs(NpgsqlPoint? par1486, NpgsqlLSeg? par1487)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSb

		[Sql.Function(Name="pg_catalog.dist_sb", ServerSideOnly=true)]
		public static double? DistSb(NpgsqlLSeg? par1489, NpgsqlBox? par1490)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSl

		[Sql.Function(Name="pg_catalog.dist_sl", ServerSideOnly=true)]
		public static double? DistSl(NpgsqlLSeg? par1492, NpgsqlLine? par1493)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Div

		[Sql.Function(Name="pg_catalog.div", ServerSideOnly=true)]
		public static decimal? Div(decimal? par1495, decimal? par1496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog1

		[Sql.Function(Name="pg_catalog.dlog1", ServerSideOnly=true)]
		public static double? Dlog1(double? par1498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog10

		[Sql.Function(Name="pg_catalog.dlog10", ServerSideOnly=true)]
		public static double? Dlog10(double? par1500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainIn

		[Sql.Function(Name="pg_catalog.domain_in", ServerSideOnly=true)]
		public static object DomainIn(object par1502, int? par1503, int? par1504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainRecv

		[Sql.Function(Name="pg_catalog.domain_recv", ServerSideOnly=true)]
		public static object DomainRecv(object par1506, int? par1507, int? par1508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dpow

		[Sql.Function(Name="pg_catalog.dpow", ServerSideOnly=true)]
		public static double? Dpow(double? par1510, double? par1511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dround

		[Sql.Function(Name="pg_catalog.dround", ServerSideOnly=true)]
		public static double? Dround(double? par1513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleInit

		[Sql.Function(Name="pg_catalog.dsimple_init", ServerSideOnly=true)]
		public static object DsimpleInit(object par1515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleLexize

		[Sql.Function(Name="pg_catalog.dsimple_lexize", ServerSideOnly=true)]
		public static object DsimpleLexize(object par1517, object par1518, object par1519, object par1520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballInit

		[Sql.Function(Name="pg_catalog.dsnowball_init", ServerSideOnly=true)]
		public static object DsnowballInit(object par1522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballLexize

		[Sql.Function(Name="pg_catalog.dsnowball_lexize", ServerSideOnly=true)]
		public static object DsnowballLexize(object par1524, object par1525, object par1526, object par1527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dsqrt

		[Sql.Function(Name="pg_catalog.dsqrt", ServerSideOnly=true)]
		public static double? Dsqrt(double? par1529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymInit

		[Sql.Function(Name="pg_catalog.dsynonym_init", ServerSideOnly=true)]
		public static object DsynonymInit(object par1531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymLexize

		[Sql.Function(Name="pg_catalog.dsynonym_lexize", ServerSideOnly=true)]
		public static object DsynonymLexize(object par1533, object par1534, object par1535, object par1536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dtrunc

		[Sql.Function(Name="pg_catalog.dtrunc", ServerSideOnly=true)]
		public static double? Dtrunc(double? par1538)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ElemContainedByRange

		[Sql.Function(Name="pg_catalog.elem_contained_by_range", ServerSideOnly=true)]
		public static bool? ElemContainedByRange(object par1540, object par1541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Encode

		[Sql.Function(Name="pg_catalog.encode", ServerSideOnly=true)]
		public static string Encode(byte[] par1543, string par1544)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumCmp

		[Sql.Function(Name="pg_catalog.enum_cmp", ServerSideOnly=true)]
		public static int? EnumCmp(object par1546, object par1547)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumEq

		[Sql.Function(Name="pg_catalog.enum_eq", ServerSideOnly=true)]
		public static bool? EnumEq(object par1549, object par1550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumFirst

		[Sql.Function(Name="pg_catalog.enum_first", ServerSideOnly=true)]
		public static object EnumFirst(object par1552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGe

		[Sql.Function(Name="pg_catalog.enum_ge", ServerSideOnly=true)]
		public static bool? EnumGe(object par1554, object par1555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGt

		[Sql.Function(Name="pg_catalog.enum_gt", ServerSideOnly=true)]
		public static bool? EnumGt(object par1557, object par1558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumIn

		[Sql.Function(Name="pg_catalog.enum_in", ServerSideOnly=true)]
		public static object EnumIn(object par1560, int? par1561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLarger

		[Sql.Function(Name="pg_catalog.enum_larger", ServerSideOnly=true)]
		public static object EnumLarger(object par1563, object par1564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLast

		[Sql.Function(Name="pg_catalog.enum_last", ServerSideOnly=true)]
		public static object EnumLast(object par1566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLe

		[Sql.Function(Name="pg_catalog.enum_le", ServerSideOnly=true)]
		public static bool? EnumLe(object par1568, object par1569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLt

		[Sql.Function(Name="pg_catalog.enum_lt", ServerSideOnly=true)]
		public static bool? EnumLt(object par1571, object par1572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumNe

		[Sql.Function(Name="pg_catalog.enum_ne", ServerSideOnly=true)]
		public static bool? EnumNe(object par1574, object par1575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumOut

		[Sql.Function(Name="pg_catalog.enum_out", ServerSideOnly=true)]
		public static object EnumOut(object par1577)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRange

		[Sql.Function(Name="pg_catalog.enum_range", ServerSideOnly=true)]
		public static object EnumRange(object par1582)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRecv

		[Sql.Function(Name="pg_catalog.enum_recv", ServerSideOnly=true)]
		public static object EnumRecv(object par1584, int? par1585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSend

		[Sql.Function(Name="pg_catalog.enum_send", ServerSideOnly=true)]
		public static byte[] EnumSend(object par1587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSmaller

		[Sql.Function(Name="pg_catalog.enum_smaller", ServerSideOnly=true)]
		public static object EnumSmaller(object par1589, object par1590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqjoinsel

		[Sql.Function(Name="pg_catalog.eqjoinsel", ServerSideOnly=true)]
		public static double? Eqjoinsel(object par1592, int? par1593, object par1594, short? par1595, object par1596)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqsel

		[Sql.Function(Name="pg_catalog.eqsel", ServerSideOnly=true)]
		public static double? Eqsel(object par1598, int? par1599, object par1600, int? par1601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToMic

		[Sql.Function(Name="pg_catalog.euc_cn_to_mic", ServerSideOnly=true)]
		public static object EucCnToMic(int? par1602, int? par1603, object par1604, object par1605, int? par1606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToUtf8

		[Sql.Function(Name="pg_catalog.euc_cn_to_utf8", ServerSideOnly=true)]
		public static object EucCnToUtf8(int? par1607, int? par1608, object par1609, object par1610, int? par1611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToShiftJis2004

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_shift_jis_2004", ServerSideOnly=true)]
		public static object EucJis2004ToShiftJis2004(int? par1612, int? par1613, object par1614, object par1615, int? par1616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object EucJis2004ToUtf8(int? par1617, int? par1618, object par1619, object par1620, int? par1621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToMic

		[Sql.Function(Name="pg_catalog.euc_jp_to_mic", ServerSideOnly=true)]
		public static object EucJpToMic(int? par1622, int? par1623, object par1624, object par1625, int? par1626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToSjis

		[Sql.Function(Name="pg_catalog.euc_jp_to_sjis", ServerSideOnly=true)]
		public static object EucJpToSjis(int? par1627, int? par1628, object par1629, object par1630, int? par1631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToUtf8

		[Sql.Function(Name="pg_catalog.euc_jp_to_utf8", ServerSideOnly=true)]
		public static object EucJpToUtf8(int? par1632, int? par1633, object par1634, object par1635, int? par1636)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToMic

		[Sql.Function(Name="pg_catalog.euc_kr_to_mic", ServerSideOnly=true)]
		public static object EucKrToMic(int? par1637, int? par1638, object par1639, object par1640, int? par1641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToUtf8

		[Sql.Function(Name="pg_catalog.euc_kr_to_utf8", ServerSideOnly=true)]
		public static object EucKrToUtf8(int? par1642, int? par1643, object par1644, object par1645, int? par1646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToBig5

		[Sql.Function(Name="pg_catalog.euc_tw_to_big5", ServerSideOnly=true)]
		public static object EucTwToBig5(int? par1647, int? par1648, object par1649, object par1650, int? par1651)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToMic

		[Sql.Function(Name="pg_catalog.euc_tw_to_mic", ServerSideOnly=true)]
		public static object EucTwToMic(int? par1652, int? par1653, object par1654, object par1655, int? par1656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToUtf8

		[Sql.Function(Name="pg_catalog.euc_tw_to_utf8", ServerSideOnly=true)]
		public static object EucTwToUtf8(int? par1657, int? par1658, object par1659, object par1660, int? par1661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerIn

		[Sql.Function(Name="pg_catalog.event_trigger_in", ServerSideOnly=true)]
		public static object EventTriggerIn(object par1663)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerOut

		[Sql.Function(Name="pg_catalog.event_trigger_out", ServerSideOnly=true)]
		public static object EventTriggerOut(object par1665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Every

		[Sql.Function(Name="pg_catalog.every", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? Every<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par1667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Exp

		[Sql.Function(Name="pg_catalog.exp", ServerSideOnly=true)]
		public static decimal? Exp(decimal? par1671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Factorial

		[Sql.Function(Name="pg_catalog.factorial", ServerSideOnly=true)]
		public static decimal? Factorial(long? par1673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Family

		[Sql.Function(Name="pg_catalog.family", ServerSideOnly=true)]
		public static int? Family(NpgsqlInet? par1675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerIn

		[Sql.Function(Name="pg_catalog.fdw_handler_in", ServerSideOnly=true)]
		public static object FdwHandlerIn(object par1677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerOut

		[Sql.Function(Name="pg_catalog.fdw_handler_out", ServerSideOnly=true)]
		public static object FdwHandlerOut(object par1679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FirstValue

		[Sql.Function(Name="pg_catalog.first_value", ServerSideOnly=true)]
		public static object FirstValue(object par1681)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4

		[Sql.Function(Name="pg_catalog.float4", ServerSideOnly=true)]
		public static float? Float4(long? par1691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4Accum

		[Sql.Function(Name="pg_catalog.float4_accum", ServerSideOnly=true)]
		public static object Float4Accum(object par1693, float? par1694)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48div

		[Sql.Function(Name="pg_catalog.float48div", ServerSideOnly=true)]
		public static double? Float48div(float? par1696, double? par1697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48eq

		[Sql.Function(Name="pg_catalog.float48eq", ServerSideOnly=true)]
		public static bool? Float48eq(float? par1699, double? par1700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ge

		[Sql.Function(Name="pg_catalog.float48ge", ServerSideOnly=true)]
		public static bool? Float48ge(float? par1702, double? par1703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48gt

		[Sql.Function(Name="pg_catalog.float48gt", ServerSideOnly=true)]
		public static bool? Float48gt(float? par1705, double? par1706)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48le

		[Sql.Function(Name="pg_catalog.float48le", ServerSideOnly=true)]
		public static bool? Float48le(float? par1708, double? par1709)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48lt

		[Sql.Function(Name="pg_catalog.float48lt", ServerSideOnly=true)]
		public static bool? Float48lt(float? par1711, double? par1712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mi

		[Sql.Function(Name="pg_catalog.float48mi", ServerSideOnly=true)]
		public static double? Float48mi(float? par1714, double? par1715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mul

		[Sql.Function(Name="pg_catalog.float48mul", ServerSideOnly=true)]
		public static double? Float48mul(float? par1717, double? par1718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ne

		[Sql.Function(Name="pg_catalog.float48ne", ServerSideOnly=true)]
		public static bool? Float48ne(float? par1720, double? par1721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48pl

		[Sql.Function(Name="pg_catalog.float48pl", ServerSideOnly=true)]
		public static double? Float48pl(float? par1723, double? par1724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4abs

		[Sql.Function(Name="pg_catalog.float4abs", ServerSideOnly=true)]
		public static float? Float4abs(float? par1726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4div

		[Sql.Function(Name="pg_catalog.float4div", ServerSideOnly=true)]
		public static float? Float4div(float? par1728, float? par1729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4eq

		[Sql.Function(Name="pg_catalog.float4eq", ServerSideOnly=true)]
		public static bool? Float4eq(float? par1731, float? par1732)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ge

		[Sql.Function(Name="pg_catalog.float4ge", ServerSideOnly=true)]
		public static bool? Float4ge(float? par1734, float? par1735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4gt

		[Sql.Function(Name="pg_catalog.float4gt", ServerSideOnly=true)]
		public static bool? Float4gt(float? par1737, float? par1738)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4in

		[Sql.Function(Name="pg_catalog.float4in", ServerSideOnly=true)]
		public static float? Float4in(object par1740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4larger

		[Sql.Function(Name="pg_catalog.float4larger", ServerSideOnly=true)]
		public static float? Float4larger(float? par1742, float? par1743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4le

		[Sql.Function(Name="pg_catalog.float4le", ServerSideOnly=true)]
		public static bool? Float4le(float? par1745, float? par1746)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4lt

		[Sql.Function(Name="pg_catalog.float4lt", ServerSideOnly=true)]
		public static bool? Float4lt(float? par1748, float? par1749)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mi

		[Sql.Function(Name="pg_catalog.float4mi", ServerSideOnly=true)]
		public static float? Float4mi(float? par1751, float? par1752)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mul

		[Sql.Function(Name="pg_catalog.float4mul", ServerSideOnly=true)]
		public static float? Float4mul(float? par1754, float? par1755)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ne

		[Sql.Function(Name="pg_catalog.float4ne", ServerSideOnly=true)]
		public static bool? Float4ne(float? par1757, float? par1758)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4out

		[Sql.Function(Name="pg_catalog.float4out", ServerSideOnly=true)]
		public static object Float4out(float? par1760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4pl

		[Sql.Function(Name="pg_catalog.float4pl", ServerSideOnly=true)]
		public static float? Float4pl(float? par1762, float? par1763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4recv

		[Sql.Function(Name="pg_catalog.float4recv", ServerSideOnly=true)]
		public static float? Float4recv(object par1765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4send

		[Sql.Function(Name="pg_catalog.float4send", ServerSideOnly=true)]
		public static byte[] Float4send(float? par1767)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4smaller

		[Sql.Function(Name="pg_catalog.float4smaller", ServerSideOnly=true)]
		public static float? Float4smaller(float? par1769, float? par1770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4um

		[Sql.Function(Name="pg_catalog.float4um", ServerSideOnly=true)]
		public static float? Float4um(float? par1772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4up

		[Sql.Function(Name="pg_catalog.float4up", ServerSideOnly=true)]
		public static float? Float4up(float? par1774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8

		[Sql.Function(Name="pg_catalog.float8", ServerSideOnly=true)]
		public static double? Float8(long? par1784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Accum

		[Sql.Function(Name="pg_catalog.float8_accum", ServerSideOnly=true)]
		public static object Float8Accum(object par1786, double? par1787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Avg

		[Sql.Function(Name="pg_catalog.float8_avg", ServerSideOnly=true)]
		public static double? Float8Avg(object par1789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Combine

		[Sql.Function(Name="pg_catalog.float8_combine", ServerSideOnly=true)]
		public static object Float8Combine(object par1791, object par1792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Corr

		[Sql.Function(Name="pg_catalog.float8_corr", ServerSideOnly=true)]
		public static double? Float8Corr(object par1794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarPop

		[Sql.Function(Name="pg_catalog.float8_covar_pop", ServerSideOnly=true)]
		public static double? Float8CovarPop(object par1796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarSamp

		[Sql.Function(Name="pg_catalog.float8_covar_samp", ServerSideOnly=true)]
		public static double? Float8CovarSamp(object par1798)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAccum

		[Sql.Function(Name="pg_catalog.float8_regr_accum", ServerSideOnly=true)]
		public static object Float8RegrAccum(object par1800, double? par1801, double? par1802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgx

		[Sql.Function(Name="pg_catalog.float8_regr_avgx", ServerSideOnly=true)]
		public static double? Float8RegrAvgx(object par1804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgy

		[Sql.Function(Name="pg_catalog.float8_regr_avgy", ServerSideOnly=true)]
		public static double? Float8RegrAvgy(object par1806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrCombine

		[Sql.Function(Name="pg_catalog.float8_regr_combine", ServerSideOnly=true)]
		public static object Float8RegrCombine(object par1808, object par1809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrIntercept

		[Sql.Function(Name="pg_catalog.float8_regr_intercept", ServerSideOnly=true)]
		public static double? Float8RegrIntercept(object par1811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrR2

		[Sql.Function(Name="pg_catalog.float8_regr_r2", ServerSideOnly=true)]
		public static double? Float8RegrR2(object par1813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSlope

		[Sql.Function(Name="pg_catalog.float8_regr_slope", ServerSideOnly=true)]
		public static double? Float8RegrSlope(object par1815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxx

		[Sql.Function(Name="pg_catalog.float8_regr_sxx", ServerSideOnly=true)]
		public static double? Float8RegrSxx(object par1817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxy

		[Sql.Function(Name="pg_catalog.float8_regr_sxy", ServerSideOnly=true)]
		public static double? Float8RegrSxy(object par1819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSyy

		[Sql.Function(Name="pg_catalog.float8_regr_syy", ServerSideOnly=true)]
		public static double? Float8RegrSyy(object par1821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevPop

		[Sql.Function(Name="pg_catalog.float8_stddev_pop", ServerSideOnly=true)]
		public static double? Float8StddevPop(object par1823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevSamp

		[Sql.Function(Name="pg_catalog.float8_stddev_samp", ServerSideOnly=true)]
		public static double? Float8StddevSamp(object par1825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarPop

		[Sql.Function(Name="pg_catalog.float8_var_pop", ServerSideOnly=true)]
		public static double? Float8VarPop(object par1827)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarSamp

		[Sql.Function(Name="pg_catalog.float8_var_samp", ServerSideOnly=true)]
		public static double? Float8VarSamp(object par1829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84div

		[Sql.Function(Name="pg_catalog.float84div", ServerSideOnly=true)]
		public static double? Float84div(double? par1831, float? par1832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84eq

		[Sql.Function(Name="pg_catalog.float84eq", ServerSideOnly=true)]
		public static bool? Float84eq(double? par1834, float? par1835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ge

		[Sql.Function(Name="pg_catalog.float84ge", ServerSideOnly=true)]
		public static bool? Float84ge(double? par1837, float? par1838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84gt

		[Sql.Function(Name="pg_catalog.float84gt", ServerSideOnly=true)]
		public static bool? Float84gt(double? par1840, float? par1841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84le

		[Sql.Function(Name="pg_catalog.float84le", ServerSideOnly=true)]
		public static bool? Float84le(double? par1843, float? par1844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84lt

		[Sql.Function(Name="pg_catalog.float84lt", ServerSideOnly=true)]
		public static bool? Float84lt(double? par1846, float? par1847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mi

		[Sql.Function(Name="pg_catalog.float84mi", ServerSideOnly=true)]
		public static double? Float84mi(double? par1849, float? par1850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mul

		[Sql.Function(Name="pg_catalog.float84mul", ServerSideOnly=true)]
		public static double? Float84mul(double? par1852, float? par1853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ne

		[Sql.Function(Name="pg_catalog.float84ne", ServerSideOnly=true)]
		public static bool? Float84ne(double? par1855, float? par1856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84pl

		[Sql.Function(Name="pg_catalog.float84pl", ServerSideOnly=true)]
		public static double? Float84pl(double? par1858, float? par1859)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8abs

		[Sql.Function(Name="pg_catalog.float8abs", ServerSideOnly=true)]
		public static double? Float8abs(double? par1861)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8div

		[Sql.Function(Name="pg_catalog.float8div", ServerSideOnly=true)]
		public static double? Float8div(double? par1863, double? par1864)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8eq

		[Sql.Function(Name="pg_catalog.float8eq", ServerSideOnly=true)]
		public static bool? Float8eq(double? par1866, double? par1867)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ge

		[Sql.Function(Name="pg_catalog.float8ge", ServerSideOnly=true)]
		public static bool? Float8ge(double? par1869, double? par1870)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8gt

		[Sql.Function(Name="pg_catalog.float8gt", ServerSideOnly=true)]
		public static bool? Float8gt(double? par1872, double? par1873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8in

		[Sql.Function(Name="pg_catalog.float8in", ServerSideOnly=true)]
		public static double? Float8in(object par1875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8larger

		[Sql.Function(Name="pg_catalog.float8larger", ServerSideOnly=true)]
		public static double? Float8larger(double? par1877, double? par1878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8le

		[Sql.Function(Name="pg_catalog.float8le", ServerSideOnly=true)]
		public static bool? Float8le(double? par1880, double? par1881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8lt

		[Sql.Function(Name="pg_catalog.float8lt", ServerSideOnly=true)]
		public static bool? Float8lt(double? par1883, double? par1884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mi

		[Sql.Function(Name="pg_catalog.float8mi", ServerSideOnly=true)]
		public static double? Float8mi(double? par1886, double? par1887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mul

		[Sql.Function(Name="pg_catalog.float8mul", ServerSideOnly=true)]
		public static double? Float8mul(double? par1889, double? par1890)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ne

		[Sql.Function(Name="pg_catalog.float8ne", ServerSideOnly=true)]
		public static bool? Float8ne(double? par1892, double? par1893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8out

		[Sql.Function(Name="pg_catalog.float8out", ServerSideOnly=true)]
		public static object Float8out(double? par1895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8pl

		[Sql.Function(Name="pg_catalog.float8pl", ServerSideOnly=true)]
		public static double? Float8pl(double? par1897, double? par1898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8recv

		[Sql.Function(Name="pg_catalog.float8recv", ServerSideOnly=true)]
		public static double? Float8recv(object par1900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8send

		[Sql.Function(Name="pg_catalog.float8send", ServerSideOnly=true)]
		public static byte[] Float8send(double? par1902)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8smaller

		[Sql.Function(Name="pg_catalog.float8smaller", ServerSideOnly=true)]
		public static double? Float8smaller(double? par1904, double? par1905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8um

		[Sql.Function(Name="pg_catalog.float8um", ServerSideOnly=true)]
		public static double? Float8um(double? par1907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8up

		[Sql.Function(Name="pg_catalog.float8up", ServerSideOnly=true)]
		public static double? Float8up(double? par1909)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Floor

		[Sql.Function(Name="pg_catalog.floor", ServerSideOnly=true)]
		public static double? Floor(double? par1913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt4MulCash

		[Sql.Function(Name="pg_catalog.flt4_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt4MulCash(float? par1915, decimal? par1916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt8MulCash

		[Sql.Function(Name="pg_catalog.flt8_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt8MulCash(double? par1918, decimal? par1919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrCValidator

		[Sql.Function(Name="pg_catalog.fmgr_c_validator", ServerSideOnly=true)]
		public static object FmgrCValidator(int? par1920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrInternalValidator

		[Sql.Function(Name="pg_catalog.fmgr_internal_validator", ServerSideOnly=true)]
		public static object FmgrInternalValidator(int? par1921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrSqlValidator

		[Sql.Function(Name="pg_catalog.fmgr_sql_validator", ServerSideOnly=true)]
		public static object FmgrSqlValidator(int? par1922)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Format

		[Sql.Function(Name="pg_catalog.format", ServerSideOnly=true)]
		public static string Format(string par1927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FormatType

		[Sql.Function(Name="pg_catalog.format_type", ServerSideOnly=true)]
		public static string FormatType(int? par1929, int? par1930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gb18030ToUtf8

		[Sql.Function(Name="pg_catalog.gb18030_to_utf8", ServerSideOnly=true)]
		public static object Gb18030ToUtf8(int? par1931, int? par1932, object par1933, object par1934, int? par1935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GbkToUtf8

		[Sql.Function(Name="pg_catalog.gbk_to_utf8", ServerSideOnly=true)]
		public static object GbkToUtf8(int? par1936, int? par1937, object par1938, object par1939, int? par1940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetBit

		[Sql.Function(Name="pg_catalog.get_bit", ServerSideOnly=true)]
		public static int? GetBit(byte[] par1971, int? par1972)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetByte

		[Sql.Function(Name="pg_catalog.get_byte", ServerSideOnly=true)]
		public static int? GetByte(byte[] par1974, int? par1975)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetCurrentTsConfig

		[Sql.Function(Name="pg_catalog.get_current_ts_config", ServerSideOnly=true)]
		public static object GetCurrentTsConfig()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getdatabaseencoding

		[Sql.Function(Name="pg_catalog.getdatabaseencoding", ServerSideOnly=true)]
		public static string Getdatabaseencoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getpgusername

		[Sql.Function(Name="pg_catalog.getpgusername", ServerSideOnly=true)]
		public static string Getpgusername()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCleanPendingList

		[Sql.Function(Name="pg_catalog.gin_clean_pending_list", ServerSideOnly=true)]
		public static long? GinCleanPendingList(object par1980)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpPrefix

		[Sql.Function(Name="pg_catalog.gin_cmp_prefix", ServerSideOnly=true)]
		public static int? GinCmpPrefix(string par1982, string par1983, short? par1984, object par1985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpTslexeme

		[Sql.Function(Name="pg_catalog.gin_cmp_tslexeme", ServerSideOnly=true)]
		public static int? GinCmpTslexeme(string par1987, string par1988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCompareJsonb

		[Sql.Function(Name="pg_catalog.gin_compare_jsonb", ServerSideOnly=true)]
		public static int? GinCompareJsonb(string par1990, string par1991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb", ServerSideOnly=true)]
		public static bool? GinConsistentJsonb(object par1993, short? par1994, string par1995, int? par1996, object par1997, object par1998, object par1999, object par2000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb_path", ServerSideOnly=true)]
		public static bool? GinConsistentJsonbPath(object par2002, short? par2003, string par2004, int? par2005, object par2006, object par2007, object par2008, object par2009)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonb

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb", ServerSideOnly=true)]
		public static object GinExtractJsonb(string par2011, object par2012, object par2013)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_path", ServerSideOnly=true)]
		public static object GinExtractJsonbPath(string par2015, object par2016, object par2017)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQuery

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query", ServerSideOnly=true)]
		public static object GinExtractJsonbQuery(string par2019, object par2020, short? par2021, object par2022, object par2023, object par2024, object par2025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQueryPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query_path", ServerSideOnly=true)]
		public static object GinExtractJsonbQueryPath(string par2027, object par2028, short? par2029, object par2030, object par2031, object par2032, object par2033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsquery

		[Sql.Function(Name="pg_catalog.gin_extract_tsquery", ServerSideOnly=true)]
		public static object GinExtractTsquery(object par2049, object par2050, short? par2051, object par2052, object par2053, object par2054, object par2055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsvector

		[Sql.Function(Name="pg_catalog.gin_extract_tsvector", ServerSideOnly=true)]
		public static object GinExtractTsvector(object par2060, object par2061, object par2062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb", ServerSideOnly=true)]
		public static object GinTriconsistentJsonb(object par2064, short? par2065, string par2066, int? par2067, object par2068, object par2069, object par2070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb_path", ServerSideOnly=true)]
		public static object GinTriconsistentJsonbPath(object par2072, short? par2073, string par2074, int? par2075, object par2076, object par2077, object par2078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryConsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_consistent", ServerSideOnly=true)]
		public static bool? GinTsqueryConsistent(object par2096, short? par2097, object par2098, int? par2099, object par2100, object par2101, object par2102, object par2103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryTriconsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_triconsistent", ServerSideOnly=true)]
		public static object GinTsqueryTriconsistent(object par2105, short? par2106, object par2107, int? par2108, object par2109, object par2110, object par2111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayconsistent

		[Sql.Function(Name="pg_catalog.ginarrayconsistent", ServerSideOnly=true)]
		public static bool? Ginarrayconsistent(object par2113, short? par2114, object par2115, int? par2116, object par2117, object par2118, object par2119, object par2120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayextract

		[Sql.Function(Name="pg_catalog.ginarrayextract", ServerSideOnly=true)]
		public static object Ginarrayextract(object par2126, object par2127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarraytriconsistent

		[Sql.Function(Name="pg_catalog.ginarraytriconsistent", ServerSideOnly=true)]
		public static object Ginarraytriconsistent(object par2129, short? par2130, object par2131, int? par2132, object par2133, object par2134, object par2135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginhandler

		[Sql.Function(Name="pg_catalog.ginhandler", ServerSideOnly=true)]
		public static object Ginhandler(object par2137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginqueryarrayextract

		[Sql.Function(Name="pg_catalog.ginqueryarrayextract", ServerSideOnly=true)]
		public static object Ginqueryarrayextract(object par2139, object par2140, short? par2141, object par2142, object par2143, object par2144, object par2145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxCompress

		[Sql.Function(Name="pg_catalog.gist_box_compress", ServerSideOnly=true)]
		public static object GistBoxCompress(object par2147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxConsistent

		[Sql.Function(Name="pg_catalog.gist_box_consistent", ServerSideOnly=true)]
		public static bool? GistBoxConsistent(object par2149, NpgsqlBox? par2150, short? par2151, int? par2152, object par2153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxDecompress

		[Sql.Function(Name="pg_catalog.gist_box_decompress", ServerSideOnly=true)]
		public static object GistBoxDecompress(object par2155)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxFetch

		[Sql.Function(Name="pg_catalog.gist_box_fetch", ServerSideOnly=true)]
		public static object GistBoxFetch(object par2157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPenalty

		[Sql.Function(Name="pg_catalog.gist_box_penalty", ServerSideOnly=true)]
		public static object GistBoxPenalty(object par2159, object par2160, object par2161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPicksplit

		[Sql.Function(Name="pg_catalog.gist_box_picksplit", ServerSideOnly=true)]
		public static object GistBoxPicksplit(object par2163, object par2164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxSame

		[Sql.Function(Name="pg_catalog.gist_box_same", ServerSideOnly=true)]
		public static object GistBoxSame(NpgsqlBox? par2166, NpgsqlBox? par2167, object par2168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxUnion

		[Sql.Function(Name="pg_catalog.gist_box_union", ServerSideOnly=true)]
		public static NpgsqlBox? GistBoxUnion(object par2170, object par2171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleCompress

		[Sql.Function(Name="pg_catalog.gist_circle_compress", ServerSideOnly=true)]
		public static object GistCircleCompress(object par2173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleConsistent

		[Sql.Function(Name="pg_catalog.gist_circle_consistent", ServerSideOnly=true)]
		public static bool? GistCircleConsistent(object par2175, NpgsqlCircle? par2176, short? par2177, int? par2178, object par2179)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleDistance

		[Sql.Function(Name="pg_catalog.gist_circle_distance", ServerSideOnly=true)]
		public static double? GistCircleDistance(object par2181, NpgsqlCircle? par2182, short? par2183, int? par2184, object par2185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointCompress

		[Sql.Function(Name="pg_catalog.gist_point_compress", ServerSideOnly=true)]
		public static object GistPointCompress(object par2187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointConsistent

		[Sql.Function(Name="pg_catalog.gist_point_consistent", ServerSideOnly=true)]
		public static bool? GistPointConsistent(object par2189, NpgsqlPoint? par2190, short? par2191, int? par2192, object par2193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointDistance

		[Sql.Function(Name="pg_catalog.gist_point_distance", ServerSideOnly=true)]
		public static double? GistPointDistance(object par2195, NpgsqlPoint? par2196, short? par2197, int? par2198, object par2199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointFetch

		[Sql.Function(Name="pg_catalog.gist_point_fetch", ServerSideOnly=true)]
		public static object GistPointFetch(object par2201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyCompress

		[Sql.Function(Name="pg_catalog.gist_poly_compress", ServerSideOnly=true)]
		public static object GistPolyCompress(object par2203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyConsistent

		[Sql.Function(Name="pg_catalog.gist_poly_consistent", ServerSideOnly=true)]
		public static bool? GistPolyConsistent(object par2205, NpgsqlPolygon? par2206, short? par2207, int? par2208, object par2209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyDistance

		[Sql.Function(Name="pg_catalog.gist_poly_distance", ServerSideOnly=true)]
		public static double? GistPolyDistance(object par2211, NpgsqlPolygon? par2212, short? par2213, int? par2214, object par2215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gisthandler

		[Sql.Function(Name="pg_catalog.gisthandler", ServerSideOnly=true)]
		public static object Gisthandler(object par2217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryCompress

		[Sql.Function(Name="pg_catalog.gtsquery_compress", ServerSideOnly=true)]
		public static object GtsqueryCompress(object par2219)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryConsistent

		[Sql.Function(Name="pg_catalog.gtsquery_consistent", ServerSideOnly=true)]
		public static bool? GtsqueryConsistent(object par2227, object par2228, int? par2229, int? par2230, object par2231)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryDecompress

		[Sql.Function(Name="pg_catalog.gtsquery_decompress", ServerSideOnly=true)]
		public static object GtsqueryDecompress(object par2233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPenalty

		[Sql.Function(Name="pg_catalog.gtsquery_penalty", ServerSideOnly=true)]
		public static object GtsqueryPenalty(object par2235, object par2236, object par2237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPicksplit

		[Sql.Function(Name="pg_catalog.gtsquery_picksplit", ServerSideOnly=true)]
		public static object GtsqueryPicksplit(object par2239, object par2240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsquerySame

		[Sql.Function(Name="pg_catalog.gtsquery_same", ServerSideOnly=true)]
		public static object GtsquerySame(long? par2242, long? par2243, object par2244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryUnion

		[Sql.Function(Name="pg_catalog.gtsquery_union", ServerSideOnly=true)]
		public static long? GtsqueryUnion(object par2246, object par2247)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorCompress

		[Sql.Function(Name="pg_catalog.gtsvector_compress", ServerSideOnly=true)]
		public static object GtsvectorCompress(object par2249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorConsistent

		[Sql.Function(Name="pg_catalog.gtsvector_consistent", ServerSideOnly=true)]
		public static bool? GtsvectorConsistent(object par2257, object par2258, int? par2259, int? par2260, object par2261)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorDecompress

		[Sql.Function(Name="pg_catalog.gtsvector_decompress", ServerSideOnly=true)]
		public static object GtsvectorDecompress(object par2263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPenalty

		[Sql.Function(Name="pg_catalog.gtsvector_penalty", ServerSideOnly=true)]
		public static object GtsvectorPenalty(object par2265, object par2266, object par2267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPicksplit

		[Sql.Function(Name="pg_catalog.gtsvector_picksplit", ServerSideOnly=true)]
		public static object GtsvectorPicksplit(object par2269, object par2270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorSame

		[Sql.Function(Name="pg_catalog.gtsvector_same", ServerSideOnly=true)]
		public static object GtsvectorSame(object par2272, object par2273, object par2274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorUnion

		[Sql.Function(Name="pg_catalog.gtsvector_union", ServerSideOnly=true)]
		public static object GtsvectorUnion(object par2276, object par2277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorin

		[Sql.Function(Name="pg_catalog.gtsvectorin", ServerSideOnly=true)]
		public static object Gtsvectorin(object par2279)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorout

		[Sql.Function(Name="pg_catalog.gtsvectorout", ServerSideOnly=true)]
		public static object Gtsvectorout(object par2281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasAnyColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_any_column_privilege", ServerSideOnly=true)]
		public static bool? HasAnyColumnPrivilege(int? par2302, string par2303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_column_privilege", ServerSideOnly=true)]
		public static bool? HasColumnPrivilege(int? par2357, short? par2358, string par2359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasDatabasePrivilege

		[Sql.Function(Name="pg_catalog.has_database_privilege", ServerSideOnly=true)]
		public static bool? HasDatabasePrivilege(int? par2380, string par2381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasForeignDataWrapperPrivilege

		[Sql.Function(Name="pg_catalog.has_foreign_data_wrapper_privilege", ServerSideOnly=true)]
		public static bool? HasForeignDataWrapperPrivilege(int? par2402, string par2403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasFunctionPrivilege

		[Sql.Function(Name="pg_catalog.has_function_privilege", ServerSideOnly=true)]
		public static bool? HasFunctionPrivilege(int? par2424, string par2425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasLanguagePrivilege

		[Sql.Function(Name="pg_catalog.has_language_privilege", ServerSideOnly=true)]
		public static bool? HasLanguagePrivilege(int? par2446, string par2447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSchemaPrivilege

		[Sql.Function(Name="pg_catalog.has_schema_privilege", ServerSideOnly=true)]
		public static bool? HasSchemaPrivilege(int? par2468, string par2469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSequencePrivilege

		[Sql.Function(Name="pg_catalog.has_sequence_privilege", ServerSideOnly=true)]
		public static bool? HasSequencePrivilege(int? par2490, string par2491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasServerPrivilege

		[Sql.Function(Name="pg_catalog.has_server_privilege", ServerSideOnly=true)]
		public static bool? HasServerPrivilege(int? par2512, string par2513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablePrivilege

		[Sql.Function(Name="pg_catalog.has_table_privilege", ServerSideOnly=true)]
		public static bool? HasTablePrivilege(int? par2534, string par2535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablespacePrivilege

		[Sql.Function(Name="pg_catalog.has_tablespace_privilege", ServerSideOnly=true)]
		public static bool? HasTablespacePrivilege(int? par2556, string par2557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTypePrivilege

		[Sql.Function(Name="pg_catalog.has_type_privilege", ServerSideOnly=true)]
		public static bool? HasTypePrivilege(int? par2578, string par2579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashAclitem

		[Sql.Function(Name="pg_catalog.hash_aclitem", ServerSideOnly=true)]
		public static int? HashAclitem(object par2581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashArray

		[Sql.Function(Name="pg_catalog.hash_array", ServerSideOnly=true)]
		public static int? HashArray(object par2583)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashNumeric

		[Sql.Function(Name="pg_catalog.hash_numeric", ServerSideOnly=true)]
		public static int? HashNumeric(decimal? par2585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashRange

		[Sql.Function(Name="pg_catalog.hash_range", ServerSideOnly=true)]
		public static int? HashRange(object par2587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbpchar

		[Sql.Function(Name="pg_catalog.hashbpchar", ServerSideOnly=true)]
		public static int? Hashbpchar(string par2589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashchar

		[Sql.Function(Name="pg_catalog.hashchar", ServerSideOnly=true)]
		public static int? Hashchar(object par2591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashenum

		[Sql.Function(Name="pg_catalog.hashenum", ServerSideOnly=true)]
		public static int? Hashenum(object par2593)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat4

		[Sql.Function(Name="pg_catalog.hashfloat4", ServerSideOnly=true)]
		public static int? Hashfloat4(float? par2595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat8

		[Sql.Function(Name="pg_catalog.hashfloat8", ServerSideOnly=true)]
		public static int? Hashfloat8(double? par2597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashhandler

		[Sql.Function(Name="pg_catalog.hashhandler", ServerSideOnly=true)]
		public static object Hashhandler(object par2599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashinet

		[Sql.Function(Name="pg_catalog.hashinet", ServerSideOnly=true)]
		public static int? Hashinet(NpgsqlInet? par2601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2

		[Sql.Function(Name="pg_catalog.hashint2", ServerSideOnly=true)]
		public static int? Hashint2(short? par2603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2vector

		[Sql.Function(Name="pg_catalog.hashint2vector", ServerSideOnly=true)]
		public static int? Hashint2vector(object par2605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint4

		[Sql.Function(Name="pg_catalog.hashint4", ServerSideOnly=true)]
		public static int? Hashint4(int? par2607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint8

		[Sql.Function(Name="pg_catalog.hashint8", ServerSideOnly=true)]
		public static int? Hashint8(long? par2609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddr

		[Sql.Function(Name="pg_catalog.hashmacaddr", ServerSideOnly=true)]
		public static int? Hashmacaddr(PhysicalAddress par2611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashname

		[Sql.Function(Name="pg_catalog.hashname", ServerSideOnly=true)]
		public static int? Hashname(string par2613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoid

		[Sql.Function(Name="pg_catalog.hashoid", ServerSideOnly=true)]
		public static int? Hashoid(int? par2615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoidvector

		[Sql.Function(Name="pg_catalog.hashoidvector", ServerSideOnly=true)]
		public static int? Hashoidvector(object par2617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtext

		[Sql.Function(Name="pg_catalog.hashtext", ServerSideOnly=true)]
		public static int? Hashtext(string par2619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashvarlena

		[Sql.Function(Name="pg_catalog.hashvarlena", ServerSideOnly=true)]
		public static int? Hashvarlena(object par2621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Height

		[Sql.Function(Name="pg_catalog.height", ServerSideOnly=true)]
		public static double? Height(NpgsqlBox? par2623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Host

		[Sql.Function(Name="pg_catalog.host", ServerSideOnly=true)]
		public static string Host(NpgsqlInet? par2625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hostmask

		[Sql.Function(Name="pg_catalog.hostmask", ServerSideOnly=true)]
		public static NpgsqlInet? Hostmask(NpgsqlInet? par2627)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikejoinsel

		[Sql.Function(Name="pg_catalog.iclikejoinsel", ServerSideOnly=true)]
		public static double? Iclikejoinsel(object par2629, int? par2630, object par2631, short? par2632, object par2633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikesel

		[Sql.Function(Name="pg_catalog.iclikesel", ServerSideOnly=true)]
		public static double? Iclikesel(object par2635, int? par2636, object par2637, int? par2638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikejoinsel

		[Sql.Function(Name="pg_catalog.icnlikejoinsel", ServerSideOnly=true)]
		public static double? Icnlikejoinsel(object par2640, int? par2641, object par2642, short? par2643, object par2644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikesel

		[Sql.Function(Name="pg_catalog.icnlikesel", ServerSideOnly=true)]
		public static double? Icnlikesel(object par2646, int? par2647, object par2648, int? par2649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqjoinsel

		[Sql.Function(Name="pg_catalog.icregexeqjoinsel", ServerSideOnly=true)]
		public static double? Icregexeqjoinsel(object par2651, int? par2652, object par2653, short? par2654, object par2655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqsel

		[Sql.Function(Name="pg_catalog.icregexeqsel", ServerSideOnly=true)]
		public static double? Icregexeqsel(object par2657, int? par2658, object par2659, int? par2660)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnejoinsel

		[Sql.Function(Name="pg_catalog.icregexnejoinsel", ServerSideOnly=true)]
		public static double? Icregexnejoinsel(object par2662, int? par2663, object par2664, short? par2665, object par2666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnesel

		[Sql.Function(Name="pg_catalog.icregexnesel", ServerSideOnly=true)]
		public static double? Icregexnesel(object par2668, int? par2669, object par2670, int? par2671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IndexAmHandlerIn

		[Sql.Function(Name="pg_catalog.index_am_handler_in", ServerSideOnly=true)]
		public static object IndexAmHandlerIn(object par2673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IndexAmHandlerOut

		[Sql.Function(Name="pg_catalog.index_am_handler_out", ServerSideOnly=true)]
		public static object IndexAmHandlerOut(object par2675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientAddr

		[Sql.Function(Name="pg_catalog.inet_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetClientAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientPort

		[Sql.Function(Name="pg_catalog.inet_client_port", ServerSideOnly=true)]
		public static int? InetClientPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistCompress

		[Sql.Function(Name="pg_catalog.inet_gist_compress", ServerSideOnly=true)]
		public static object InetGistCompress(object par2679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistConsistent

		[Sql.Function(Name="pg_catalog.inet_gist_consistent", ServerSideOnly=true)]
		public static bool? InetGistConsistent(object par2681, NpgsqlInet? par2682, short? par2683, int? par2684, object par2685)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistDecompress

		[Sql.Function(Name="pg_catalog.inet_gist_decompress", ServerSideOnly=true)]
		public static object InetGistDecompress(object par2687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistFetch

		[Sql.Function(Name="pg_catalog.inet_gist_fetch", ServerSideOnly=true)]
		public static object InetGistFetch(object par2689)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPenalty

		[Sql.Function(Name="pg_catalog.inet_gist_penalty", ServerSideOnly=true)]
		public static object InetGistPenalty(object par2691, object par2692, object par2693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPicksplit

		[Sql.Function(Name="pg_catalog.inet_gist_picksplit", ServerSideOnly=true)]
		public static object InetGistPicksplit(object par2695, object par2696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistSame

		[Sql.Function(Name="pg_catalog.inet_gist_same", ServerSideOnly=true)]
		public static object InetGistSame(NpgsqlInet? par2698, NpgsqlInet? par2699, object par2700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistUnion

		[Sql.Function(Name="pg_catalog.inet_gist_union", ServerSideOnly=true)]
		public static NpgsqlInet? InetGistUnion(object par2702, object par2703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetIn

		[Sql.Function(Name="pg_catalog.inet_in", ServerSideOnly=true)]
		public static NpgsqlInet? InetIn(object par2705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetMerge

		[Sql.Function(Name="pg_catalog.inet_merge", ServerSideOnly=true)]
		public static NpgsqlInet? InetMerge(NpgsqlInet? par2707, NpgsqlInet? par2708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetOut

		[Sql.Function(Name="pg_catalog.inet_out", ServerSideOnly=true)]
		public static object InetOut(NpgsqlInet? par2710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetRecv

		[Sql.Function(Name="pg_catalog.inet_recv", ServerSideOnly=true)]
		public static NpgsqlInet? InetRecv(object par2712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSameFamily

		[Sql.Function(Name="pg_catalog.inet_same_family", ServerSideOnly=true)]
		public static bool? InetSameFamily(NpgsqlInet? par2714, NpgsqlInet? par2715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSend

		[Sql.Function(Name="pg_catalog.inet_send", ServerSideOnly=true)]
		public static byte[] InetSend(NpgsqlInet? par2717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerAddr

		[Sql.Function(Name="pg_catalog.inet_server_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetServerAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerPort

		[Sql.Function(Name="pg_catalog.inet_server_port", ServerSideOnly=true)]
		public static int? InetServerPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetand

		[Sql.Function(Name="pg_catalog.inetand", ServerSideOnly=true)]
		public static NpgsqlInet? Inetand(NpgsqlInet? par2721, NpgsqlInet? par2722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetmi

		[Sql.Function(Name="pg_catalog.inetmi", ServerSideOnly=true)]
		public static long? Inetmi(NpgsqlInet? par2724, NpgsqlInet? par2725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetmiInt8

		[Sql.Function(Name="pg_catalog.inetmi_int8", ServerSideOnly=true)]
		public static NpgsqlInet? InetmiInt8(NpgsqlInet? par2727, long? par2728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetnot

		[Sql.Function(Name="pg_catalog.inetnot", ServerSideOnly=true)]
		public static NpgsqlInet? Inetnot(NpgsqlInet? par2730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetor

		[Sql.Function(Name="pg_catalog.inetor", ServerSideOnly=true)]
		public static NpgsqlInet? Inetor(NpgsqlInet? par2732, NpgsqlInet? par2733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetpl

		[Sql.Function(Name="pg_catalog.inetpl", ServerSideOnly=true)]
		public static NpgsqlInet? Inetpl(NpgsqlInet? par2735, long? par2736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Initcap

		[Sql.Function(Name="pg_catalog.initcap", ServerSideOnly=true)]
		public static string Initcap(string par2738)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2

		[Sql.Function(Name="pg_catalog.int2", ServerSideOnly=true)]
		public static short? Int2(long? par2748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Accum

		[Sql.Function(Name="pg_catalog.int2_accum", ServerSideOnly=true)]
		public static object Int2Accum(object par2750, short? par2751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AccumInv

		[Sql.Function(Name="pg_catalog.int2_accum_inv", ServerSideOnly=true)]
		public static object Int2AccumInv(object par2753, short? par2754)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccum

		[Sql.Function(Name="pg_catalog.int2_avg_accum", ServerSideOnly=true)]
		public static object Int2AvgAccum(object par2756, short? par2757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccumInv

		[Sql.Function(Name="pg_catalog.int2_avg_accum_inv", ServerSideOnly=true)]
		public static object Int2AvgAccumInv(object par2759, short? par2760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2MulCash

		[Sql.Function(Name="pg_catalog.int2_mul_cash", ServerSideOnly=true)]
		public static decimal? Int2MulCash(short? par2762, decimal? par2763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Sum

		[Sql.Function(Name="pg_catalog.int2_sum", ServerSideOnly=true)]
		public static long? Int2Sum(long? par2765, short? par2766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24div

		[Sql.Function(Name="pg_catalog.int24div", ServerSideOnly=true)]
		public static int? Int24div(short? par2768, int? par2769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24eq

		[Sql.Function(Name="pg_catalog.int24eq", ServerSideOnly=true)]
		public static bool? Int24eq(short? par2771, int? par2772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ge

		[Sql.Function(Name="pg_catalog.int24ge", ServerSideOnly=true)]
		public static bool? Int24ge(short? par2774, int? par2775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24gt

		[Sql.Function(Name="pg_catalog.int24gt", ServerSideOnly=true)]
		public static bool? Int24gt(short? par2777, int? par2778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24le

		[Sql.Function(Name="pg_catalog.int24le", ServerSideOnly=true)]
		public static bool? Int24le(short? par2780, int? par2781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24lt

		[Sql.Function(Name="pg_catalog.int24lt", ServerSideOnly=true)]
		public static bool? Int24lt(short? par2783, int? par2784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mi

		[Sql.Function(Name="pg_catalog.int24mi", ServerSideOnly=true)]
		public static int? Int24mi(short? par2786, int? par2787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mul

		[Sql.Function(Name="pg_catalog.int24mul", ServerSideOnly=true)]
		public static int? Int24mul(short? par2789, int? par2790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ne

		[Sql.Function(Name="pg_catalog.int24ne", ServerSideOnly=true)]
		public static bool? Int24ne(short? par2792, int? par2793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24pl

		[Sql.Function(Name="pg_catalog.int24pl", ServerSideOnly=true)]
		public static int? Int24pl(short? par2795, int? par2796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28div

		[Sql.Function(Name="pg_catalog.int28div", ServerSideOnly=true)]
		public static long? Int28div(short? par2798, long? par2799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28eq

		[Sql.Function(Name="pg_catalog.int28eq", ServerSideOnly=true)]
		public static bool? Int28eq(short? par2801, long? par2802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ge

		[Sql.Function(Name="pg_catalog.int28ge", ServerSideOnly=true)]
		public static bool? Int28ge(short? par2804, long? par2805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28gt

		[Sql.Function(Name="pg_catalog.int28gt", ServerSideOnly=true)]
		public static bool? Int28gt(short? par2807, long? par2808)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28le

		[Sql.Function(Name="pg_catalog.int28le", ServerSideOnly=true)]
		public static bool? Int28le(short? par2810, long? par2811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28lt

		[Sql.Function(Name="pg_catalog.int28lt", ServerSideOnly=true)]
		public static bool? Int28lt(short? par2813, long? par2814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mi

		[Sql.Function(Name="pg_catalog.int28mi", ServerSideOnly=true)]
		public static long? Int28mi(short? par2816, long? par2817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mul

		[Sql.Function(Name="pg_catalog.int28mul", ServerSideOnly=true)]
		public static long? Int28mul(short? par2819, long? par2820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ne

		[Sql.Function(Name="pg_catalog.int28ne", ServerSideOnly=true)]
		public static bool? Int28ne(short? par2822, long? par2823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28pl

		[Sql.Function(Name="pg_catalog.int28pl", ServerSideOnly=true)]
		public static long? Int28pl(short? par2825, long? par2826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2abs

		[Sql.Function(Name="pg_catalog.int2abs", ServerSideOnly=true)]
		public static short? Int2abs(short? par2828)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2and

		[Sql.Function(Name="pg_catalog.int2and", ServerSideOnly=true)]
		public static short? Int2and(short? par2830, short? par2831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2div

		[Sql.Function(Name="pg_catalog.int2div", ServerSideOnly=true)]
		public static short? Int2div(short? par2833, short? par2834)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2eq

		[Sql.Function(Name="pg_catalog.int2eq", ServerSideOnly=true)]
		public static bool? Int2eq(short? par2836, short? par2837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ge

		[Sql.Function(Name="pg_catalog.int2ge", ServerSideOnly=true)]
		public static bool? Int2ge(short? par2839, short? par2840)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2gt

		[Sql.Function(Name="pg_catalog.int2gt", ServerSideOnly=true)]
		public static bool? Int2gt(short? par2842, short? par2843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2in

		[Sql.Function(Name="pg_catalog.int2in", ServerSideOnly=true)]
		public static short? Int2in(object par2845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2int4Sum

		[Sql.Function(Name="pg_catalog.int2int4_sum", ServerSideOnly=true)]
		public static long? Int2int4Sum(object par2847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2larger

		[Sql.Function(Name="pg_catalog.int2larger", ServerSideOnly=true)]
		public static short? Int2larger(short? par2849, short? par2850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2le

		[Sql.Function(Name="pg_catalog.int2le", ServerSideOnly=true)]
		public static bool? Int2le(short? par2852, short? par2853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2lt

		[Sql.Function(Name="pg_catalog.int2lt", ServerSideOnly=true)]
		public static bool? Int2lt(short? par2855, short? par2856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mi

		[Sql.Function(Name="pg_catalog.int2mi", ServerSideOnly=true)]
		public static short? Int2mi(short? par2858, short? par2859)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mod

		[Sql.Function(Name="pg_catalog.int2mod", ServerSideOnly=true)]
		public static short? Int2mod(short? par2861, short? par2862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mul

		[Sql.Function(Name="pg_catalog.int2mul", ServerSideOnly=true)]
		public static short? Int2mul(short? par2864, short? par2865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ne

		[Sql.Function(Name="pg_catalog.int2ne", ServerSideOnly=true)]
		public static bool? Int2ne(short? par2867, short? par2868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2not

		[Sql.Function(Name="pg_catalog.int2not", ServerSideOnly=true)]
		public static short? Int2not(short? par2870)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2or

		[Sql.Function(Name="pg_catalog.int2or", ServerSideOnly=true)]
		public static short? Int2or(short? par2872, short? par2873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2out

		[Sql.Function(Name="pg_catalog.int2out", ServerSideOnly=true)]
		public static object Int2out(short? par2875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2pl

		[Sql.Function(Name="pg_catalog.int2pl", ServerSideOnly=true)]
		public static short? Int2pl(short? par2877, short? par2878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2recv

		[Sql.Function(Name="pg_catalog.int2recv", ServerSideOnly=true)]
		public static short? Int2recv(object par2880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2send

		[Sql.Function(Name="pg_catalog.int2send", ServerSideOnly=true)]
		public static byte[] Int2send(short? par2882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shl

		[Sql.Function(Name="pg_catalog.int2shl", ServerSideOnly=true)]
		public static short? Int2shl(short? par2884, int? par2885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shr

		[Sql.Function(Name="pg_catalog.int2shr", ServerSideOnly=true)]
		public static short? Int2shr(short? par2887, int? par2888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2smaller

		[Sql.Function(Name="pg_catalog.int2smaller", ServerSideOnly=true)]
		public static short? Int2smaller(short? par2890, short? par2891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2um

		[Sql.Function(Name="pg_catalog.int2um", ServerSideOnly=true)]
		public static short? Int2um(short? par2893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2up

		[Sql.Function(Name="pg_catalog.int2up", ServerSideOnly=true)]
		public static short? Int2up(short? par2895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectoreq

		[Sql.Function(Name="pg_catalog.int2vectoreq", ServerSideOnly=true)]
		public static bool? Int2vectoreq(object par2897, object par2898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorin

		[Sql.Function(Name="pg_catalog.int2vectorin", ServerSideOnly=true)]
		public static object Int2vectorin(object par2900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorout

		[Sql.Function(Name="pg_catalog.int2vectorout", ServerSideOnly=true)]
		public static object Int2vectorout(object par2902)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorrecv

		[Sql.Function(Name="pg_catalog.int2vectorrecv", ServerSideOnly=true)]
		public static object Int2vectorrecv(object par2904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorsend

		[Sql.Function(Name="pg_catalog.int2vectorsend", ServerSideOnly=true)]
		public static byte[] Int2vectorsend(object par2906)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2xor

		[Sql.Function(Name="pg_catalog.int2xor", ServerSideOnly=true)]
		public static short? Int2xor(short? par2908, short? par2909)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4

		[Sql.Function(Name="pg_catalog.int4", ServerSideOnly=true)]
		public static int? Int4(object par2925)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Accum

		[Sql.Function(Name="pg_catalog.int4_accum", ServerSideOnly=true)]
		public static object Int4Accum(object par2927, int? par2928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AccumInv

		[Sql.Function(Name="pg_catalog.int4_accum_inv", ServerSideOnly=true)]
		public static object Int4AccumInv(object par2930, int? par2931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccum

		[Sql.Function(Name="pg_catalog.int4_avg_accum", ServerSideOnly=true)]
		public static object Int4AvgAccum(object par2933, int? par2934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccumInv

		[Sql.Function(Name="pg_catalog.int4_avg_accum_inv", ServerSideOnly=true)]
		public static object Int4AvgAccumInv(object par2936, int? par2937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgCombine

		[Sql.Function(Name="pg_catalog.int4_avg_combine", ServerSideOnly=true)]
		public static object Int4AvgCombine(object par2939, object par2940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4MulCash

		[Sql.Function(Name="pg_catalog.int4_mul_cash", ServerSideOnly=true)]
		public static decimal? Int4MulCash(int? par2942, decimal? par2943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Sum

		[Sql.Function(Name="pg_catalog.int4_sum", ServerSideOnly=true)]
		public static long? Int4Sum(long? par2945, int? par2946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42div

		[Sql.Function(Name="pg_catalog.int42div", ServerSideOnly=true)]
		public static int? Int42div(int? par2948, short? par2949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42eq

		[Sql.Function(Name="pg_catalog.int42eq", ServerSideOnly=true)]
		public static bool? Int42eq(int? par2951, short? par2952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ge

		[Sql.Function(Name="pg_catalog.int42ge", ServerSideOnly=true)]
		public static bool? Int42ge(int? par2954, short? par2955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42gt

		[Sql.Function(Name="pg_catalog.int42gt", ServerSideOnly=true)]
		public static bool? Int42gt(int? par2957, short? par2958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42le

		[Sql.Function(Name="pg_catalog.int42le", ServerSideOnly=true)]
		public static bool? Int42le(int? par2960, short? par2961)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42lt

		[Sql.Function(Name="pg_catalog.int42lt", ServerSideOnly=true)]
		public static bool? Int42lt(int? par2963, short? par2964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mi

		[Sql.Function(Name="pg_catalog.int42mi", ServerSideOnly=true)]
		public static int? Int42mi(int? par2966, short? par2967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mul

		[Sql.Function(Name="pg_catalog.int42mul", ServerSideOnly=true)]
		public static int? Int42mul(int? par2969, short? par2970)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ne

		[Sql.Function(Name="pg_catalog.int42ne", ServerSideOnly=true)]
		public static bool? Int42ne(int? par2972, short? par2973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42pl

		[Sql.Function(Name="pg_catalog.int42pl", ServerSideOnly=true)]
		public static int? Int42pl(int? par2975, short? par2976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48div

		[Sql.Function(Name="pg_catalog.int48div", ServerSideOnly=true)]
		public static long? Int48div(int? par2978, long? par2979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48eq

		[Sql.Function(Name="pg_catalog.int48eq", ServerSideOnly=true)]
		public static bool? Int48eq(int? par2981, long? par2982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ge

		[Sql.Function(Name="pg_catalog.int48ge", ServerSideOnly=true)]
		public static bool? Int48ge(int? par2984, long? par2985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48gt

		[Sql.Function(Name="pg_catalog.int48gt", ServerSideOnly=true)]
		public static bool? Int48gt(int? par2987, long? par2988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48le

		[Sql.Function(Name="pg_catalog.int48le", ServerSideOnly=true)]
		public static bool? Int48le(int? par2990, long? par2991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48lt

		[Sql.Function(Name="pg_catalog.int48lt", ServerSideOnly=true)]
		public static bool? Int48lt(int? par2993, long? par2994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mi

		[Sql.Function(Name="pg_catalog.int48mi", ServerSideOnly=true)]
		public static long? Int48mi(int? par2996, long? par2997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mul

		[Sql.Function(Name="pg_catalog.int48mul", ServerSideOnly=true)]
		public static long? Int48mul(int? par2999, long? par3000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ne

		[Sql.Function(Name="pg_catalog.int48ne", ServerSideOnly=true)]
		public static bool? Int48ne(int? par3002, long? par3003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48pl

		[Sql.Function(Name="pg_catalog.int48pl", ServerSideOnly=true)]
		public static long? Int48pl(int? par3005, long? par3006)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4abs

		[Sql.Function(Name="pg_catalog.int4abs", ServerSideOnly=true)]
		public static int? Int4abs(int? par3008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4and

		[Sql.Function(Name="pg_catalog.int4and", ServerSideOnly=true)]
		public static int? Int4and(int? par3010, int? par3011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4div

		[Sql.Function(Name="pg_catalog.int4div", ServerSideOnly=true)]
		public static int? Int4div(int? par3013, int? par3014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4eq

		[Sql.Function(Name="pg_catalog.int4eq", ServerSideOnly=true)]
		public static bool? Int4eq(int? par3016, int? par3017)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ge

		[Sql.Function(Name="pg_catalog.int4ge", ServerSideOnly=true)]
		public static bool? Int4ge(int? par3019, int? par3020)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4gt

		[Sql.Function(Name="pg_catalog.int4gt", ServerSideOnly=true)]
		public static bool? Int4gt(int? par3022, int? par3023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4in

		[Sql.Function(Name="pg_catalog.int4in", ServerSideOnly=true)]
		public static int? Int4in(object par3025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4inc

		[Sql.Function(Name="pg_catalog.int4inc", ServerSideOnly=true)]
		public static int? Int4inc(int? par3027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4larger

		[Sql.Function(Name="pg_catalog.int4larger", ServerSideOnly=true)]
		public static int? Int4larger(int? par3029, int? par3030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4le

		[Sql.Function(Name="pg_catalog.int4le", ServerSideOnly=true)]
		public static bool? Int4le(int? par3032, int? par3033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4lt

		[Sql.Function(Name="pg_catalog.int4lt", ServerSideOnly=true)]
		public static bool? Int4lt(int? par3035, int? par3036)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mi

		[Sql.Function(Name="pg_catalog.int4mi", ServerSideOnly=true)]
		public static int? Int4mi(int? par3038, int? par3039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mod

		[Sql.Function(Name="pg_catalog.int4mod", ServerSideOnly=true)]
		public static int? Int4mod(int? par3041, int? par3042)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mul

		[Sql.Function(Name="pg_catalog.int4mul", ServerSideOnly=true)]
		public static int? Int4mul(int? par3044, int? par3045)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ne

		[Sql.Function(Name="pg_catalog.int4ne", ServerSideOnly=true)]
		public static bool? Int4ne(int? par3047, int? par3048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4not

		[Sql.Function(Name="pg_catalog.int4not", ServerSideOnly=true)]
		public static int? Int4not(int? par3050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4or

		[Sql.Function(Name="pg_catalog.int4or", ServerSideOnly=true)]
		public static int? Int4or(int? par3052, int? par3053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4out

		[Sql.Function(Name="pg_catalog.int4out", ServerSideOnly=true)]
		public static object Int4out(int? par3055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4pl

		[Sql.Function(Name="pg_catalog.int4pl", ServerSideOnly=true)]
		public static int? Int4pl(int? par3057, int? par3058)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4range

		[Sql.Function(Name="pg_catalog.int4range", ServerSideOnly=true)]
		public static object Int4range(int? par3063, int? par3064, string par3065)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeCanonical

		[Sql.Function(Name="pg_catalog.int4range_canonical", ServerSideOnly=true)]
		public static object Int4rangeCanonical(object par3067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeSubdiff

		[Sql.Function(Name="pg_catalog.int4range_subdiff", ServerSideOnly=true)]
		public static double? Int4rangeSubdiff(int? par3069, int? par3070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4recv

		[Sql.Function(Name="pg_catalog.int4recv", ServerSideOnly=true)]
		public static int? Int4recv(object par3072)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4send

		[Sql.Function(Name="pg_catalog.int4send", ServerSideOnly=true)]
		public static byte[] Int4send(int? par3074)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shl

		[Sql.Function(Name="pg_catalog.int4shl", ServerSideOnly=true)]
		public static int? Int4shl(int? par3076, int? par3077)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shr

		[Sql.Function(Name="pg_catalog.int4shr", ServerSideOnly=true)]
		public static int? Int4shr(int? par3079, int? par3080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4smaller

		[Sql.Function(Name="pg_catalog.int4smaller", ServerSideOnly=true)]
		public static int? Int4smaller(int? par3082, int? par3083)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4um

		[Sql.Function(Name="pg_catalog.int4um", ServerSideOnly=true)]
		public static int? Int4um(int? par3085)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4up

		[Sql.Function(Name="pg_catalog.int4up", ServerSideOnly=true)]
		public static int? Int4up(int? par3087)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4xor

		[Sql.Function(Name="pg_catalog.int4xor", ServerSideOnly=true)]
		public static int? Int4xor(int? par3089, int? par3090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8

		[Sql.Function(Name="pg_catalog.int8", ServerSideOnly=true)]
		public static long? Int8(short? par3104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Accum

		[Sql.Function(Name="pg_catalog.int8_accum", ServerSideOnly=true)]
		public static object Int8Accum(object par3106, long? par3107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AccumInv

		[Sql.Function(Name="pg_catalog.int8_accum_inv", ServerSideOnly=true)]
		public static object Int8AccumInv(object par3109, long? par3110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Avg

		[Sql.Function(Name="pg_catalog.int8_avg", ServerSideOnly=true)]
		public static decimal? Int8Avg(object par3112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccum

		[Sql.Function(Name="pg_catalog.int8_avg_accum", ServerSideOnly=true)]
		public static object Int8AvgAccum(object par3114, long? par3115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccumInv

		[Sql.Function(Name="pg_catalog.int8_avg_accum_inv", ServerSideOnly=true)]
		public static object Int8AvgAccumInv(object par3117, long? par3118)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgCombine

		[Sql.Function(Name="pg_catalog.int8_avg_combine", ServerSideOnly=true)]
		public static object Int8AvgCombine(object par3120, object par3121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgDeserialize

		[Sql.Function(Name="pg_catalog.int8_avg_deserialize", ServerSideOnly=true)]
		public static object Int8AvgDeserialize(byte[] par3123, object par3124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgSerialize

		[Sql.Function(Name="pg_catalog.int8_avg_serialize", ServerSideOnly=true)]
		public static byte[] Int8AvgSerialize(object par3126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Sum

		[Sql.Function(Name="pg_catalog.int8_sum", ServerSideOnly=true)]
		public static decimal? Int8Sum(decimal? par3128, long? par3129)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82div

		[Sql.Function(Name="pg_catalog.int82div", ServerSideOnly=true)]
		public static long? Int82div(long? par3131, short? par3132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82eq

		[Sql.Function(Name="pg_catalog.int82eq", ServerSideOnly=true)]
		public static bool? Int82eq(long? par3134, short? par3135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ge

		[Sql.Function(Name="pg_catalog.int82ge", ServerSideOnly=true)]
		public static bool? Int82ge(long? par3137, short? par3138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82gt

		[Sql.Function(Name="pg_catalog.int82gt", ServerSideOnly=true)]
		public static bool? Int82gt(long? par3140, short? par3141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82le

		[Sql.Function(Name="pg_catalog.int82le", ServerSideOnly=true)]
		public static bool? Int82le(long? par3143, short? par3144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82lt

		[Sql.Function(Name="pg_catalog.int82lt", ServerSideOnly=true)]
		public static bool? Int82lt(long? par3146, short? par3147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mi

		[Sql.Function(Name="pg_catalog.int82mi", ServerSideOnly=true)]
		public static long? Int82mi(long? par3149, short? par3150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mul

		[Sql.Function(Name="pg_catalog.int82mul", ServerSideOnly=true)]
		public static long? Int82mul(long? par3152, short? par3153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ne

		[Sql.Function(Name="pg_catalog.int82ne", ServerSideOnly=true)]
		public static bool? Int82ne(long? par3155, short? par3156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82pl

		[Sql.Function(Name="pg_catalog.int82pl", ServerSideOnly=true)]
		public static long? Int82pl(long? par3158, short? par3159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84div

		[Sql.Function(Name="pg_catalog.int84div", ServerSideOnly=true)]
		public static long? Int84div(long? par3161, int? par3162)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84eq

		[Sql.Function(Name="pg_catalog.int84eq", ServerSideOnly=true)]
		public static bool? Int84eq(long? par3164, int? par3165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ge

		[Sql.Function(Name="pg_catalog.int84ge", ServerSideOnly=true)]
		public static bool? Int84ge(long? par3167, int? par3168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84gt

		[Sql.Function(Name="pg_catalog.int84gt", ServerSideOnly=true)]
		public static bool? Int84gt(long? par3170, int? par3171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84le

		[Sql.Function(Name="pg_catalog.int84le", ServerSideOnly=true)]
		public static bool? Int84le(long? par3173, int? par3174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84lt

		[Sql.Function(Name="pg_catalog.int84lt", ServerSideOnly=true)]
		public static bool? Int84lt(long? par3176, int? par3177)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mi

		[Sql.Function(Name="pg_catalog.int84mi", ServerSideOnly=true)]
		public static long? Int84mi(long? par3179, int? par3180)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mul

		[Sql.Function(Name="pg_catalog.int84mul", ServerSideOnly=true)]
		public static long? Int84mul(long? par3182, int? par3183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ne

		[Sql.Function(Name="pg_catalog.int84ne", ServerSideOnly=true)]
		public static bool? Int84ne(long? par3185, int? par3186)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84pl

		[Sql.Function(Name="pg_catalog.int84pl", ServerSideOnly=true)]
		public static long? Int84pl(long? par3188, int? par3189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8abs

		[Sql.Function(Name="pg_catalog.int8abs", ServerSideOnly=true)]
		public static long? Int8abs(long? par3191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8and

		[Sql.Function(Name="pg_catalog.int8and", ServerSideOnly=true)]
		public static long? Int8and(long? par3193, long? par3194)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8dec

		[Sql.Function(Name="pg_catalog.int8dec", ServerSideOnly=true)]
		public static long? Int8dec(long? par3196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8decAny

		[Sql.Function(Name="pg_catalog.int8dec_any", ServerSideOnly=true)]
		public static long? Int8decAny(long? par3198, object par3199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8div

		[Sql.Function(Name="pg_catalog.int8div", ServerSideOnly=true)]
		public static long? Int8div(long? par3201, long? par3202)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8eq

		[Sql.Function(Name="pg_catalog.int8eq", ServerSideOnly=true)]
		public static bool? Int8eq(long? par3204, long? par3205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ge

		[Sql.Function(Name="pg_catalog.int8ge", ServerSideOnly=true)]
		public static bool? Int8ge(long? par3207, long? par3208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8gt

		[Sql.Function(Name="pg_catalog.int8gt", ServerSideOnly=true)]
		public static bool? Int8gt(long? par3210, long? par3211)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8in

		[Sql.Function(Name="pg_catalog.int8in", ServerSideOnly=true)]
		public static long? Int8in(object par3213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8inc

		[Sql.Function(Name="pg_catalog.int8inc", ServerSideOnly=true)]
		public static long? Int8inc(long? par3215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incAny

		[Sql.Function(Name="pg_catalog.int8inc_any", ServerSideOnly=true)]
		public static long? Int8incAny(long? par3217, object par3218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incFloat8Float8

		[Sql.Function(Name="pg_catalog.int8inc_float8_float8", ServerSideOnly=true)]
		public static long? Int8incFloat8Float8(long? par3220, double? par3221, double? par3222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8larger

		[Sql.Function(Name="pg_catalog.int8larger", ServerSideOnly=true)]
		public static long? Int8larger(long? par3224, long? par3225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8le

		[Sql.Function(Name="pg_catalog.int8le", ServerSideOnly=true)]
		public static bool? Int8le(long? par3227, long? par3228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8lt

		[Sql.Function(Name="pg_catalog.int8lt", ServerSideOnly=true)]
		public static bool? Int8lt(long? par3230, long? par3231)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mi

		[Sql.Function(Name="pg_catalog.int8mi", ServerSideOnly=true)]
		public static long? Int8mi(long? par3233, long? par3234)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mod

		[Sql.Function(Name="pg_catalog.int8mod", ServerSideOnly=true)]
		public static long? Int8mod(long? par3236, long? par3237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mul

		[Sql.Function(Name="pg_catalog.int8mul", ServerSideOnly=true)]
		public static long? Int8mul(long? par3239, long? par3240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ne

		[Sql.Function(Name="pg_catalog.int8ne", ServerSideOnly=true)]
		public static bool? Int8ne(long? par3242, long? par3243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8not

		[Sql.Function(Name="pg_catalog.int8not", ServerSideOnly=true)]
		public static long? Int8not(long? par3245)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8or

		[Sql.Function(Name="pg_catalog.int8or", ServerSideOnly=true)]
		public static long? Int8or(long? par3247, long? par3248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8out

		[Sql.Function(Name="pg_catalog.int8out", ServerSideOnly=true)]
		public static object Int8out(long? par3250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8pl

		[Sql.Function(Name="pg_catalog.int8pl", ServerSideOnly=true)]
		public static long? Int8pl(long? par3252, long? par3253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8plInet

		[Sql.Function(Name="pg_catalog.int8pl_inet", ServerSideOnly=true)]
		public static NpgsqlInet? Int8plInet(long? par3255, NpgsqlInet? par3256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8range

		[Sql.Function(Name="pg_catalog.int8range", ServerSideOnly=true)]
		public static object Int8range(long? par3261, long? par3262, string par3263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeCanonical

		[Sql.Function(Name="pg_catalog.int8range_canonical", ServerSideOnly=true)]
		public static object Int8rangeCanonical(object par3265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeSubdiff

		[Sql.Function(Name="pg_catalog.int8range_subdiff", ServerSideOnly=true)]
		public static double? Int8rangeSubdiff(long? par3267, long? par3268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8recv

		[Sql.Function(Name="pg_catalog.int8recv", ServerSideOnly=true)]
		public static long? Int8recv(object par3270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8send

		[Sql.Function(Name="pg_catalog.int8send", ServerSideOnly=true)]
		public static byte[] Int8send(long? par3272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shl

		[Sql.Function(Name="pg_catalog.int8shl", ServerSideOnly=true)]
		public static long? Int8shl(long? par3274, int? par3275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shr

		[Sql.Function(Name="pg_catalog.int8shr", ServerSideOnly=true)]
		public static long? Int8shr(long? par3277, int? par3278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8smaller

		[Sql.Function(Name="pg_catalog.int8smaller", ServerSideOnly=true)]
		public static long? Int8smaller(long? par3280, long? par3281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8um

		[Sql.Function(Name="pg_catalog.int8um", ServerSideOnly=true)]
		public static long? Int8um(long? par3283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8up

		[Sql.Function(Name="pg_catalog.int8up", ServerSideOnly=true)]
		public static long? Int8up(long? par3285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8xor

		[Sql.Function(Name="pg_catalog.int8xor", ServerSideOnly=true)]
		public static long? Int8xor(long? par3287, long? par3288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntegerPlDate

		[Sql.Function(Name="pg_catalog.integer_pl_date", ServerSideOnly=true)]
		public static NpgsqlDate? IntegerPlDate(int? par3290, NpgsqlDate? par3291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterLb

		[Sql.Function(Name="pg_catalog.inter_lb", ServerSideOnly=true)]
		public static bool? InterLb(NpgsqlLine? par3293, NpgsqlBox? par3294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSb

		[Sql.Function(Name="pg_catalog.inter_sb", ServerSideOnly=true)]
		public static bool? InterSb(NpgsqlLSeg? par3296, NpgsqlBox? par3297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSl

		[Sql.Function(Name="pg_catalog.inter_sl", ServerSideOnly=true)]
		public static bool? InterSl(NpgsqlLSeg? par3299, NpgsqlLine? par3300)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalIn

		[Sql.Function(Name="pg_catalog.internal_in", ServerSideOnly=true)]
		public static object InternalIn(object par3302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalOut

		[Sql.Function(Name="pg_catalog.internal_out", ServerSideOnly=true)]
		public static object InternalOut(object par3304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Interval

		[Sql.Function(Name="pg_catalog.interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Interval(TimeSpan? par3311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccum

		[Sql.Function(Name="pg_catalog.interval_accum", ServerSideOnly=true)]
		public static object IntervalAccum(object par3313, NpgsqlTimeSpan? par3314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccumInv

		[Sql.Function(Name="pg_catalog.interval_accum_inv", ServerSideOnly=true)]
		public static object IntervalAccumInv(object par3316, NpgsqlTimeSpan? par3317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAvg

		[Sql.Function(Name="pg_catalog.interval_avg", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalAvg(object par3319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalCmp

		[Sql.Function(Name="pg_catalog.interval_cmp", ServerSideOnly=true)]
		public static int? IntervalCmp(NpgsqlTimeSpan? par3321, NpgsqlTimeSpan? par3322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalCombine

		[Sql.Function(Name="pg_catalog.interval_combine", ServerSideOnly=true)]
		public static object IntervalCombine(object par3324, object par3325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalDiv

		[Sql.Function(Name="pg_catalog.interval_div", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalDiv(NpgsqlTimeSpan? par3327, double? par3328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalEq

		[Sql.Function(Name="pg_catalog.interval_eq", ServerSideOnly=true)]
		public static bool? IntervalEq(NpgsqlTimeSpan? par3330, NpgsqlTimeSpan? par3331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGe

		[Sql.Function(Name="pg_catalog.interval_ge", ServerSideOnly=true)]
		public static bool? IntervalGe(NpgsqlTimeSpan? par3333, NpgsqlTimeSpan? par3334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGt

		[Sql.Function(Name="pg_catalog.interval_gt", ServerSideOnly=true)]
		public static bool? IntervalGt(NpgsqlTimeSpan? par3336, NpgsqlTimeSpan? par3337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalHash

		[Sql.Function(Name="pg_catalog.interval_hash", ServerSideOnly=true)]
		public static int? IntervalHash(NpgsqlTimeSpan? par3339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalIn

		[Sql.Function(Name="pg_catalog.interval_in", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalIn(object par3341, int? par3342, int? par3343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLarger

		[Sql.Function(Name="pg_catalog.interval_larger", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalLarger(NpgsqlTimeSpan? par3345, NpgsqlTimeSpan? par3346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLe

		[Sql.Function(Name="pg_catalog.interval_le", ServerSideOnly=true)]
		public static bool? IntervalLe(NpgsqlTimeSpan? par3348, NpgsqlTimeSpan? par3349)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLt

		[Sql.Function(Name="pg_catalog.interval_lt", ServerSideOnly=true)]
		public static bool? IntervalLt(NpgsqlTimeSpan? par3351, NpgsqlTimeSpan? par3352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMi

		[Sql.Function(Name="pg_catalog.interval_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMi(NpgsqlTimeSpan? par3354, NpgsqlTimeSpan? par3355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMul

		[Sql.Function(Name="pg_catalog.interval_mul", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMul(NpgsqlTimeSpan? par3357, double? par3358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalNe

		[Sql.Function(Name="pg_catalog.interval_ne", ServerSideOnly=true)]
		public static bool? IntervalNe(NpgsqlTimeSpan? par3360, NpgsqlTimeSpan? par3361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalOut

		[Sql.Function(Name="pg_catalog.interval_out", ServerSideOnly=true)]
		public static object IntervalOut(NpgsqlTimeSpan? par3363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPl

		[Sql.Function(Name="pg_catalog.interval_pl", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalPl(NpgsqlTimeSpan? par3365, NpgsqlTimeSpan? par3366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlDate

		[Sql.Function(Name="pg_catalog.interval_pl_date", ServerSideOnly=true)]
		public static DateTime? IntervalPlDate(NpgsqlTimeSpan? par3368, NpgsqlDate? par3369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTime

		[Sql.Function(Name="pg_catalog.interval_pl_time", ServerSideOnly=true)]
		public static TimeSpan? IntervalPlTime(NpgsqlTimeSpan? par3371, TimeSpan? par3372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamp

		[Sql.Function(Name="pg_catalog.interval_pl_timestamp", ServerSideOnly=true)]
		public static DateTime? IntervalPlTimestamp(NpgsqlTimeSpan? par3374, DateTime? par3375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamptz

		[Sql.Function(Name="pg_catalog.interval_pl_timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? IntervalPlTimestamptz(NpgsqlTimeSpan? par3377, DateTimeOffset? par3378)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimetz

		[Sql.Function(Name="pg_catalog.interval_pl_timetz", ServerSideOnly=true)]
		public static DateTimeOffset? IntervalPlTimetz(NpgsqlTimeSpan? par3380, DateTimeOffset? par3381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalRecv

		[Sql.Function(Name="pg_catalog.interval_recv", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalRecv(object par3383, int? par3384, int? par3385)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSend

		[Sql.Function(Name="pg_catalog.interval_send", ServerSideOnly=true)]
		public static byte[] IntervalSend(NpgsqlTimeSpan? par3387)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSmaller

		[Sql.Function(Name="pg_catalog.interval_smaller", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalSmaller(NpgsqlTimeSpan? par3389, NpgsqlTimeSpan? par3390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalTransform

		[Sql.Function(Name="pg_catalog.interval_transform", ServerSideOnly=true)]
		public static object IntervalTransform(object par3392)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalUm

		[Sql.Function(Name="pg_catalog.interval_um", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalUm(NpgsqlTimeSpan? par3394)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodin

		[Sql.Function(Name="pg_catalog.intervaltypmodin", ServerSideOnly=true)]
		public static int? Intervaltypmodin(object par3396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodout

		[Sql.Function(Name="pg_catalog.intervaltypmodout", ServerSideOnly=true)]
		public static object Intervaltypmodout(int? par3398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intinterval

		[Sql.Function(Name="pg_catalog.intinterval", ServerSideOnly=true)]
		public static bool? Intinterval(object par3400, object par3401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isclosed

		[Sql.Function(Name="pg_catalog.isclosed", ServerSideOnly=true)]
		public static bool? Isclosed(NpgsqlPath? par3403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isempty

		[Sql.Function(Name="pg_catalog.isempty", ServerSideOnly=true)]
		public static bool? Isempty(object par3405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isfinite

		[Sql.Function(Name="pg_catalog.isfinite", ServerSideOnly=true)]
		public static bool? Isfinite(object par3415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ishorizontal

		[Sql.Function(Name="pg_catalog.ishorizontal", ServerSideOnly=true)]
		public static bool? Ishorizontal(NpgsqlLine? par3422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToKoi8r

		[Sql.Function(Name="pg_catalog.iso_to_koi8r", ServerSideOnly=true)]
		public static object IsoToKoi8r(int? par3423, int? par3424, object par3425, object par3426, int? par3427)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToMic

		[Sql.Function(Name="pg_catalog.iso_to_mic", ServerSideOnly=true)]
		public static object IsoToMic(int? par3428, int? par3429, object par3430, object par3431, int? par3432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin1251

		[Sql.Function(Name="pg_catalog.iso_to_win1251", ServerSideOnly=true)]
		public static object IsoToWin1251(int? par3433, int? par3434, object par3435, object par3436, int? par3437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin866

		[Sql.Function(Name="pg_catalog.iso_to_win866", ServerSideOnly=true)]
		public static object IsoToWin866(int? par3438, int? par3439, object par3440, object par3441, int? par3442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso88591ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_1_to_utf8", ServerSideOnly=true)]
		public static object Iso88591ToUtf8(int? par3443, int? par3444, object par3445, object par3446, int? par3447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso8859ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_to_utf8", ServerSideOnly=true)]
		public static object Iso8859ToUtf8(int? par3448, int? par3449, object par3450, object par3451, int? par3452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isopen

		[Sql.Function(Name="pg_catalog.isopen", ServerSideOnly=true)]
		public static bool? Isopen(NpgsqlPath? par3454)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isparallel

		[Sql.Function(Name="pg_catalog.isparallel", ServerSideOnly=true)]
		public static bool? Isparallel(NpgsqlLine? par3459, NpgsqlLine? par3460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isperp

		[Sql.Function(Name="pg_catalog.isperp", ServerSideOnly=true)]
		public static bool? Isperp(NpgsqlLine? par3465, NpgsqlLine? par3466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isvertical

		[Sql.Function(Name="pg_catalog.isvertical", ServerSideOnly=true)]
		public static bool? Isvertical(NpgsqlLine? par3473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JohabToUtf8

		[Sql.Function(Name="pg_catalog.johab_to_utf8", ServerSideOnly=true)]
		public static object JohabToUtf8(int? par3474, int? par3475, object par3476, object par3477, int? par3478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAgg

		[Sql.Function(Name="pg_catalog.json_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string JsonAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggFinalfn

		[Sql.Function(Name="pg_catalog.json_agg_finalfn", ServerSideOnly=true)]
		public static string JsonAggFinalfn(object par3482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggTransfn

		[Sql.Function(Name="pg_catalog.json_agg_transfn", ServerSideOnly=true)]
		public static object JsonAggTransfn(object par3484, object par3485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElement

		[Sql.Function(Name="pg_catalog.json_array_element", ServerSideOnly=true)]
		public static string JsonArrayElement(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElementText

		[Sql.Function(Name="pg_catalog.json_array_element_text", ServerSideOnly=true)]
		public static string JsonArrayElementText(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayLength

		[Sql.Function(Name="pg_catalog.json_array_length", ServerSideOnly=true)]
		public static int? JsonArrayLength(string par3489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildArray

		[Sql.Function(Name="pg_catalog.json_build_array", ServerSideOnly=true)]
		public static string JsonBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildObject

		[Sql.Function(Name="pg_catalog.json_build_object", ServerSideOnly=true)]
		public static string JsonBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPath

		[Sql.Function(Name="pg_catalog.json_extract_path", ServerSideOnly=true)]
		public static string JsonExtractPath(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPathText

		[Sql.Function(Name="pg_catalog.json_extract_path_text", ServerSideOnly=true)]
		public static string JsonExtractPathText(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonIn

		[Sql.Function(Name="pg_catalog.json_in", ServerSideOnly=true)]
		public static string JsonIn(object par3499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObject

		[Sql.Function(Name="pg_catalog.json_object", ServerSideOnly=true)]
		public static string JsonObject(object par3503, object par3504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAgg

		[Sql.Function(Name="pg_catalog.json_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string JsonObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3506, Expression<Func<TSource, object>> par3507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.json_object_agg_finalfn", ServerSideOnly=true)]
		public static string JsonObjectAggFinalfn(object par3509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggTransfn

		[Sql.Function(Name="pg_catalog.json_object_agg_transfn", ServerSideOnly=true)]
		public static object JsonObjectAggTransfn(object par3511, object par3512, object par3513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectField

		[Sql.Function(Name="pg_catalog.json_object_field", ServerSideOnly=true)]
		public static string JsonObjectField(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectFieldText

		[Sql.Function(Name="pg_catalog.json_object_field_text", ServerSideOnly=true)]
		public static string JsonObjectFieldText(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonOut

		[Sql.Function(Name="pg_catalog.json_out", ServerSideOnly=true)]
		public static object JsonOut(string par3518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonPopulateRecord

		[Sql.Function(Name="pg_catalog.json_populate_record", ServerSideOnly=true)]
		public static object JsonPopulateRecord(object @base, string from_json, bool? use_json_as_text)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonRecv

		[Sql.Function(Name="pg_catalog.json_recv", ServerSideOnly=true)]
		public static string JsonRecv(object par3521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonSend

		[Sql.Function(Name="pg_catalog.json_send", ServerSideOnly=true)]
		public static byte[] JsonSend(string par3523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonStripNulls

		[Sql.Function(Name="pg_catalog.json_strip_nulls", ServerSideOnly=true)]
		public static string JsonStripNulls(string par3525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonToRecord

		[Sql.Function(Name="pg_catalog.json_to_record", ServerSideOnly=true)]
		public static object JsonToRecord(string par3526)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonTypeof

		[Sql.Function(Name="pg_catalog.json_typeof", ServerSideOnly=true)]
		public static string JsonTypeof(string par3529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAgg

		[Sql.Function(Name="pg_catalog.jsonb_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string JsonbAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_finalfn", ServerSideOnly=true)]
		public static string JsonbAggFinalfn(object par3533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_transfn", ServerSideOnly=true)]
		public static object JsonbAggTransfn(object par3535, object par3536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElement

		[Sql.Function(Name="pg_catalog.jsonb_array_element", ServerSideOnly=true)]
		public static string JsonbArrayElement(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElementText

		[Sql.Function(Name="pg_catalog.jsonb_array_element_text", ServerSideOnly=true)]
		public static string JsonbArrayElementText(string from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayLength

		[Sql.Function(Name="pg_catalog.jsonb_array_length", ServerSideOnly=true)]
		public static int? JsonbArrayLength(string par3540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildArray

		[Sql.Function(Name="pg_catalog.jsonb_build_array", ServerSideOnly=true)]
		public static string JsonbBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildObject

		[Sql.Function(Name="pg_catalog.jsonb_build_object", ServerSideOnly=true)]
		public static string JsonbBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbCmp

		[Sql.Function(Name="pg_catalog.jsonb_cmp", ServerSideOnly=true)]
		public static int? JsonbCmp(string par3548, string par3549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbConcat

		[Sql.Function(Name="pg_catalog.jsonb_concat", ServerSideOnly=true)]
		public static string JsonbConcat(string par3551, string par3552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContained

		[Sql.Function(Name="pg_catalog.jsonb_contained", ServerSideOnly=true)]
		public static bool? JsonbContained(string par3554, string par3555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContains

		[Sql.Function(Name="pg_catalog.jsonb_contains", ServerSideOnly=true)]
		public static bool? JsonbContains(string par3557, string par3558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDelete

		[Sql.Function(Name="pg_catalog.jsonb_delete", ServerSideOnly=true)]
		public static string JsonbDelete(string par3563, int? par3564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDeletePath

		[Sql.Function(Name="pg_catalog.jsonb_delete_path", ServerSideOnly=true)]
		public static string JsonbDeletePath(string par3566, object par3567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbEq

		[Sql.Function(Name="pg_catalog.jsonb_eq", ServerSideOnly=true)]
		public static bool? JsonbEq(string par3569, string par3570)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExists

		[Sql.Function(Name="pg_catalog.jsonb_exists", ServerSideOnly=true)]
		public static bool? JsonbExists(string par3572, string par3573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAll

		[Sql.Function(Name="pg_catalog.jsonb_exists_all", ServerSideOnly=true)]
		public static bool? JsonbExistsAll(string par3575, object par3576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAny

		[Sql.Function(Name="pg_catalog.jsonb_exists_any", ServerSideOnly=true)]
		public static bool? JsonbExistsAny(string par3578, object par3579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPath

		[Sql.Function(Name="pg_catalog.jsonb_extract_path", ServerSideOnly=true)]
		public static string JsonbExtractPath(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPathText

		[Sql.Function(Name="pg_catalog.jsonb_extract_path_text", ServerSideOnly=true)]
		public static string JsonbExtractPathText(string from_json, object path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGe

		[Sql.Function(Name="pg_catalog.jsonb_ge", ServerSideOnly=true)]
		public static bool? JsonbGe(string par3583, string par3584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGt

		[Sql.Function(Name="pg_catalog.jsonb_gt", ServerSideOnly=true)]
		public static bool? JsonbGt(string par3586, string par3587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbHash

		[Sql.Function(Name="pg_catalog.jsonb_hash", ServerSideOnly=true)]
		public static int? JsonbHash(string par3589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbIn

		[Sql.Function(Name="pg_catalog.jsonb_in", ServerSideOnly=true)]
		public static string JsonbIn(object par3591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbInsert

		[Sql.Function(Name="pg_catalog.jsonb_insert", ServerSideOnly=true)]
		public static string JsonbInsert(string jsonb_in, object path, string replacement, bool? insert_after)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLe

		[Sql.Function(Name="pg_catalog.jsonb_le", ServerSideOnly=true)]
		public static bool? JsonbLe(string par3594, string par3595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLt

		[Sql.Function(Name="pg_catalog.jsonb_lt", ServerSideOnly=true)]
		public static bool? JsonbLt(string par3597, string par3598)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbNe

		[Sql.Function(Name="pg_catalog.jsonb_ne", ServerSideOnly=true)]
		public static bool? JsonbNe(string par3600, string par3601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObject

		[Sql.Function(Name="pg_catalog.jsonb_object", ServerSideOnly=true)]
		public static string JsonbObject(object par3605, object par3606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAgg

		[Sql.Function(Name="pg_catalog.jsonb_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string JsonbObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par3608, Expression<Func<TSource, object>> par3609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_finalfn", ServerSideOnly=true)]
		public static string JsonbObjectAggFinalfn(object par3611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_transfn", ServerSideOnly=true)]
		public static object JsonbObjectAggTransfn(object par3613, object par3614, object par3615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectField

		[Sql.Function(Name="pg_catalog.jsonb_object_field", ServerSideOnly=true)]
		public static string JsonbObjectField(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectFieldText

		[Sql.Function(Name="pg_catalog.jsonb_object_field_text", ServerSideOnly=true)]
		public static string JsonbObjectFieldText(string from_json, string field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbOut

		[Sql.Function(Name="pg_catalog.jsonb_out", ServerSideOnly=true)]
		public static object JsonbOut(string par3620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPopulateRecord

		[Sql.Function(Name="pg_catalog.jsonb_populate_record", ServerSideOnly=true)]
		public static object JsonbPopulateRecord(object par3622, string par3623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPretty

		[Sql.Function(Name="pg_catalog.jsonb_pretty", ServerSideOnly=true)]
		public static string JsonbPretty(string par3627)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbRecv

		[Sql.Function(Name="pg_catalog.jsonb_recv", ServerSideOnly=true)]
		public static string JsonbRecv(object par3629)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSend

		[Sql.Function(Name="pg_catalog.jsonb_send", ServerSideOnly=true)]
		public static byte[] JsonbSend(string par3631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSet

		[Sql.Function(Name="pg_catalog.jsonb_set", ServerSideOnly=true)]
		public static string JsonbSet(string jsonb_in, object path, string replacement, bool? create_if_missing)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbStripNulls

		[Sql.Function(Name="pg_catalog.jsonb_strip_nulls", ServerSideOnly=true)]
		public static string JsonbStripNulls(string par3634)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbToRecord

		[Sql.Function(Name="pg_catalog.jsonb_to_record", ServerSideOnly=true)]
		public static object JsonbToRecord(string par3635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbTypeof

		[Sql.Function(Name="pg_catalog.jsonb_typeof", ServerSideOnly=true)]
		public static string JsonbTypeof(string par3638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyDays

		[Sql.Function(Name="pg_catalog.justify_days", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyDays(NpgsqlTimeSpan? par3640)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyHours

		[Sql.Function(Name="pg_catalog.justify_hours", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyHours(NpgsqlTimeSpan? par3642)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyInterval

		[Sql.Function(Name="pg_catalog.justify_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyInterval(NpgsqlTimeSpan? par3644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToIso

		[Sql.Function(Name="pg_catalog.koi8r_to_iso", ServerSideOnly=true)]
		public static object Koi8rToIso(int? par3645, int? par3646, object par3647, object par3648, int? par3649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToMic

		[Sql.Function(Name="pg_catalog.koi8r_to_mic", ServerSideOnly=true)]
		public static object Koi8rToMic(int? par3650, int? par3651, object par3652, object par3653, int? par3654)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToUtf8

		[Sql.Function(Name="pg_catalog.koi8r_to_utf8", ServerSideOnly=true)]
		public static object Koi8rToUtf8(int? par3655, int? par3656, object par3657, object par3658, int? par3659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin1251

		[Sql.Function(Name="pg_catalog.koi8r_to_win1251", ServerSideOnly=true)]
		public static object Koi8rToWin1251(int? par3660, int? par3661, object par3662, object par3663, int? par3664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin866

		[Sql.Function(Name="pg_catalog.koi8r_to_win866", ServerSideOnly=true)]
		public static object Koi8rToWin866(int? par3665, int? par3666, object par3667, object par3668, int? par3669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8uToUtf8

		[Sql.Function(Name="pg_catalog.koi8u_to_utf8", ServerSideOnly=true)]
		public static object Koi8uToUtf8(int? par3670, int? par3671, object par3672, object par3673, int? par3674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lag

		[Sql.Function(Name="pg_catalog.lag", ServerSideOnly=true)]
		public static object Lag(object par3681, int? par3682, object par3683)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerIn

		[Sql.Function(Name="pg_catalog.language_handler_in", ServerSideOnly=true)]
		public static object LanguageHandlerIn(object par3685)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerOut

		[Sql.Function(Name="pg_catalog.language_handler_out", ServerSideOnly=true)]
		public static object LanguageHandlerOut(object par3687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LastValue

		[Sql.Function(Name="pg_catalog.last_value", ServerSideOnly=true)]
		public static object LastValue(object par3689)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lastval

		[Sql.Function(Name="pg_catalog.lastval", ServerSideOnly=true)]
		public static long? Lastval()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin1ToMic

		[Sql.Function(Name="pg_catalog.latin1_to_mic", ServerSideOnly=true)]
		public static object Latin1ToMic(int? par3691, int? par3692, object par3693, object par3694, int? par3695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToMic

		[Sql.Function(Name="pg_catalog.latin2_to_mic", ServerSideOnly=true)]
		public static object Latin2ToMic(int? par3696, int? par3697, object par3698, object par3699, int? par3700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToWin1250

		[Sql.Function(Name="pg_catalog.latin2_to_win1250", ServerSideOnly=true)]
		public static object Latin2ToWin1250(int? par3701, int? par3702, object par3703, object par3704, int? par3705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin3ToMic

		[Sql.Function(Name="pg_catalog.latin3_to_mic", ServerSideOnly=true)]
		public static object Latin3ToMic(int? par3706, int? par3707, object par3708, object par3709, int? par3710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin4ToMic

		[Sql.Function(Name="pg_catalog.latin4_to_mic", ServerSideOnly=true)]
		public static object Latin4ToMic(int? par3711, int? par3712, object par3713, object par3714, int? par3715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lead

		[Sql.Function(Name="pg_catalog.lead", ServerSideOnly=true)]
		public static object Lead(object par3722, int? par3723, object par3724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Left

		[Sql.Function(Name="pg_catalog.left", ServerSideOnly=true)]
		public static string Left(string par3726, int? par3727)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Length

		[Sql.Function(Name="pg_catalog.length", ServerSideOnly=true)]
		public static int? Length(object par3744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Like

		[Sql.Function(Name="pg_catalog.like", ServerSideOnly=true)]
		public static bool? Like(byte[] par3752, byte[] par3753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LikeEscape

		[Sql.Function(Name="pg_catalog.like_escape", ServerSideOnly=true)]
		public static byte[] LikeEscape(byte[] par3758, byte[] par3759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likejoinsel

		[Sql.Function(Name="pg_catalog.likejoinsel", ServerSideOnly=true)]
		public static double? Likejoinsel(object par3761, int? par3762, object par3763, short? par3764, object par3765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likesel

		[Sql.Function(Name="pg_catalog.likesel", ServerSideOnly=true)]
		public static double? Likesel(object par3767, int? par3768, object par3769, int? par3770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Line

		[Sql.Function(Name="pg_catalog.line", ServerSideOnly=true)]
		public static NpgsqlLine? Line(NpgsqlPoint? par3772, NpgsqlPoint? par3773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineDistance

		[Sql.Function(Name="pg_catalog.line_distance", ServerSideOnly=true)]
		public static double? LineDistance(NpgsqlLine? par3775, NpgsqlLine? par3776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineEq

		[Sql.Function(Name="pg_catalog.line_eq", ServerSideOnly=true)]
		public static bool? LineEq(NpgsqlLine? par3778, NpgsqlLine? par3779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineHorizontal

		[Sql.Function(Name="pg_catalog.line_horizontal", ServerSideOnly=true)]
		public static bool? LineHorizontal(NpgsqlLine? par3781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIn

		[Sql.Function(Name="pg_catalog.line_in", ServerSideOnly=true)]
		public static NpgsqlLine? LineIn(object par3783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineInterpt

		[Sql.Function(Name="pg_catalog.line_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LineInterpt(NpgsqlLine? par3785, NpgsqlLine? par3786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIntersect

		[Sql.Function(Name="pg_catalog.line_intersect", ServerSideOnly=true)]
		public static bool? LineIntersect(NpgsqlLine? par3788, NpgsqlLine? par3789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineOut

		[Sql.Function(Name="pg_catalog.line_out", ServerSideOnly=true)]
		public static object LineOut(NpgsqlLine? par3791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineParallel

		[Sql.Function(Name="pg_catalog.line_parallel", ServerSideOnly=true)]
		public static bool? LineParallel(NpgsqlLine? par3793, NpgsqlLine? par3794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LinePerp

		[Sql.Function(Name="pg_catalog.line_perp", ServerSideOnly=true)]
		public static bool? LinePerp(NpgsqlLine? par3796, NpgsqlLine? par3797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineRecv

		[Sql.Function(Name="pg_catalog.line_recv", ServerSideOnly=true)]
		public static NpgsqlLine? LineRecv(object par3799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineSend

		[Sql.Function(Name="pg_catalog.line_send", ServerSideOnly=true)]
		public static byte[] LineSend(NpgsqlLine? par3801)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineVertical

		[Sql.Function(Name="pg_catalog.line_vertical", ServerSideOnly=true)]
		public static bool? LineVertical(NpgsqlLine? par3803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ln

		[Sql.Function(Name="pg_catalog.ln", ServerSideOnly=true)]
		public static decimal? Ln(decimal? par3807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoClose

		[Sql.Function(Name="pg_catalog.lo_close", ServerSideOnly=true)]
		public static int? LoClose(int? par3809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreat

		[Sql.Function(Name="pg_catalog.lo_creat", ServerSideOnly=true)]
		public static int? LoCreat(int? par3811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreate

		[Sql.Function(Name="pg_catalog.lo_create", ServerSideOnly=true)]
		public static int? LoCreate(int? par3813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoExport

		[Sql.Function(Name="pg_catalog.lo_export", ServerSideOnly=true)]
		public static int? LoExport(int? par3815, string par3816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoFromBytea

		[Sql.Function(Name="pg_catalog.lo_from_bytea", ServerSideOnly=true)]
		public static int? LoFromBytea(int? par3818, byte[] par3819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoGet

		[Sql.Function(Name="pg_catalog.lo_get", ServerSideOnly=true)]
		public static byte[] LoGet(int? par3823, long? par3824, int? par3825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoImport

		[Sql.Function(Name="pg_catalog.lo_import", ServerSideOnly=true)]
		public static int? LoImport(string par3829, int? par3830)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek

		[Sql.Function(Name="pg_catalog.lo_lseek", ServerSideOnly=true)]
		public static int? LoLseek(int? par3832, int? par3833, int? par3834)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek64

		[Sql.Function(Name="pg_catalog.lo_lseek64", ServerSideOnly=true)]
		public static long? LoLseek64(int? par3836, long? par3837, int? par3838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoOpen

		[Sql.Function(Name="pg_catalog.lo_open", ServerSideOnly=true)]
		public static int? LoOpen(int? par3840, int? par3841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoPut

		[Sql.Function(Name="pg_catalog.lo_put", ServerSideOnly=true)]
		public static object LoPut(int? par3842, long? par3843, byte[] par3844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell

		[Sql.Function(Name="pg_catalog.lo_tell", ServerSideOnly=true)]
		public static int? LoTell(int? par3846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell64

		[Sql.Function(Name="pg_catalog.lo_tell64", ServerSideOnly=true)]
		public static long? LoTell64(int? par3848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate

		[Sql.Function(Name="pg_catalog.lo_truncate", ServerSideOnly=true)]
		public static int? LoTruncate(int? par3850, int? par3851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate64

		[Sql.Function(Name="pg_catalog.lo_truncate64", ServerSideOnly=true)]
		public static int? LoTruncate64(int? par3853, long? par3854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoUnlink

		[Sql.Function(Name="pg_catalog.lo_unlink", ServerSideOnly=true)]
		public static int? LoUnlink(int? par3856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Log

		[Sql.Function(Name="pg_catalog.log", ServerSideOnly=true)]
		public static decimal? Log(decimal? par3863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Loread

		[Sql.Function(Name="pg_catalog.loread", ServerSideOnly=true)]
		public static byte[] Loread(int? par3865, int? par3866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lower

		[Sql.Function(Name="pg_catalog.lower", ServerSideOnly=true)]
		public static string Lower(string par3870)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInc

		[Sql.Function(Name="pg_catalog.lower_inc", ServerSideOnly=true)]
		public static bool? LowerInc(object par3872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInf

		[Sql.Function(Name="pg_catalog.lower_inf", ServerSideOnly=true)]
		public static bool? LowerInf(object par3874)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lowrite

		[Sql.Function(Name="pg_catalog.lowrite", ServerSideOnly=true)]
		public static int? Lowrite(int? par3876, byte[] par3877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lpad

		[Sql.Function(Name="pg_catalog.lpad", ServerSideOnly=true)]
		public static string Lpad(string par3883, int? par3884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lseg

		[Sql.Function(Name="pg_catalog.lseg", ServerSideOnly=true)]
		public static NpgsqlLSeg? Lseg(NpgsqlPoint? par3888, NpgsqlPoint? par3889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegCenter

		[Sql.Function(Name="pg_catalog.lseg_center", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegCenter(NpgsqlLSeg? par3891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegDistance

		[Sql.Function(Name="pg_catalog.lseg_distance", ServerSideOnly=true)]
		public static double? LsegDistance(NpgsqlLSeg? par3893, NpgsqlLSeg? par3894)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegEq

		[Sql.Function(Name="pg_catalog.lseg_eq", ServerSideOnly=true)]
		public static bool? LsegEq(NpgsqlLSeg? par3896, NpgsqlLSeg? par3897)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGe

		[Sql.Function(Name="pg_catalog.lseg_ge", ServerSideOnly=true)]
		public static bool? LsegGe(NpgsqlLSeg? par3899, NpgsqlLSeg? par3900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGt

		[Sql.Function(Name="pg_catalog.lseg_gt", ServerSideOnly=true)]
		public static bool? LsegGt(NpgsqlLSeg? par3902, NpgsqlLSeg? par3903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegHorizontal

		[Sql.Function(Name="pg_catalog.lseg_horizontal", ServerSideOnly=true)]
		public static bool? LsegHorizontal(NpgsqlLSeg? par3905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIn

		[Sql.Function(Name="pg_catalog.lseg_in", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegIn(object par3907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegInterpt

		[Sql.Function(Name="pg_catalog.lseg_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegInterpt(NpgsqlLSeg? par3909, NpgsqlLSeg? par3910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIntersect

		[Sql.Function(Name="pg_catalog.lseg_intersect", ServerSideOnly=true)]
		public static bool? LsegIntersect(NpgsqlLSeg? par3912, NpgsqlLSeg? par3913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLe

		[Sql.Function(Name="pg_catalog.lseg_le", ServerSideOnly=true)]
		public static bool? LsegLe(NpgsqlLSeg? par3915, NpgsqlLSeg? par3916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLength

		[Sql.Function(Name="pg_catalog.lseg_length", ServerSideOnly=true)]
		public static double? LsegLength(NpgsqlLSeg? par3918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLt

		[Sql.Function(Name="pg_catalog.lseg_lt", ServerSideOnly=true)]
		public static bool? LsegLt(NpgsqlLSeg? par3920, NpgsqlLSeg? par3921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegNe

		[Sql.Function(Name="pg_catalog.lseg_ne", ServerSideOnly=true)]
		public static bool? LsegNe(NpgsqlLSeg? par3923, NpgsqlLSeg? par3924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegOut

		[Sql.Function(Name="pg_catalog.lseg_out", ServerSideOnly=true)]
		public static object LsegOut(NpgsqlLSeg? par3926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegParallel

		[Sql.Function(Name="pg_catalog.lseg_parallel", ServerSideOnly=true)]
		public static bool? LsegParallel(NpgsqlLSeg? par3928, NpgsqlLSeg? par3929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegPerp

		[Sql.Function(Name="pg_catalog.lseg_perp", ServerSideOnly=true)]
		public static bool? LsegPerp(NpgsqlLSeg? par3931, NpgsqlLSeg? par3932)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegRecv

		[Sql.Function(Name="pg_catalog.lseg_recv", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegRecv(object par3934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegSend

		[Sql.Function(Name="pg_catalog.lseg_send", ServerSideOnly=true)]
		public static byte[] LsegSend(NpgsqlLSeg? par3936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegVertical

		[Sql.Function(Name="pg_catalog.lseg_vertical", ServerSideOnly=true)]
		public static bool? LsegVertical(NpgsqlLSeg? par3938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ltrim

		[Sql.Function(Name="pg_catalog.ltrim", ServerSideOnly=true)]
		public static string Ltrim(string par3943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrAnd

		[Sql.Function(Name="pg_catalog.macaddr_and", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrAnd(PhysicalAddress par3945, PhysicalAddress par3946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrCmp

		[Sql.Function(Name="pg_catalog.macaddr_cmp", ServerSideOnly=true)]
		public static int? MacaddrCmp(PhysicalAddress par3948, PhysicalAddress par3949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrEq

		[Sql.Function(Name="pg_catalog.macaddr_eq", ServerSideOnly=true)]
		public static bool? MacaddrEq(PhysicalAddress par3951, PhysicalAddress par3952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGe

		[Sql.Function(Name="pg_catalog.macaddr_ge", ServerSideOnly=true)]
		public static bool? MacaddrGe(PhysicalAddress par3954, PhysicalAddress par3955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGt

		[Sql.Function(Name="pg_catalog.macaddr_gt", ServerSideOnly=true)]
		public static bool? MacaddrGt(PhysicalAddress par3957, PhysicalAddress par3958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrIn

		[Sql.Function(Name="pg_catalog.macaddr_in", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrIn(object par3960)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLe

		[Sql.Function(Name="pg_catalog.macaddr_le", ServerSideOnly=true)]
		public static bool? MacaddrLe(PhysicalAddress par3962, PhysicalAddress par3963)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLt

		[Sql.Function(Name="pg_catalog.macaddr_lt", ServerSideOnly=true)]
		public static bool? MacaddrLt(PhysicalAddress par3965, PhysicalAddress par3966)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNe

		[Sql.Function(Name="pg_catalog.macaddr_ne", ServerSideOnly=true)]
		public static bool? MacaddrNe(PhysicalAddress par3968, PhysicalAddress par3969)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNot

		[Sql.Function(Name="pg_catalog.macaddr_not", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrNot(PhysicalAddress par3971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOr

		[Sql.Function(Name="pg_catalog.macaddr_or", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrOr(PhysicalAddress par3973, PhysicalAddress par3974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOut

		[Sql.Function(Name="pg_catalog.macaddr_out", ServerSideOnly=true)]
		public static object MacaddrOut(PhysicalAddress par3976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrRecv

		[Sql.Function(Name="pg_catalog.macaddr_recv", ServerSideOnly=true)]
		public static PhysicalAddress MacaddrRecv(object par3978)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrSend

		[Sql.Function(Name="pg_catalog.macaddr_send", ServerSideOnly=true)]
		public static byte[] MacaddrSend(PhysicalAddress par3980)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeDate

		[Sql.Function(Name="pg_catalog.make_date", ServerSideOnly=true)]
		public static NpgsqlDate? MakeDate(int? year, int? month, int? day)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeInterval

		[Sql.Function(Name="pg_catalog.make_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MakeInterval(int? years, int? months, int? weeks, int? days, int? hours, int? mins, double? secs)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTime

		[Sql.Function(Name="pg_catalog.make_time", ServerSideOnly=true)]
		public static TimeSpan? MakeTime(int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamp

		[Sql.Function(Name="pg_catalog.make_timestamp", ServerSideOnly=true)]
		public static DateTime? MakeTimestamp(int? year, int? month, int? mday, int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamptz

		[Sql.Function(Name="pg_catalog.make_timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? MakeTimestamptz(int? year, int? month, int? mday, int? hour, int? min, double? sec, string timezone)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Makeaclitem

		[Sql.Function(Name="pg_catalog.makeaclitem", ServerSideOnly=true)]
		public static object Makeaclitem(int? par3988, int? par3989, string par3990, bool? par3991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Masklen

		[Sql.Function(Name="pg_catalog.masklen", ServerSideOnly=true)]
		public static int? Masklen(NpgsqlInet? par3993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Max

		[Sql.Function(Name="pg_catalog.max", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Max<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4035)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Md5

		[Sql.Function(Name="pg_catalog.md5", ServerSideOnly=true)]
		public static string Md5(byte[] par4039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToAscii

		[Sql.Function(Name="pg_catalog.mic_to_ascii", ServerSideOnly=true)]
		public static object MicToAscii(int? par4040, int? par4041, object par4042, object par4043, int? par4044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToBig5

		[Sql.Function(Name="pg_catalog.mic_to_big5", ServerSideOnly=true)]
		public static object MicToBig5(int? par4045, int? par4046, object par4047, object par4048, int? par4049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucCn

		[Sql.Function(Name="pg_catalog.mic_to_euc_cn", ServerSideOnly=true)]
		public static object MicToEucCn(int? par4050, int? par4051, object par4052, object par4053, int? par4054)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucJp

		[Sql.Function(Name="pg_catalog.mic_to_euc_jp", ServerSideOnly=true)]
		public static object MicToEucJp(int? par4055, int? par4056, object par4057, object par4058, int? par4059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucKr

		[Sql.Function(Name="pg_catalog.mic_to_euc_kr", ServerSideOnly=true)]
		public static object MicToEucKr(int? par4060, int? par4061, object par4062, object par4063, int? par4064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucTw

		[Sql.Function(Name="pg_catalog.mic_to_euc_tw", ServerSideOnly=true)]
		public static object MicToEucTw(int? par4065, int? par4066, object par4067, object par4068, int? par4069)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToIso

		[Sql.Function(Name="pg_catalog.mic_to_iso", ServerSideOnly=true)]
		public static object MicToIso(int? par4070, int? par4071, object par4072, object par4073, int? par4074)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToKoi8r

		[Sql.Function(Name="pg_catalog.mic_to_koi8r", ServerSideOnly=true)]
		public static object MicToKoi8r(int? par4075, int? par4076, object par4077, object par4078, int? par4079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin1

		[Sql.Function(Name="pg_catalog.mic_to_latin1", ServerSideOnly=true)]
		public static object MicToLatin1(int? par4080, int? par4081, object par4082, object par4083, int? par4084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin2

		[Sql.Function(Name="pg_catalog.mic_to_latin2", ServerSideOnly=true)]
		public static object MicToLatin2(int? par4085, int? par4086, object par4087, object par4088, int? par4089)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin3

		[Sql.Function(Name="pg_catalog.mic_to_latin3", ServerSideOnly=true)]
		public static object MicToLatin3(int? par4090, int? par4091, object par4092, object par4093, int? par4094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin4

		[Sql.Function(Name="pg_catalog.mic_to_latin4", ServerSideOnly=true)]
		public static object MicToLatin4(int? par4095, int? par4096, object par4097, object par4098, int? par4099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToSjis

		[Sql.Function(Name="pg_catalog.mic_to_sjis", ServerSideOnly=true)]
		public static object MicToSjis(int? par4100, int? par4101, object par4102, object par4103, int? par4104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1250

		[Sql.Function(Name="pg_catalog.mic_to_win1250", ServerSideOnly=true)]
		public static object MicToWin1250(int? par4105, int? par4106, object par4107, object par4108, int? par4109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1251

		[Sql.Function(Name="pg_catalog.mic_to_win1251", ServerSideOnly=true)]
		public static object MicToWin1251(int? par4110, int? par4111, object par4112, object par4113, int? par4114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin866

		[Sql.Function(Name="pg_catalog.mic_to_win866", ServerSideOnly=true)]
		public static object MicToWin866(int? par4115, int? par4116, object par4117, object par4118, int? par4119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Min

		[Sql.Function(Name="pg_catalog.min", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Min<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mktinterval

		[Sql.Function(Name="pg_catalog.mktinterval", ServerSideOnly=true)]
		public static object Mktinterval(object par4163, object par4164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mod

		[Sql.Function(Name="pg_catalog.mod", ServerSideOnly=true)]
		public static long? Mod(long? par4175, long? par4176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mode

		[Sql.Function(Name="pg_catalog.mode", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object Mode<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ModeFinal

		[Sql.Function(Name="pg_catalog.mode_final", ServerSideOnly=true)]
		public static object ModeFinal(object par4180, object par4181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Money

		[Sql.Function(Name="pg_catalog.money", ServerSideOnly=true)]
		public static decimal? Money(decimal? par4187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MulDInterval

		[Sql.Function(Name="pg_catalog.mul_d_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MulDInterval(double? par4189, NpgsqlTimeSpan? par4190)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MxidAge

		[Sql.Function(Name="pg_catalog.mxid_age", ServerSideOnly=true)]
		public static int? MxidAge(int? par4192)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Name

		[Sql.Function(Name="pg_catalog.name", ServerSideOnly=true)]
		public static string Name(string par4198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameeq

		[Sql.Function(Name="pg_catalog.nameeq", ServerSideOnly=true)]
		public static bool? Nameeq(string par4200, string par4201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namege

		[Sql.Function(Name="pg_catalog.namege", ServerSideOnly=true)]
		public static bool? Namege(string par4203, string par4204)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namegt

		[Sql.Function(Name="pg_catalog.namegt", ServerSideOnly=true)]
		public static bool? Namegt(string par4206, string par4207)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameiclike

		[Sql.Function(Name="pg_catalog.nameiclike", ServerSideOnly=true)]
		public static bool? Nameiclike(string par4209, string par4210)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicnlike

		[Sql.Function(Name="pg_catalog.nameicnlike", ServerSideOnly=true)]
		public static bool? Nameicnlike(string par4212, string par4213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexeq

		[Sql.Function(Name="pg_catalog.nameicregexeq", ServerSideOnly=true)]
		public static bool? Nameicregexeq(string par4215, string par4216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexne

		[Sql.Function(Name="pg_catalog.nameicregexne", ServerSideOnly=true)]
		public static bool? Nameicregexne(string par4218, string par4219)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namein

		[Sql.Function(Name="pg_catalog.namein", ServerSideOnly=true)]
		public static string Namein(object par4221)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namele

		[Sql.Function(Name="pg_catalog.namele", ServerSideOnly=true)]
		public static bool? Namele(string par4223, string par4224)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelike

		[Sql.Function(Name="pg_catalog.namelike", ServerSideOnly=true)]
		public static bool? Namelike(string par4226, string par4227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelt

		[Sql.Function(Name="pg_catalog.namelt", ServerSideOnly=true)]
		public static bool? Namelt(string par4229, string par4230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namene

		[Sql.Function(Name="pg_catalog.namene", ServerSideOnly=true)]
		public static bool? Namene(string par4232, string par4233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namenlike

		[Sql.Function(Name="pg_catalog.namenlike", ServerSideOnly=true)]
		public static bool? Namenlike(string par4235, string par4236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameout

		[Sql.Function(Name="pg_catalog.nameout", ServerSideOnly=true)]
		public static object Nameout(string par4238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namerecv

		[Sql.Function(Name="pg_catalog.namerecv", ServerSideOnly=true)]
		public static string Namerecv(object par4240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexeq

		[Sql.Function(Name="pg_catalog.nameregexeq", ServerSideOnly=true)]
		public static bool? Nameregexeq(string par4242, string par4243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexne

		[Sql.Function(Name="pg_catalog.nameregexne", ServerSideOnly=true)]
		public static bool? Nameregexne(string par4245, string par4246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namesend

		[Sql.Function(Name="pg_catalog.namesend", ServerSideOnly=true)]
		public static byte[] Namesend(string par4248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqjoinsel

		[Sql.Function(Name="pg_catalog.neqjoinsel", ServerSideOnly=true)]
		public static double? Neqjoinsel(object par4250, int? par4251, object par4252, short? par4253, object par4254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqsel

		[Sql.Function(Name="pg_catalog.neqsel", ServerSideOnly=true)]
		public static double? Neqsel(object par4256, int? par4257, object par4258, int? par4259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Netmask

		[Sql.Function(Name="pg_catalog.netmask", ServerSideOnly=true)]
		public static NpgsqlInet? Netmask(NpgsqlInet? par4261)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Network

		[Sql.Function(Name="pg_catalog.network", ServerSideOnly=true)]
		public static NpgsqlInet? Network(NpgsqlInet? par4263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkCmp

		[Sql.Function(Name="pg_catalog.network_cmp", ServerSideOnly=true)]
		public static int? NetworkCmp(NpgsqlInet? par4265, NpgsqlInet? par4266)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkEq

		[Sql.Function(Name="pg_catalog.network_eq", ServerSideOnly=true)]
		public static bool? NetworkEq(NpgsqlInet? par4268, NpgsqlInet? par4269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGe

		[Sql.Function(Name="pg_catalog.network_ge", ServerSideOnly=true)]
		public static bool? NetworkGe(NpgsqlInet? par4271, NpgsqlInet? par4272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGt

		[Sql.Function(Name="pg_catalog.network_gt", ServerSideOnly=true)]
		public static bool? NetworkGt(NpgsqlInet? par4274, NpgsqlInet? par4275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLarger

		[Sql.Function(Name="pg_catalog.network_larger", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkLarger(NpgsqlInet? par4277, NpgsqlInet? par4278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLe

		[Sql.Function(Name="pg_catalog.network_le", ServerSideOnly=true)]
		public static bool? NetworkLe(NpgsqlInet? par4280, NpgsqlInet? par4281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLt

		[Sql.Function(Name="pg_catalog.network_lt", ServerSideOnly=true)]
		public static bool? NetworkLt(NpgsqlInet? par4283, NpgsqlInet? par4284)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkNe

		[Sql.Function(Name="pg_catalog.network_ne", ServerSideOnly=true)]
		public static bool? NetworkNe(NpgsqlInet? par4286, NpgsqlInet? par4287)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkOverlap

		[Sql.Function(Name="pg_catalog.network_overlap", ServerSideOnly=true)]
		public static bool? NetworkOverlap(NpgsqlInet? par4289, NpgsqlInet? par4290)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSmaller

		[Sql.Function(Name="pg_catalog.network_smaller", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkSmaller(NpgsqlInet? par4292, NpgsqlInet? par4293)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSub

		[Sql.Function(Name="pg_catalog.network_sub", ServerSideOnly=true)]
		public static bool? NetworkSub(NpgsqlInet? par4295, NpgsqlInet? par4296)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSubeq

		[Sql.Function(Name="pg_catalog.network_subeq", ServerSideOnly=true)]
		public static bool? NetworkSubeq(NpgsqlInet? par4298, NpgsqlInet? par4299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSup

		[Sql.Function(Name="pg_catalog.network_sup", ServerSideOnly=true)]
		public static bool? NetworkSup(NpgsqlInet? par4301, NpgsqlInet? par4302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSupeq

		[Sql.Function(Name="pg_catalog.network_supeq", ServerSideOnly=true)]
		public static bool? NetworkSupeq(NpgsqlInet? par4304, NpgsqlInet? par4305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networkjoinsel

		[Sql.Function(Name="pg_catalog.networkjoinsel", ServerSideOnly=true)]
		public static double? Networkjoinsel(object par4307, int? par4308, object par4309, short? par4310, object par4311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networksel

		[Sql.Function(Name="pg_catalog.networksel", ServerSideOnly=true)]
		public static double? Networksel(object par4313, int? par4314, object par4315, int? par4316)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nextval

		[Sql.Function(Name="pg_catalog.nextval", ServerSideOnly=true)]
		public static long? Nextval(object par4318)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikejoinsel

		[Sql.Function(Name="pg_catalog.nlikejoinsel", ServerSideOnly=true)]
		public static double? Nlikejoinsel(object par4320, int? par4321, object par4322, short? par4323, object par4324)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikesel

		[Sql.Function(Name="pg_catalog.nlikesel", ServerSideOnly=true)]
		public static double? Nlikesel(object par4326, int? par4327, object par4328, int? par4329)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Notlike

		[Sql.Function(Name="pg_catalog.notlike", ServerSideOnly=true)]
		public static bool? Notlike(byte[] par4337, byte[] par4338)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Now

		[Sql.Function(Name="pg_catalog.now", ServerSideOnly=true)]
		public static DateTimeOffset? Now()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Npoints

		[Sql.Function(Name="pg_catalog.npoints", ServerSideOnly=true)]
		public static int? Npoints(NpgsqlPolygon? par4343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NthValue

		[Sql.Function(Name="pg_catalog.nth_value", ServerSideOnly=true)]
		public static object NthValue(object par4345, int? par4346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ntile

		[Sql.Function(Name="pg_catalog.ntile", ServerSideOnly=true)]
		public static int? Ntile(int? par4348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumNonnulls

		[Sql.Function(Name="pg_catalog.num_nonnulls", ServerSideOnly=true)]
		public static int? NumNonnulls(object par4350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumNulls

		[Sql.Function(Name="pg_catalog.num_nulls", ServerSideOnly=true)]
		public static int? NumNulls(object par4352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numeric

		[Sql.Function(Name="pg_catalog.numeric", ServerSideOnly=true)]
		public static decimal? Numeric(decimal? par4367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAbs

		[Sql.Function(Name="pg_catalog.numeric_abs", ServerSideOnly=true)]
		public static decimal? NumericAbs(decimal? par4369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccum

		[Sql.Function(Name="pg_catalog.numeric_accum", ServerSideOnly=true)]
		public static object NumericAccum(object par4371, decimal? par4372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccumInv

		[Sql.Function(Name="pg_catalog.numeric_accum_inv", ServerSideOnly=true)]
		public static object NumericAccumInv(object par4374, decimal? par4375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAdd

		[Sql.Function(Name="pg_catalog.numeric_add", ServerSideOnly=true)]
		public static decimal? NumericAdd(decimal? par4377, decimal? par4378)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvg

		[Sql.Function(Name="pg_catalog.numeric_avg", ServerSideOnly=true)]
		public static decimal? NumericAvg(object par4380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgAccum

		[Sql.Function(Name="pg_catalog.numeric_avg_accum", ServerSideOnly=true)]
		public static object NumericAvgAccum(object par4382, decimal? par4383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgCombine

		[Sql.Function(Name="pg_catalog.numeric_avg_combine", ServerSideOnly=true)]
		public static object NumericAvgCombine(object par4385, object par4386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgDeserialize

		[Sql.Function(Name="pg_catalog.numeric_avg_deserialize", ServerSideOnly=true)]
		public static object NumericAvgDeserialize(byte[] par4388, object par4389)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgSerialize

		[Sql.Function(Name="pg_catalog.numeric_avg_serialize", ServerSideOnly=true)]
		public static byte[] NumericAvgSerialize(object par4391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericCmp

		[Sql.Function(Name="pg_catalog.numeric_cmp", ServerSideOnly=true)]
		public static int? NumericCmp(decimal? par4393, decimal? par4394)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericCombine

		[Sql.Function(Name="pg_catalog.numeric_combine", ServerSideOnly=true)]
		public static object NumericCombine(object par4396, object par4397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDeserialize

		[Sql.Function(Name="pg_catalog.numeric_deserialize", ServerSideOnly=true)]
		public static object NumericDeserialize(byte[] par4399, object par4400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDiv

		[Sql.Function(Name="pg_catalog.numeric_div", ServerSideOnly=true)]
		public static decimal? NumericDiv(decimal? par4402, decimal? par4403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDivTrunc

		[Sql.Function(Name="pg_catalog.numeric_div_trunc", ServerSideOnly=true)]
		public static decimal? NumericDivTrunc(decimal? par4405, decimal? par4406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericEq

		[Sql.Function(Name="pg_catalog.numeric_eq", ServerSideOnly=true)]
		public static bool? NumericEq(decimal? par4408, decimal? par4409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericExp

		[Sql.Function(Name="pg_catalog.numeric_exp", ServerSideOnly=true)]
		public static decimal? NumericExp(decimal? par4411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericFac

		[Sql.Function(Name="pg_catalog.numeric_fac", ServerSideOnly=true)]
		public static decimal? NumericFac(long? par4413)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGe

		[Sql.Function(Name="pg_catalog.numeric_ge", ServerSideOnly=true)]
		public static bool? NumericGe(decimal? par4415, decimal? par4416)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGt

		[Sql.Function(Name="pg_catalog.numeric_gt", ServerSideOnly=true)]
		public static bool? NumericGt(decimal? par4418, decimal? par4419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericIn

		[Sql.Function(Name="pg_catalog.numeric_in", ServerSideOnly=true)]
		public static decimal? NumericIn(object par4421, int? par4422, int? par4423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericInc

		[Sql.Function(Name="pg_catalog.numeric_inc", ServerSideOnly=true)]
		public static decimal? NumericInc(decimal? par4425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLarger

		[Sql.Function(Name="pg_catalog.numeric_larger", ServerSideOnly=true)]
		public static decimal? NumericLarger(decimal? par4427, decimal? par4428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLe

		[Sql.Function(Name="pg_catalog.numeric_le", ServerSideOnly=true)]
		public static bool? NumericLe(decimal? par4430, decimal? par4431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLn

		[Sql.Function(Name="pg_catalog.numeric_ln", ServerSideOnly=true)]
		public static decimal? NumericLn(decimal? par4433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLog

		[Sql.Function(Name="pg_catalog.numeric_log", ServerSideOnly=true)]
		public static decimal? NumericLog(decimal? par4435, decimal? par4436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLt

		[Sql.Function(Name="pg_catalog.numeric_lt", ServerSideOnly=true)]
		public static bool? NumericLt(decimal? par4438, decimal? par4439)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMod

		[Sql.Function(Name="pg_catalog.numeric_mod", ServerSideOnly=true)]
		public static decimal? NumericMod(decimal? par4441, decimal? par4442)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMul

		[Sql.Function(Name="pg_catalog.numeric_mul", ServerSideOnly=true)]
		public static decimal? NumericMul(decimal? par4444, decimal? par4445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericNe

		[Sql.Function(Name="pg_catalog.numeric_ne", ServerSideOnly=true)]
		public static bool? NumericNe(decimal? par4447, decimal? par4448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericOut

		[Sql.Function(Name="pg_catalog.numeric_out", ServerSideOnly=true)]
		public static object NumericOut(decimal? par4450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyAvg

		[Sql.Function(Name="pg_catalog.numeric_poly_avg", ServerSideOnly=true)]
		public static decimal? NumericPolyAvg(object par4452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyCombine

		[Sql.Function(Name="pg_catalog.numeric_poly_combine", ServerSideOnly=true)]
		public static object NumericPolyCombine(object par4454, object par4455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyDeserialize

		[Sql.Function(Name="pg_catalog.numeric_poly_deserialize", ServerSideOnly=true)]
		public static object NumericPolyDeserialize(byte[] par4457, object par4458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolySerialize

		[Sql.Function(Name="pg_catalog.numeric_poly_serialize", ServerSideOnly=true)]
		public static byte[] NumericPolySerialize(object par4460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevPop

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevPop(object par4462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevSamp(object par4464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolySum

		[Sql.Function(Name="pg_catalog.numeric_poly_sum", ServerSideOnly=true)]
		public static decimal? NumericPolySum(object par4466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarPop

		[Sql.Function(Name="pg_catalog.numeric_poly_var_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyVarPop(object par4468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_var_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyVarSamp(object par4470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPower

		[Sql.Function(Name="pg_catalog.numeric_power", ServerSideOnly=true)]
		public static decimal? NumericPower(decimal? par4472, decimal? par4473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericRecv

		[Sql.Function(Name="pg_catalog.numeric_recv", ServerSideOnly=true)]
		public static decimal? NumericRecv(object par4475, int? par4476, int? par4477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSend

		[Sql.Function(Name="pg_catalog.numeric_send", ServerSideOnly=true)]
		public static byte[] NumericSend(decimal? par4479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSerialize

		[Sql.Function(Name="pg_catalog.numeric_serialize", ServerSideOnly=true)]
		public static byte[] NumericSerialize(object par4481)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSmaller

		[Sql.Function(Name="pg_catalog.numeric_smaller", ServerSideOnly=true)]
		public static decimal? NumericSmaller(decimal? par4483, decimal? par4484)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSortsupport

		[Sql.Function(Name="pg_catalog.numeric_sortsupport", ServerSideOnly=true)]
		public static object NumericSortsupport(object par4485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSqrt

		[Sql.Function(Name="pg_catalog.numeric_sqrt", ServerSideOnly=true)]
		public static decimal? NumericSqrt(decimal? par4487)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevPop

		[Sql.Function(Name="pg_catalog.numeric_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericStddevPop(object par4489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericStddevSamp(object par4491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSub

		[Sql.Function(Name="pg_catalog.numeric_sub", ServerSideOnly=true)]
		public static decimal? NumericSub(decimal? par4493, decimal? par4494)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSum

		[Sql.Function(Name="pg_catalog.numeric_sum", ServerSideOnly=true)]
		public static decimal? NumericSum(object par4496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericTransform

		[Sql.Function(Name="pg_catalog.numeric_transform", ServerSideOnly=true)]
		public static object NumericTransform(object par4498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUminus

		[Sql.Function(Name="pg_catalog.numeric_uminus", ServerSideOnly=true)]
		public static decimal? NumericUminus(decimal? par4500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUplus

		[Sql.Function(Name="pg_catalog.numeric_uplus", ServerSideOnly=true)]
		public static decimal? NumericUplus(decimal? par4502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarPop

		[Sql.Function(Name="pg_catalog.numeric_var_pop", ServerSideOnly=true)]
		public static decimal? NumericVarPop(object par4504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarSamp

		[Sql.Function(Name="pg_catalog.numeric_var_samp", ServerSideOnly=true)]
		public static decimal? NumericVarSamp(object par4506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodin

		[Sql.Function(Name="pg_catalog.numerictypmodin", ServerSideOnly=true)]
		public static int? Numerictypmodin(object par4508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodout

		[Sql.Function(Name="pg_catalog.numerictypmodout", ServerSideOnly=true)]
		public static object Numerictypmodout(int? par4510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numnode

		[Sql.Function(Name="pg_catalog.numnode", ServerSideOnly=true)]
		public static int? Numnode(object par4512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numrange

		[Sql.Function(Name="pg_catalog.numrange", ServerSideOnly=true)]
		public static object Numrange(decimal? par4517, decimal? par4518, string par4519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumrangeSubdiff

		[Sql.Function(Name="pg_catalog.numrange_subdiff", ServerSideOnly=true)]
		public static double? NumrangeSubdiff(decimal? par4521, decimal? par4522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ObjDescription

		[Sql.Function(Name="pg_catalog.obj_description", ServerSideOnly=true)]
		public static string ObjDescription(int? par4527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OctetLength

		[Sql.Function(Name="pg_catalog.octet_length", ServerSideOnly=true)]
		public static int? OctetLength(byte[] par4535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oid

		[Sql.Function(Name="pg_catalog.oid", ServerSideOnly=true)]
		public static int? Oid(long? par4537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oideq

		[Sql.Function(Name="pg_catalog.oideq", ServerSideOnly=true)]
		public static bool? Oideq(int? par4539, int? par4540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidge

		[Sql.Function(Name="pg_catalog.oidge", ServerSideOnly=true)]
		public static bool? Oidge(int? par4542, int? par4543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidgt

		[Sql.Function(Name="pg_catalog.oidgt", ServerSideOnly=true)]
		public static bool? Oidgt(int? par4545, int? par4546)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidin

		[Sql.Function(Name="pg_catalog.oidin", ServerSideOnly=true)]
		public static int? Oidin(object par4548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlarger

		[Sql.Function(Name="pg_catalog.oidlarger", ServerSideOnly=true)]
		public static int? Oidlarger(int? par4550, int? par4551)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidle

		[Sql.Function(Name="pg_catalog.oidle", ServerSideOnly=true)]
		public static bool? Oidle(int? par4553, int? par4554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlt

		[Sql.Function(Name="pg_catalog.oidlt", ServerSideOnly=true)]
		public static bool? Oidlt(int? par4556, int? par4557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidne

		[Sql.Function(Name="pg_catalog.oidne", ServerSideOnly=true)]
		public static bool? Oidne(int? par4559, int? par4560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidout

		[Sql.Function(Name="pg_catalog.oidout", ServerSideOnly=true)]
		public static object Oidout(int? par4562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidrecv

		[Sql.Function(Name="pg_catalog.oidrecv", ServerSideOnly=true)]
		public static int? Oidrecv(object par4564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsend

		[Sql.Function(Name="pg_catalog.oidsend", ServerSideOnly=true)]
		public static byte[] Oidsend(int? par4566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsmaller

		[Sql.Function(Name="pg_catalog.oidsmaller", ServerSideOnly=true)]
		public static int? Oidsmaller(int? par4568, int? par4569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectoreq

		[Sql.Function(Name="pg_catalog.oidvectoreq", ServerSideOnly=true)]
		public static bool? Oidvectoreq(object par4571, object par4572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorge

		[Sql.Function(Name="pg_catalog.oidvectorge", ServerSideOnly=true)]
		public static bool? Oidvectorge(object par4574, object par4575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorgt

		[Sql.Function(Name="pg_catalog.oidvectorgt", ServerSideOnly=true)]
		public static bool? Oidvectorgt(object par4577, object par4578)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorin

		[Sql.Function(Name="pg_catalog.oidvectorin", ServerSideOnly=true)]
		public static object Oidvectorin(object par4580)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorle

		[Sql.Function(Name="pg_catalog.oidvectorle", ServerSideOnly=true)]
		public static bool? Oidvectorle(object par4582, object par4583)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorlt

		[Sql.Function(Name="pg_catalog.oidvectorlt", ServerSideOnly=true)]
		public static bool? Oidvectorlt(object par4585, object par4586)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorne

		[Sql.Function(Name="pg_catalog.oidvectorne", ServerSideOnly=true)]
		public static bool? Oidvectorne(object par4588, object par4589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorout

		[Sql.Function(Name="pg_catalog.oidvectorout", ServerSideOnly=true)]
		public static object Oidvectorout(object par4591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorrecv

		[Sql.Function(Name="pg_catalog.oidvectorrecv", ServerSideOnly=true)]
		public static object Oidvectorrecv(object par4593)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorsend

		[Sql.Function(Name="pg_catalog.oidvectorsend", ServerSideOnly=true)]
		public static byte[] Oidvectorsend(object par4595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectortypes

		[Sql.Function(Name="pg_catalog.oidvectortypes", ServerSideOnly=true)]
		public static string Oidvectortypes(object par4597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPb

		[Sql.Function(Name="pg_catalog.on_pb", ServerSideOnly=true)]
		public static bool? OnPb(NpgsqlPoint? par4599, NpgsqlBox? par4600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPl

		[Sql.Function(Name="pg_catalog.on_pl", ServerSideOnly=true)]
		public static bool? OnPl(NpgsqlPoint? par4602, NpgsqlLine? par4603)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPpath

		[Sql.Function(Name="pg_catalog.on_ppath", ServerSideOnly=true)]
		public static bool? OnPpath(NpgsqlPoint? par4605, NpgsqlPath? par4606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPs

		[Sql.Function(Name="pg_catalog.on_ps", ServerSideOnly=true)]
		public static bool? OnPs(NpgsqlPoint? par4608, NpgsqlLSeg? par4609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSb

		[Sql.Function(Name="pg_catalog.on_sb", ServerSideOnly=true)]
		public static bool? OnSb(NpgsqlLSeg? par4611, NpgsqlBox? par4612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSl

		[Sql.Function(Name="pg_catalog.on_sl", ServerSideOnly=true)]
		public static bool? OnSl(NpgsqlLSeg? par4614, NpgsqlLine? par4615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueIn

		[Sql.Function(Name="pg_catalog.opaque_in", ServerSideOnly=true)]
		public static object OpaqueIn(object par4617)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueOut

		[Sql.Function(Name="pg_catalog.opaque_out", ServerSideOnly=true)]
		public static object OpaqueOut(object par4619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransition

		[Sql.Function(Name="pg_catalog.ordered_set_transition", ServerSideOnly=true)]
		public static object OrderedSetTransition(object par4621, object par4622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransitionMulti

		[Sql.Function(Name="pg_catalog.ordered_set_transition_multi", ServerSideOnly=true)]
		public static object OrderedSetTransitionMulti(object par4624, object par4625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlaps

		[Sql.Function(Name="pg_catalog.overlaps", ServerSideOnly=true)]
		public static bool? Overlaps(DateTime? par4687, NpgsqlTimeSpan? par4688, DateTime? par4689, DateTime? par4690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlay

		[Sql.Function(Name="pg_catalog.overlay", ServerSideOnly=true)]
		public static byte[] Overlay(byte[] par4715, byte[] par4716, int? par4717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ParseIdent

		[Sql.Function(Name="pg_catalog.parse_ident", ServerSideOnly=true)]
		public static object ParseIdent(string str, bool? strict)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Path

		[Sql.Function(Name="pg_catalog.path", ServerSideOnly=true)]
		public static NpgsqlPath? Path(NpgsqlPolygon? par4720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAdd

		[Sql.Function(Name="pg_catalog.path_add", ServerSideOnly=true)]
		public static NpgsqlPath? PathAdd(NpgsqlPath? par4722, NpgsqlPath? par4723)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAddPt

		[Sql.Function(Name="pg_catalog.path_add_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathAddPt(NpgsqlPath? par4725, NpgsqlPoint? par4726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathCenter

		[Sql.Function(Name="pg_catalog.path_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PathCenter(NpgsqlPath? par4728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathContainPt

		[Sql.Function(Name="pg_catalog.path_contain_pt", ServerSideOnly=true)]
		public static bool? PathContainPt(NpgsqlPath? par4730, NpgsqlPoint? par4731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDistance

		[Sql.Function(Name="pg_catalog.path_distance", ServerSideOnly=true)]
		public static double? PathDistance(NpgsqlPath? par4733, NpgsqlPath? par4734)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDivPt

		[Sql.Function(Name="pg_catalog.path_div_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathDivPt(NpgsqlPath? par4736, NpgsqlPoint? par4737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathIn

		[Sql.Function(Name="pg_catalog.path_in", ServerSideOnly=true)]
		public static NpgsqlPath? PathIn(object par4739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathInter

		[Sql.Function(Name="pg_catalog.path_inter", ServerSideOnly=true)]
		public static bool? PathInter(NpgsqlPath? par4741, NpgsqlPath? par4742)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathLength

		[Sql.Function(Name="pg_catalog.path_length", ServerSideOnly=true)]
		public static double? PathLength(NpgsqlPath? par4744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathMulPt

		[Sql.Function(Name="pg_catalog.path_mul_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathMulPt(NpgsqlPath? par4746, NpgsqlPoint? par4747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNEq

		[Sql.Function(Name="pg_catalog.path_n_eq", ServerSideOnly=true)]
		public static bool? PathNEq(NpgsqlPath? par4749, NpgsqlPath? par4750)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGe

		[Sql.Function(Name="pg_catalog.path_n_ge", ServerSideOnly=true)]
		public static bool? PathNGe(NpgsqlPath? par4752, NpgsqlPath? par4753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGt

		[Sql.Function(Name="pg_catalog.path_n_gt", ServerSideOnly=true)]
		public static bool? PathNGt(NpgsqlPath? par4755, NpgsqlPath? par4756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLe

		[Sql.Function(Name="pg_catalog.path_n_le", ServerSideOnly=true)]
		public static bool? PathNLe(NpgsqlPath? par4758, NpgsqlPath? par4759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLt

		[Sql.Function(Name="pg_catalog.path_n_lt", ServerSideOnly=true)]
		public static bool? PathNLt(NpgsqlPath? par4761, NpgsqlPath? par4762)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNpoints

		[Sql.Function(Name="pg_catalog.path_npoints", ServerSideOnly=true)]
		public static int? PathNpoints(NpgsqlPath? par4764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathOut

		[Sql.Function(Name="pg_catalog.path_out", ServerSideOnly=true)]
		public static object PathOut(NpgsqlPath? par4766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathRecv

		[Sql.Function(Name="pg_catalog.path_recv", ServerSideOnly=true)]
		public static NpgsqlPath? PathRecv(object par4768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSend

		[Sql.Function(Name="pg_catalog.path_send", ServerSideOnly=true)]
		public static byte[] PathSend(NpgsqlPath? par4770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSubPt

		[Sql.Function(Name="pg_catalog.path_sub_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathSubPt(NpgsqlPath? par4772, NpgsqlPoint? par4773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pclose

		[Sql.Function(Name="pg_catalog.pclose", ServerSideOnly=true)]
		public static NpgsqlPath? Pclose(NpgsqlPath? par4775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRank

		[Sql.Function(Name="pg_catalog.percent_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? PercentRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRankFinal

		[Sql.Function(Name="pg_catalog.percent_rank_final", ServerSideOnly=true)]
		public static double? PercentRankFinal(object par4780, object par4781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileCont

		[Sql.Function(Name="pg_catalog.percentile_cont", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object PercentileCont<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4792, Expression<Func<TSource, NpgsqlTimeSpan?>> par4793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8Final

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_final", ServerSideOnly=true)]
		public static double? PercentileContFloat8Final(object par4795, double? par4796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8MultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_multi_final", ServerSideOnly=true)]
		public static object PercentileContFloat8MultiFinal(object par4798, object par4799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_final", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? PercentileContIntervalFinal(object par4801, double? par4802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_multi_final", ServerSideOnly=true)]
		public static object PercentileContIntervalMultiFinal(object par4804, object par4805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDisc

		[Sql.Function(Name="pg_catalog.percentile_disc", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object PercentileDisc<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par4810, Expression<Func<TSource, object>> par4811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_final", ServerSideOnly=true)]
		public static object PercentileDiscFinal(object par4813, double? par4814, object par4815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_multi_final", ServerSideOnly=true)]
		public static object PercentileDiscMultiFinal(object par4817, object par4818, object par4819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_advisory_lock", ServerSideOnly=true)]
		public static object PgAdvisoryLock(int? par4821, int? par4822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_lock_shared", ServerSideOnly=true)]
		public static object PgAdvisoryLockShared(int? par4824, int? par4825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlock

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlock(int? par4829, int? par4830)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockAll

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_all", ServerSideOnly=true)]
		public static object PgAdvisoryUnlockAll()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_shared", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlockShared(int? par4834, int? par4835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock", ServerSideOnly=true)]
		public static object PgAdvisoryXactLock(int? par4837, int? par4838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static object PgAdvisoryXactLockShared(int? par4840, int? par4841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackendPid

		[Sql.Function(Name="pg_catalog.pg_backend_pid", ServerSideOnly=true)]
		public static int? PgBackendPid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackupStartTime

		[Sql.Function(Name="pg_catalog.pg_backup_start_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgBackupStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBlockingPids

		[Sql.Function(Name="pg_catalog.pg_blocking_pids", ServerSideOnly=true)]
		public static object PgBlockingPids(int? par4845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCancelBackend

		[Sql.Function(Name="pg_catalog.pg_cancel_backend", ServerSideOnly=true)]
		public static bool? PgCancelBackend(int? par4847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharToEncoding

		[Sql.Function(Name="pg_catalog.pg_char_to_encoding", ServerSideOnly=true)]
		public static int? PgCharToEncoding(string par4849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgClientEncoding

		[Sql.Function(Name="pg_catalog.pg_client_encoding", ServerSideOnly=true)]
		public static string PgClientEncoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationFor

		[Sql.Function(Name="pg_catalog.pg_collation_for", ServerSideOnly=true)]
		public static string PgCollationFor(object par4852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationIsVisible

		[Sql.Function(Name="pg_catalog.pg_collation_is_visible", ServerSideOnly=true)]
		public static bool? PgCollationIsVisible(int? par4854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_column_is_updatable", ServerSideOnly=true)]
		public static bool? PgColumnIsUpdatable(object par4856, short? par4857, bool? par4858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnSize

		[Sql.Function(Name="pg_catalog.pg_column_size", ServerSideOnly=true)]
		public static int? PgColumnSize(object par4860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConfLoadTime

		[Sql.Function(Name="pg_catalog.pg_conf_load_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgConfLoadTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlCheckpoint

		[Sql.Function(Name="pg_catalog.pg_control_checkpoint", ServerSideOnly=true)]
		public static pg_control_checkpointResult PgControlCheckpoint()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlInit

		[Sql.Function(Name="pg_catalog.pg_control_init", ServerSideOnly=true)]
		public static pg_control_initResult PgControlInit()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlRecovery

		[Sql.Function(Name="pg_catalog.pg_control_recovery", ServerSideOnly=true)]
		public static pg_control_recoveryResult PgControlRecovery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgControlSystem

		[Sql.Function(Name="pg_catalog.pg_control_system", ServerSideOnly=true)]
		public static pg_control_systemResult PgControlSystem()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConversionIsVisible

		[Sql.Function(Name="pg_catalog.pg_conversion_is_visible", ServerSideOnly=true)]
		public static bool? PgConversionIsVisible(int? par4863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateLogicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_logical_replication_slot", ServerSideOnly=true)]
		public static pg_create_logical_replication_slotResult PgCreateLogicalReplicationSlot(string slot_name, string plugin)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreatePhysicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_physical_replication_slot", ServerSideOnly=true)]
		public static pg_create_physical_replication_slotResult PgCreatePhysicalReplicationSlot(string slot_name, bool? immediately_reserve)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateRestorePoint

		[Sql.Function(Name="pg_catalog.pg_create_restore_point", ServerSideOnly=true)]
		public static object PgCreateRestorePoint(string par4865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentXlogFlushLocation

		[Sql.Function(Name="pg_catalog.pg_current_xlog_flush_location", ServerSideOnly=true)]
		public static object PgCurrentXlogFlushLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentXlogInsertLocation

		[Sql.Function(Name="pg_catalog.pg_current_xlog_insert_location", ServerSideOnly=true)]
		public static object PgCurrentXlogInsertLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentXlogLocation

		[Sql.Function(Name="pg_catalog.pg_current_xlog_location", ServerSideOnly=true)]
		public static object PgCurrentXlogLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatabaseSize

		[Sql.Function(Name="pg_catalog.pg_database_size", ServerSideOnly=true)]
		public static long? PgDatabaseSize(int? par4872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandIn

		[Sql.Function(Name="pg_catalog.pg_ddl_command_in", ServerSideOnly=true)]
		public static object PgDdlCommandIn(object par4874)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandOut

		[Sql.Function(Name="pg_catalog.pg_ddl_command_out", ServerSideOnly=true)]
		public static object PgDdlCommandOut(object par4876)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandRecv

		[Sql.Function(Name="pg_catalog.pg_ddl_command_recv", ServerSideOnly=true)]
		public static object PgDdlCommandRecv(object par4878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandSend

		[Sql.Function(Name="pg_catalog.pg_ddl_command_send", ServerSideOnly=true)]
		public static byte[] PgDdlCommandSend(object par4880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDescribeObject

		[Sql.Function(Name="pg_catalog.pg_describe_object", ServerSideOnly=true)]
		public static string PgDescribeObject(int? par4882, int? par4883, int? par4884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDropReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_drop_replication_slot", ServerSideOnly=true)]
		public static object PgDropReplicationSlot(string par4885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingMaxLength

		[Sql.Function(Name="pg_catalog.pg_encoding_max_length", ServerSideOnly=true)]
		public static int? PgEncodingMaxLength(int? par4887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingToChar

		[Sql.Function(Name="pg_catalog.pg_encoding_to_char", ServerSideOnly=true)]
		public static string PgEncodingToChar(int? par4889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteOid

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_oid", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteOid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteReason

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_reason", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteReason()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExportSnapshot

		[Sql.Function(Name="pg_catalog.pg_export_snapshot", ServerSideOnly=true)]
		public static string PgExportSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExtensionConfigDump

		[Sql.Function(Name="pg_catalog.pg_extension_config_dump", ServerSideOnly=true)]
		public static object PgExtensionConfigDump(object par4892, string par4893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFilenodeRelation

		[Sql.Function(Name="pg_catalog.pg_filenode_relation", ServerSideOnly=true)]
		public static object PgFilenodeRelation(int? par4895, int? par4896)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFunctionIsVisible

		[Sql.Function(Name="pg_catalog.pg_function_is_visible", ServerSideOnly=true)]
		public static bool? PgFunctionIsVisible(int? par4898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetConstraintdef

		[Sql.Function(Name="pg_catalog.pg_get_constraintdef", ServerSideOnly=true)]
		public static string PgGetConstraintdef(int? par4902, bool? par4903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetExpr

		[Sql.Function(Name="pg_catalog.pg_get_expr", ServerSideOnly=true)]
		public static string PgGetExpr(object par4908, int? par4909, bool? par4910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArgDefault

		[Sql.Function(Name="pg_catalog.pg_get_function_arg_default", ServerSideOnly=true)]
		public static string PgGetFunctionArgDefault(int? par4912, int? par4913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_arguments", ServerSideOnly=true)]
		public static string PgGetFunctionArguments(int? par4915)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionIdentityArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_identity_arguments", ServerSideOnly=true)]
		public static string PgGetFunctionIdentityArguments(int? par4917)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionResult

		[Sql.Function(Name="pg_catalog.pg_get_function_result", ServerSideOnly=true)]
		public static string PgGetFunctionResult(int? par4919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctiondef

		[Sql.Function(Name="pg_catalog.pg_get_functiondef", ServerSideOnly=true)]
		public static string PgGetFunctiondef(int? par4921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetIndexdef

		[Sql.Function(Name="pg_catalog.pg_get_indexdef", ServerSideOnly=true)]
		public static string PgGetIndexdef(int? par4925, int? par4926, bool? par4927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetObjectAddress

		[Sql.Function(Name="pg_catalog.pg_get_object_address", ServerSideOnly=true)]
		public static pg_get_object_addressResult PgGetObjectAddress(string type, object name, object args)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetRuledef

		[Sql.Function(Name="pg_catalog.pg_get_ruledef", ServerSideOnly=true)]
		public static string PgGetRuledef(int? par4931, bool? par4932)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetSerialSequence

		[Sql.Function(Name="pg_catalog.pg_get_serial_sequence", ServerSideOnly=true)]
		public static string PgGetSerialSequence(string par4934, string par4935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetTriggerdef

		[Sql.Function(Name="pg_catalog.pg_get_triggerdef", ServerSideOnly=true)]
		public static string PgGetTriggerdef(int? par4939, bool? par4940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetUserbyid

		[Sql.Function(Name="pg_catalog.pg_get_userbyid", ServerSideOnly=true)]
		public static string PgGetUserbyid(int? par4942)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetViewdef

		[Sql.Function(Name="pg_catalog.pg_get_viewdef", ServerSideOnly=true)]
		public static string PgGetViewdef(int? par4954, int? par4955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgHasRole

		[Sql.Function(Name="pg_catalog.pg_has_role", ServerSideOnly=true)]
		public static bool? PgHasRole(int? par4976, string par4977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObject

		[Sql.Function(Name="pg_catalog.pg_identify_object", ServerSideOnly=true)]
		public static pg_identify_objectResult PgIdentifyObject(int? classid, int? objid, int? subobjid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObjectAsAddress

		[Sql.Function(Name="pg_catalog.pg_identify_object_as_address", ServerSideOnly=true)]
		public static pg_identify_object_as_addressResult PgIdentifyObjectAsAddress(int? classid, int? objid, int? subobjid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexColumnHasProperty

		[Sql.Function(Name="pg_catalog.pg_index_column_has_property", ServerSideOnly=true)]
		public static bool? PgIndexColumnHasProperty(object par4979, int? par4980, string par4981)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexHasProperty

		[Sql.Function(Name="pg_catalog.pg_index_has_property", ServerSideOnly=true)]
		public static bool? PgIndexHasProperty(object par4983, string par4984)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexamHasProperty

		[Sql.Function(Name="pg_catalog.pg_indexam_has_property", ServerSideOnly=true)]
		public static bool? PgIndexamHasProperty(int? par4986, string par4987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexesSize

		[Sql.Function(Name="pg_catalog.pg_indexes_size", ServerSideOnly=true)]
		public static long? PgIndexesSize(object par4989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInBackup

		[Sql.Function(Name="pg_catalog.pg_is_in_backup", ServerSideOnly=true)]
		public static bool? PgIsInBackup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInRecovery

		[Sql.Function(Name="pg_catalog.pg_is_in_recovery", ServerSideOnly=true)]
		public static bool? PgIsInRecovery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsOtherTempSchema

		[Sql.Function(Name="pg_catalog.pg_is_other_temp_schema", ServerSideOnly=true)]
		public static bool? PgIsOtherTempSchema(int? par4993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsXlogReplayPaused

		[Sql.Function(Name="pg_catalog.pg_is_xlog_replay_paused", ServerSideOnly=true)]
		public static bool? PgIsXlogReplayPaused()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastCommittedXact

		[Sql.Function(Name="pg_catalog.pg_last_committed_xact", ServerSideOnly=true)]
		public static pg_last_committed_xactResult PgLastCommittedXact()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXactReplayTimestamp

		[Sql.Function(Name="pg_catalog.pg_last_xact_replay_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgLastXactReplayTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXlogReceiveLocation

		[Sql.Function(Name="pg_catalog.pg_last_xlog_receive_location", ServerSideOnly=true)]
		public static object PgLastXlogReceiveLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXlogReplayLocation

		[Sql.Function(Name="pg_catalog.pg_last_xlog_replay_location", ServerSideOnly=true)]
		public static object PgLastXlogReplayLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLogicalEmitMessage

		[Sql.Function(Name="pg_catalog.pg_logical_emit_message", ServerSideOnly=true)]
		public static object PgLogicalEmitMessage(bool? par5003, string par5004, byte[] par5005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnCmp

		[Sql.Function(Name="pg_catalog.pg_lsn_cmp", ServerSideOnly=true)]
		public static int? PgLsnCmp(object par5011, object par5012)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnEq

		[Sql.Function(Name="pg_catalog.pg_lsn_eq", ServerSideOnly=true)]
		public static bool? PgLsnEq(object par5014, object par5015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGe

		[Sql.Function(Name="pg_catalog.pg_lsn_ge", ServerSideOnly=true)]
		public static bool? PgLsnGe(object par5017, object par5018)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGt

		[Sql.Function(Name="pg_catalog.pg_lsn_gt", ServerSideOnly=true)]
		public static bool? PgLsnGt(object par5020, object par5021)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnHash

		[Sql.Function(Name="pg_catalog.pg_lsn_hash", ServerSideOnly=true)]
		public static int? PgLsnHash(object par5023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnIn

		[Sql.Function(Name="pg_catalog.pg_lsn_in", ServerSideOnly=true)]
		public static object PgLsnIn(object par5025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLe

		[Sql.Function(Name="pg_catalog.pg_lsn_le", ServerSideOnly=true)]
		public static bool? PgLsnLe(object par5027, object par5028)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLt

		[Sql.Function(Name="pg_catalog.pg_lsn_lt", ServerSideOnly=true)]
		public static bool? PgLsnLt(object par5030, object par5031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnMi

		[Sql.Function(Name="pg_catalog.pg_lsn_mi", ServerSideOnly=true)]
		public static decimal? PgLsnMi(object par5033, object par5034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnNe

		[Sql.Function(Name="pg_catalog.pg_lsn_ne", ServerSideOnly=true)]
		public static bool? PgLsnNe(object par5036, object par5037)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnOut

		[Sql.Function(Name="pg_catalog.pg_lsn_out", ServerSideOnly=true)]
		public static object PgLsnOut(object par5039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnRecv

		[Sql.Function(Name="pg_catalog.pg_lsn_recv", ServerSideOnly=true)]
		public static object PgLsnRecv(object par5041)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnSend

		[Sql.Function(Name="pg_catalog.pg_lsn_send", ServerSideOnly=true)]
		public static byte[] PgLsnSend(object par5043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMyTempSchema

		[Sql.Function(Name="pg_catalog.pg_my_temp_schema", ServerSideOnly=true)]
		public static int? PgMyTempSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeIn

		[Sql.Function(Name="pg_catalog.pg_node_tree_in", ServerSideOnly=true)]
		public static object PgNodeTreeIn(object par5046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeOut

		[Sql.Function(Name="pg_catalog.pg_node_tree_out", ServerSideOnly=true)]
		public static object PgNodeTreeOut(object par5048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeRecv

		[Sql.Function(Name="pg_catalog.pg_node_tree_recv", ServerSideOnly=true)]
		public static object PgNodeTreeRecv(object par5050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeSend

		[Sql.Function(Name="pg_catalog.pg_node_tree_send", ServerSideOnly=true)]
		public static byte[] PgNodeTreeSend(object par5052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNotificationQueueUsage

		[Sql.Function(Name="pg_catalog.pg_notification_queue_usage", ServerSideOnly=true)]
		public static double? PgNotificationQueueUsage()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNotify

		[Sql.Function(Name="pg_catalog.pg_notify", ServerSideOnly=true)]
		public static object PgNotify(string par5054, string par5055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpclassIsVisible

		[Sql.Function(Name="pg_catalog.pg_opclass_is_visible", ServerSideOnly=true)]
		public static bool? PgOpclassIsVisible(int? par5057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOperatorIsVisible

		[Sql.Function(Name="pg_catalog.pg_operator_is_visible", ServerSideOnly=true)]
		public static bool? PgOperatorIsVisible(int? par5059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpfamilyIsVisible

		[Sql.Function(Name="pg_catalog.pg_opfamily_is_visible", ServerSideOnly=true)]
		public static bool? PgOpfamilyIsVisible(int? par5061)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgPostmasterStartTime

		[Sql.Function(Name="pg_catalog.pg_postmaster_start_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgPostmasterStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadBinaryFile

		[Sql.Function(Name="pg_catalog.pg_read_binary_file", ServerSideOnly=true)]
		public static byte[] PgReadBinaryFile(string par5073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadFile

		[Sql.Function(Name="pg_catalog.pg_read_file", ServerSideOnly=true)]
		public static string PgReadFile(string par5084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilenode

		[Sql.Function(Name="pg_catalog.pg_relation_filenode", ServerSideOnly=true)]
		public static int? PgRelationFilenode(object par5086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilepath

		[Sql.Function(Name="pg_catalog.pg_relation_filepath", ServerSideOnly=true)]
		public static string PgRelationFilepath(object par5088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_relation_is_updatable", ServerSideOnly=true)]
		public static int? PgRelationIsUpdatable(object par5090, bool? par5091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationSize

		[Sql.Function(Name="pg_catalog.pg_relation_size", ServerSideOnly=true)]
		public static long? PgRelationSize(object par5095, string par5096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReloadConf

		[Sql.Function(Name="pg_catalog.pg_reload_conf", ServerSideOnly=true)]
		public static bool? PgReloadConf()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginAdvance

		[Sql.Function(Name="pg_catalog.pg_replication_origin_advance", ServerSideOnly=true)]
		public static object PgReplicationOriginAdvance(string par5098, object par5099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginCreate

		[Sql.Function(Name="pg_catalog.pg_replication_origin_create", ServerSideOnly=true)]
		public static int? PgReplicationOriginCreate(string par5101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginDrop

		[Sql.Function(Name="pg_catalog.pg_replication_origin_drop", ServerSideOnly=true)]
		public static object PgReplicationOriginDrop(string par5102)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginOid

		[Sql.Function(Name="pg_catalog.pg_replication_origin_oid", ServerSideOnly=true)]
		public static int? PgReplicationOriginOid(string par5104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_progress", ServerSideOnly=true)]
		public static object PgReplicationOriginProgress(string par5106, bool? par5107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionIsSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_is_setup", ServerSideOnly=true)]
		public static bool? PgReplicationOriginSessionIsSetup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_progress", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionProgress(bool? par5110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_reset", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_setup", ServerSideOnly=true)]
		public static object PgReplicationOriginSessionSetup(string par5111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_reset", ServerSideOnly=true)]
		public static object PgReplicationOriginXactReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_setup", ServerSideOnly=true)]
		public static object PgReplicationOriginXactSetup(object par5112, DateTimeOffset? par5113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRotateLogfile

		[Sql.Function(Name="pg_catalog.pg_rotate_logfile", ServerSideOnly=true)]
		public static bool? PgRotateLogfile()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSequenceParameters

		[Sql.Function(Name="pg_catalog.pg_sequence_parameters", ServerSideOnly=true)]
		public static pg_sequence_parametersResult PgSequenceParameters(int? sequence_oid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSizeBytes

		[Sql.Function(Name="pg_catalog.pg_size_bytes", ServerSideOnly=true)]
		public static long? PgSizeBytes(string par5116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSizePretty

		[Sql.Function(Name="pg_catalog.pg_size_pretty", ServerSideOnly=true)]
		public static string PgSizePretty(decimal? par5120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleep

		[Sql.Function(Name="pg_catalog.pg_sleep", ServerSideOnly=true)]
		public static object PgSleep(double? par5121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepFor

		[Sql.Function(Name="pg_catalog.pg_sleep_for", ServerSideOnly=true)]
		public static object PgSleepFor(NpgsqlTimeSpan? par5122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepUntil

		[Sql.Function(Name="pg_catalog.pg_sleep_until", ServerSideOnly=true)]
		public static object PgSleepUntil(DateTimeOffset? par5123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStartBackup

		[Sql.Function(Name="pg_catalog.pg_start_backup", ServerSideOnly=true)]
		public static object PgStartBackup(string label, bool? fast, bool? exclusive)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatClearSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_clear_snapshot", ServerSideOnly=true)]
		public static object PgStatClearSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatFile

		[Sql.Function(Name="pg_catalog.pg_stat_file", ServerSideOnly=true)]
		public static pg_stat_fileResult PgStatFile(string filename, bool? missing_ok)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAnalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_analyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAnalyzeCount(int? par5126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetArchiver

		[Sql.Function(Name="pg_catalog.pg_stat_get_archiver", ServerSideOnly=true)]
		public static pg_stat_get_archiverResult PgStatGetArchiver()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutoanalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autoanalyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAutoanalyzeCount(int? par5128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutovacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autovacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetAutovacuumCount(int? par5130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivity

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity", ServerSideOnly=true)]
		public static string PgStatGetBackendActivity(int? par5132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivityStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendActivityStart(int? par5134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientAddr

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? PgStatGetBackendClientAddr(int? par5136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientPort

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_port", ServerSideOnly=true)]
		public static int? PgStatGetBackendClientPort(int? par5138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendDbid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_dbid", ServerSideOnly=true)]
		public static int? PgStatGetBackendDbid(int? par5140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendPid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_pid", ServerSideOnly=true)]
		public static int? PgStatGetBackendPid(int? par5142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendStart(int? par5144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendUserid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_userid", ServerSideOnly=true)]
		public static int? PgStatGetBackendUserid(int? par5146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendWaitEvent

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_wait_event", ServerSideOnly=true)]
		public static string PgStatGetBackendWaitEvent(int? par5148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendWaitEventType

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_wait_event_type", ServerSideOnly=true)]
		public static string PgStatGetBackendWaitEventType(int? par5150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendXactStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_xact_start", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBackendXactStart(int? par5152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterMaxwrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_maxwritten_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterMaxwrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterRequestedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_requested_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterRequestedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_stat_reset_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetBgwriterStatResetTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterTimedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_timed_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterTimedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetBlocksFetched(int? par5160)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetBlocksHit(int? par5162)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufAlloc

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_alloc", ServerSideOnly=true)]
		public static long? PgStatGetBufAlloc()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufFsyncBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_fsync_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufFsyncBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufWrittenBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_written_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufWrittenBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointSyncTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_sync_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointSyncTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_write_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointWriteTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkReadTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_read_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkReadTime(int? par5169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_write_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkWriteTime(int? par5171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksFetched(int? par5173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksHit(int? par5175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictAll

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_all", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictAll(int? par5177)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictBufferpin

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_bufferpin", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictBufferpin(int? par5179)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictLock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_lock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictLock(int? par5181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_snapshot", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictSnapshot(int? par5183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictStartupDeadlock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_startup_deadlock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictStartupDeadlock(int? par5185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictTablespace

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_tablespace", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictTablespace(int? par5187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbDeadlocks

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_deadlocks", ServerSideOnly=true)]
		public static long? PgStatGetDbDeadlocks(int? par5189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbNumbackends

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_numbackends", ServerSideOnly=true)]
		public static int? PgStatGetDbNumbackends(int? par5191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_stat_reset_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetDbStatResetTime(int? par5193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempBytes

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_bytes", ServerSideOnly=true)]
		public static long? PgStatGetDbTempBytes(int? par5195)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempFiles

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_files", ServerSideOnly=true)]
		public static long? PgStatGetDbTempFiles(int? par5197)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesDeleted(int? par5199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesFetched(int? par5201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesInserted(int? par5203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesReturned(int? par5205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesUpdated(int? par5207)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactCommit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_commit", ServerSideOnly=true)]
		public static long? PgStatGetDbXactCommit(int? par5209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactRollback

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_rollback", ServerSideOnly=true)]
		public static long? PgStatGetDbXactRollback(int? par5211)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDeadTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_dead_tuples", ServerSideOnly=true)]
		public static long? PgStatGetDeadTuples(int? par5213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetFunctionCalls(int? par5215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionSelfTime(int? par5217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionTotalTime(int? par5219)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAnalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_analyze_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAnalyzeTime(int? par5221)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutoanalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autoanalyze_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAutoanalyzeTime(int? par5223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutovacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autovacuum_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastAutovacuumTime(int? par5225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastVacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_vacuum_time", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetLastVacuumTime(int? par5227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLiveTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_live_tuples", ServerSideOnly=true)]
		public static long? PgStatGetLiveTuples(int? par5229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetModSinceAnalyze

		[Sql.Function(Name="pg_catalog.pg_stat_get_mod_since_analyze", ServerSideOnly=true)]
		public static long? PgStatGetModSinceAnalyze(int? par5231)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_numscans", ServerSideOnly=true)]
		public static long? PgStatGetNumscans(int? par5233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetSnapshotTimestamp

		[Sql.Function(Name="pg_catalog.pg_stat_get_snapshot_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgStatGetSnapshotTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesDeleted(int? par5236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetTuplesFetched(int? par5238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesHotUpdated(int? par5240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesInserted(int? par5242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetTuplesReturned(int? par5244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesUpdated(int? par5246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetVacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_vacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetVacuumCount(int? par5248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetWalReceiver

		[Sql.Function(Name="pg_catalog.pg_stat_get_wal_receiver", ServerSideOnly=true)]
		public static pg_stat_get_wal_receiverResult PgStatGetWalReceiver()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksFetched(int? par5250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksHit(int? par5252)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetXactFunctionCalls(int? par5254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionSelfTime(int? par5256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionTotalTime(int? par5258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_numscans", ServerSideOnly=true)]
		public static long? PgStatGetXactNumscans(int? par5260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesDeleted(int? par5262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesFetched(int? par5264)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesHotUpdated(int? par5266)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesInserted(int? par5268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesReturned(int? par5270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesUpdated(int? par5272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatReset

		[Sql.Function(Name="pg_catalog.pg_stat_reset", ServerSideOnly=true)]
		public static object PgStatReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetShared

		[Sql.Function(Name="pg_catalog.pg_stat_reset_shared", ServerSideOnly=true)]
		public static object PgStatResetShared(string par5273)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleFunctionCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_function_counters", ServerSideOnly=true)]
		public static object PgStatResetSingleFunctionCounters(int? par5274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleTableCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_table_counters", ServerSideOnly=true)]
		public static object PgStatResetSingleTableCounters(int? par5275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSwitchXlog

		[Sql.Function(Name="pg_catalog.pg_switch_xlog", ServerSideOnly=true)]
		public static object PgSwitchXlog()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableIsVisible

		[Sql.Function(Name="pg_catalog.pg_table_is_visible", ServerSideOnly=true)]
		public static bool? PgTableIsVisible(int? par5279)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableSize

		[Sql.Function(Name="pg_catalog.pg_table_size", ServerSideOnly=true)]
		public static long? PgTableSize(object par5281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceLocation

		[Sql.Function(Name="pg_catalog.pg_tablespace_location", ServerSideOnly=true)]
		public static string PgTablespaceLocation(int? par5284)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceSize

		[Sql.Function(Name="pg_catalog.pg_tablespace_size", ServerSideOnly=true)]
		public static long? PgTablespaceSize(string par5288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTerminateBackend

		[Sql.Function(Name="pg_catalog.pg_terminate_backend", ServerSideOnly=true)]
		public static bool? PgTerminateBackend(int? par5290)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTotalRelationSize

		[Sql.Function(Name="pg_catalog.pg_total_relation_size", ServerSideOnly=true)]
		public static long? PgTotalRelationSize(object par5292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTriggerDepth

		[Sql.Function(Name="pg_catalog.pg_trigger_depth", ServerSideOnly=true)]
		public static int? PgTriggerDepth()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLock(int? par5297, int? par5298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLockShared(int? par5302, int? par5303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLock(int? par5307, int? par5308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLockShared(int? par5312, int? par5313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsConfigIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_config_is_visible", ServerSideOnly=true)]
		public static bool? PgTsConfigIsVisible(int? par5315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsDictIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_dict_is_visible", ServerSideOnly=true)]
		public static bool? PgTsDictIsVisible(int? par5317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsParserIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_parser_is_visible", ServerSideOnly=true)]
		public static bool? PgTsParserIsVisible(int? par5319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsTemplateIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_template_is_visible", ServerSideOnly=true)]
		public static bool? PgTsTemplateIsVisible(int? par5321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeIsVisible

		[Sql.Function(Name="pg_catalog.pg_type_is_visible", ServerSideOnly=true)]
		public static bool? PgTypeIsVisible(int? par5323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeof

		[Sql.Function(Name="pg_catalog.pg_typeof", ServerSideOnly=true)]
		public static object PgTypeof(object par5325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXactCommitTimestamp

		[Sql.Function(Name="pg_catalog.pg_xact_commit_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? PgXactCommitTimestamp(int? par5327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogLocationDiff

		[Sql.Function(Name="pg_catalog.pg_xlog_location_diff", ServerSideOnly=true)]
		public static decimal? PgXlogLocationDiff(object par5329, object par5330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogReplayPause

		[Sql.Function(Name="pg_catalog.pg_xlog_replay_pause", ServerSideOnly=true)]
		public static object PgXlogReplayPause()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogReplayResume

		[Sql.Function(Name="pg_catalog.pg_xlog_replay_resume", ServerSideOnly=true)]
		public static object PgXlogReplayResume()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogfileName

		[Sql.Function(Name="pg_catalog.pg_xlogfile_name", ServerSideOnly=true)]
		public static string PgXlogfileName(object par5332)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogfileNameOffset

		[Sql.Function(Name="pg_catalog.pg_xlogfile_name_offset", ServerSideOnly=true)]
		public static pg_xlogfile_name_offsetResult PgXlogfileNameOffset(object wal_location)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PhrasetoTsquery

		[Sql.Function(Name="pg_catalog.phraseto_tsquery", ServerSideOnly=true)]
		public static object PhrasetoTsquery(object par5336, string par5337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pi

		[Sql.Function(Name="pg_catalog.pi", ServerSideOnly=true)]
		public static double? Pi()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlaintoTsquery

		[Sql.Function(Name="pg_catalog.plainto_tsquery", ServerSideOnly=true)]
		public static object PlaintoTsquery(string par5343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlCallHandler

		[Sql.Function(Name="pg_catalog.plpgsql_call_handler", ServerSideOnly=true)]
		public static object PlpgsqlCallHandler()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlInlineHandler

		[Sql.Function(Name="pg_catalog.plpgsql_inline_handler", ServerSideOnly=true)]
		public static object PlpgsqlInlineHandler(object par5345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlValidator

		[Sql.Function(Name="pg_catalog.plpgsql_validator", ServerSideOnly=true)]
		public static object PlpgsqlValidator(int? par5346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Point

		[Sql.Function(Name="pg_catalog.point", ServerSideOnly=true)]
		public static NpgsqlPoint? Point(NpgsqlPolygon? par5359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAbove

		[Sql.Function(Name="pg_catalog.point_above", ServerSideOnly=true)]
		public static bool? PointAbove(NpgsqlPoint? par5361, NpgsqlPoint? par5362)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAdd

		[Sql.Function(Name="pg_catalog.point_add", ServerSideOnly=true)]
		public static NpgsqlPoint? PointAdd(NpgsqlPoint? par5364, NpgsqlPoint? par5365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointBelow

		[Sql.Function(Name="pg_catalog.point_below", ServerSideOnly=true)]
		public static bool? PointBelow(NpgsqlPoint? par5367, NpgsqlPoint? par5368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDistance

		[Sql.Function(Name="pg_catalog.point_distance", ServerSideOnly=true)]
		public static double? PointDistance(NpgsqlPoint? par5370, NpgsqlPoint? par5371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDiv

		[Sql.Function(Name="pg_catalog.point_div", ServerSideOnly=true)]
		public static NpgsqlPoint? PointDiv(NpgsqlPoint? par5373, NpgsqlPoint? par5374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointEq

		[Sql.Function(Name="pg_catalog.point_eq", ServerSideOnly=true)]
		public static bool? PointEq(NpgsqlPoint? par5376, NpgsqlPoint? par5377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointHoriz

		[Sql.Function(Name="pg_catalog.point_horiz", ServerSideOnly=true)]
		public static bool? PointHoriz(NpgsqlPoint? par5379, NpgsqlPoint? par5380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointIn

		[Sql.Function(Name="pg_catalog.point_in", ServerSideOnly=true)]
		public static NpgsqlPoint? PointIn(object par5382)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointLeft

		[Sql.Function(Name="pg_catalog.point_left", ServerSideOnly=true)]
		public static bool? PointLeft(NpgsqlPoint? par5384, NpgsqlPoint? par5385)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointMul

		[Sql.Function(Name="pg_catalog.point_mul", ServerSideOnly=true)]
		public static NpgsqlPoint? PointMul(NpgsqlPoint? par5387, NpgsqlPoint? par5388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointNe

		[Sql.Function(Name="pg_catalog.point_ne", ServerSideOnly=true)]
		public static bool? PointNe(NpgsqlPoint? par5390, NpgsqlPoint? par5391)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointOut

		[Sql.Function(Name="pg_catalog.point_out", ServerSideOnly=true)]
		public static object PointOut(NpgsqlPoint? par5393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRecv

		[Sql.Function(Name="pg_catalog.point_recv", ServerSideOnly=true)]
		public static NpgsqlPoint? PointRecv(object par5395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRight

		[Sql.Function(Name="pg_catalog.point_right", ServerSideOnly=true)]
		public static bool? PointRight(NpgsqlPoint? par5397, NpgsqlPoint? par5398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSend

		[Sql.Function(Name="pg_catalog.point_send", ServerSideOnly=true)]
		public static byte[] PointSend(NpgsqlPoint? par5400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSub

		[Sql.Function(Name="pg_catalog.point_sub", ServerSideOnly=true)]
		public static NpgsqlPoint? PointSub(NpgsqlPoint? par5402, NpgsqlPoint? par5403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointVert

		[Sql.Function(Name="pg_catalog.point_vert", ServerSideOnly=true)]
		public static bool? PointVert(NpgsqlPoint? par5405, NpgsqlPoint? par5406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyAbove

		[Sql.Function(Name="pg_catalog.poly_above", ServerSideOnly=true)]
		public static bool? PolyAbove(NpgsqlPolygon? par5408, NpgsqlPolygon? par5409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyBelow

		[Sql.Function(Name="pg_catalog.poly_below", ServerSideOnly=true)]
		public static bool? PolyBelow(NpgsqlPolygon? par5411, NpgsqlPolygon? par5412)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyCenter

		[Sql.Function(Name="pg_catalog.poly_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PolyCenter(NpgsqlPolygon? par5414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContain

		[Sql.Function(Name="pg_catalog.poly_contain", ServerSideOnly=true)]
		public static bool? PolyContain(NpgsqlPolygon? par5416, NpgsqlPolygon? par5417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContainPt

		[Sql.Function(Name="pg_catalog.poly_contain_pt", ServerSideOnly=true)]
		public static bool? PolyContainPt(NpgsqlPolygon? par5419, NpgsqlPoint? par5420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContained

		[Sql.Function(Name="pg_catalog.poly_contained", ServerSideOnly=true)]
		public static bool? PolyContained(NpgsqlPolygon? par5422, NpgsqlPolygon? par5423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyDistance

		[Sql.Function(Name="pg_catalog.poly_distance", ServerSideOnly=true)]
		public static double? PolyDistance(NpgsqlPolygon? par5425, NpgsqlPolygon? par5426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyIn

		[Sql.Function(Name="pg_catalog.poly_in", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyIn(object par5428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyLeft

		[Sql.Function(Name="pg_catalog.poly_left", ServerSideOnly=true)]
		public static bool? PolyLeft(NpgsqlPolygon? par5430, NpgsqlPolygon? par5431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyNpoints

		[Sql.Function(Name="pg_catalog.poly_npoints", ServerSideOnly=true)]
		public static int? PolyNpoints(NpgsqlPolygon? par5433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOut

		[Sql.Function(Name="pg_catalog.poly_out", ServerSideOnly=true)]
		public static object PolyOut(NpgsqlPolygon? par5435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverabove

		[Sql.Function(Name="pg_catalog.poly_overabove", ServerSideOnly=true)]
		public static bool? PolyOverabove(NpgsqlPolygon? par5437, NpgsqlPolygon? par5438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverbelow

		[Sql.Function(Name="pg_catalog.poly_overbelow", ServerSideOnly=true)]
		public static bool? PolyOverbelow(NpgsqlPolygon? par5440, NpgsqlPolygon? par5441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverlap

		[Sql.Function(Name="pg_catalog.poly_overlap", ServerSideOnly=true)]
		public static bool? PolyOverlap(NpgsqlPolygon? par5443, NpgsqlPolygon? par5444)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverleft

		[Sql.Function(Name="pg_catalog.poly_overleft", ServerSideOnly=true)]
		public static bool? PolyOverleft(NpgsqlPolygon? par5446, NpgsqlPolygon? par5447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverright

		[Sql.Function(Name="pg_catalog.poly_overright", ServerSideOnly=true)]
		public static bool? PolyOverright(NpgsqlPolygon? par5449, NpgsqlPolygon? par5450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRecv

		[Sql.Function(Name="pg_catalog.poly_recv", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyRecv(object par5452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRight

		[Sql.Function(Name="pg_catalog.poly_right", ServerSideOnly=true)]
		public static bool? PolyRight(NpgsqlPolygon? par5454, NpgsqlPolygon? par5455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySame

		[Sql.Function(Name="pg_catalog.poly_same", ServerSideOnly=true)]
		public static bool? PolySame(NpgsqlPolygon? par5457, NpgsqlPolygon? par5458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySend

		[Sql.Function(Name="pg_catalog.poly_send", ServerSideOnly=true)]
		public static byte[] PolySend(NpgsqlPolygon? par5460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Polygon

		[Sql.Function(Name="pg_catalog.polygon", ServerSideOnly=true)]
		public static NpgsqlPolygon? Polygon(NpgsqlCircle? par5469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Popen

		[Sql.Function(Name="pg_catalog.popen", ServerSideOnly=true)]
		public static NpgsqlPath? Popen(NpgsqlPath? par5471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Position

		[Sql.Function(Name="pg_catalog.position", ServerSideOnly=true)]
		public static int? Position(string par5479, string par5480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionjoinsel

		[Sql.Function(Name="pg_catalog.positionjoinsel", ServerSideOnly=true)]
		public static double? Positionjoinsel(object par5482, int? par5483, object par5484, short? par5485, object par5486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionsel

		[Sql.Function(Name="pg_catalog.positionsel", ServerSideOnly=true)]
		public static double? Positionsel(object par5488, int? par5489, object par5490, int? par5491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PostgresqlFdwValidator

		[Sql.Function(Name="pg_catalog.postgresql_fdw_validator", ServerSideOnly=true)]
		public static bool? PostgresqlFdwValidator(object par5493, int? par5494)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pow

		[Sql.Function(Name="pg_catalog.pow", ServerSideOnly=true)]
		public static decimal? Pow(decimal? par5499, decimal? par5500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Power

		[Sql.Function(Name="pg_catalog.power", ServerSideOnly=true)]
		public static decimal? Power(decimal? par5505, decimal? par5506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdEnd

		[Sql.Function(Name="pg_catalog.prsd_end", ServerSideOnly=true)]
		public static object PrsdEnd(object par5507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdHeadline

		[Sql.Function(Name="pg_catalog.prsd_headline", ServerSideOnly=true)]
		public static object PrsdHeadline(object par5509, object par5510, object par5511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdLextype

		[Sql.Function(Name="pg_catalog.prsd_lextype", ServerSideOnly=true)]
		public static object PrsdLextype(object par5513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdNexttoken

		[Sql.Function(Name="pg_catalog.prsd_nexttoken", ServerSideOnly=true)]
		public static object PrsdNexttoken(object par5515, object par5516, object par5517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdStart

		[Sql.Function(Name="pg_catalog.prsd_start", ServerSideOnly=true)]
		public static object PrsdStart(object par5519, int? par5520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedCircle

		[Sql.Function(Name="pg_catalog.pt_contained_circle", ServerSideOnly=true)]
		public static bool? PtContainedCircle(NpgsqlPoint? par5522, NpgsqlCircle? par5523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedPoly

		[Sql.Function(Name="pg_catalog.pt_contained_poly", ServerSideOnly=true)]
		public static bool? PtContainedPoly(NpgsqlPoint? par5525, NpgsqlPolygon? par5526)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXml

		[Sql.Function(Name="pg_catalog.query_to_xml", ServerSideOnly=true)]
		public static string QueryToXml(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string QueryToXmlAndXmlschema(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xmlschema", ServerSideOnly=true)]
		public static string QueryToXmlschema(string query, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Querytree

		[Sql.Function(Name="pg_catalog.querytree", ServerSideOnly=true)]
		public static string Querytree(object par5531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteIdent

		[Sql.Function(Name="pg_catalog.quote_ident", ServerSideOnly=true)]
		public static string QuoteIdent(string par5533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteLiteral

		[Sql.Function(Name="pg_catalog.quote_literal", ServerSideOnly=true)]
		public static string QuoteLiteral(object par5537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteNullable

		[Sql.Function(Name="pg_catalog.quote_nullable", ServerSideOnly=true)]
		public static string QuoteNullable(object par5541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radians

		[Sql.Function(Name="pg_catalog.radians", ServerSideOnly=true)]
		public static double? Radians(double? par5543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radius

		[Sql.Function(Name="pg_catalog.radius", ServerSideOnly=true)]
		public static double? Radius(NpgsqlCircle? par5545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Random

		[Sql.Function(Name="pg_catalog.random", ServerSideOnly=true)]
		public static double? Random()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAdjacent

		[Sql.Function(Name="pg_catalog.range_adjacent", ServerSideOnly=true)]
		public static bool? RangeAdjacent(object par5548, object par5549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAfter

		[Sql.Function(Name="pg_catalog.range_after", ServerSideOnly=true)]
		public static bool? RangeAfter(object par5551, object par5552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeBefore

		[Sql.Function(Name="pg_catalog.range_before", ServerSideOnly=true)]
		public static bool? RangeBefore(object par5554, object par5555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeCmp

		[Sql.Function(Name="pg_catalog.range_cmp", ServerSideOnly=true)]
		public static int? RangeCmp(object par5557, object par5558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainedBy

		[Sql.Function(Name="pg_catalog.range_contained_by", ServerSideOnly=true)]
		public static bool? RangeContainedBy(object par5560, object par5561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContains

		[Sql.Function(Name="pg_catalog.range_contains", ServerSideOnly=true)]
		public static bool? RangeContains(object par5563, object par5564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainsElem

		[Sql.Function(Name="pg_catalog.range_contains_elem", ServerSideOnly=true)]
		public static bool? RangeContainsElem(object par5566, object par5567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeEq

		[Sql.Function(Name="pg_catalog.range_eq", ServerSideOnly=true)]
		public static bool? RangeEq(object par5569, object par5570)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGe

		[Sql.Function(Name="pg_catalog.range_ge", ServerSideOnly=true)]
		public static bool? RangeGe(object par5572, object par5573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistCompress

		[Sql.Function(Name="pg_catalog.range_gist_compress", ServerSideOnly=true)]
		public static object RangeGistCompress(object par5575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistConsistent

		[Sql.Function(Name="pg_catalog.range_gist_consistent", ServerSideOnly=true)]
		public static bool? RangeGistConsistent(object par5577, object par5578, short? par5579, int? par5580, object par5581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistDecompress

		[Sql.Function(Name="pg_catalog.range_gist_decompress", ServerSideOnly=true)]
		public static object RangeGistDecompress(object par5583)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistFetch

		[Sql.Function(Name="pg_catalog.range_gist_fetch", ServerSideOnly=true)]
		public static object RangeGistFetch(object par5585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPenalty

		[Sql.Function(Name="pg_catalog.range_gist_penalty", ServerSideOnly=true)]
		public static object RangeGistPenalty(object par5587, object par5588, object par5589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPicksplit

		[Sql.Function(Name="pg_catalog.range_gist_picksplit", ServerSideOnly=true)]
		public static object RangeGistPicksplit(object par5591, object par5592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistSame

		[Sql.Function(Name="pg_catalog.range_gist_same", ServerSideOnly=true)]
		public static object RangeGistSame(object par5594, object par5595, object par5596)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistUnion

		[Sql.Function(Name="pg_catalog.range_gist_union", ServerSideOnly=true)]
		public static object RangeGistUnion(object par5598, object par5599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGt

		[Sql.Function(Name="pg_catalog.range_gt", ServerSideOnly=true)]
		public static bool? RangeGt(object par5601, object par5602)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIn

		[Sql.Function(Name="pg_catalog.range_in", ServerSideOnly=true)]
		public static object RangeIn(object par5604, int? par5605, int? par5606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIntersect

		[Sql.Function(Name="pg_catalog.range_intersect", ServerSideOnly=true)]
		public static object RangeIntersect(object par5608, object par5609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLe

		[Sql.Function(Name="pg_catalog.range_le", ServerSideOnly=true)]
		public static bool? RangeLe(object par5611, object par5612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLt

		[Sql.Function(Name="pg_catalog.range_lt", ServerSideOnly=true)]
		public static bool? RangeLt(object par5614, object par5615)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMerge

		[Sql.Function(Name="pg_catalog.range_merge", ServerSideOnly=true)]
		public static object RangeMerge(object par5617, object par5618)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMinus

		[Sql.Function(Name="pg_catalog.range_minus", ServerSideOnly=true)]
		public static object RangeMinus(object par5620, object par5621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeNe

		[Sql.Function(Name="pg_catalog.range_ne", ServerSideOnly=true)]
		public static bool? RangeNe(object par5623, object par5624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOut

		[Sql.Function(Name="pg_catalog.range_out", ServerSideOnly=true)]
		public static object RangeOut(object par5626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverlaps

		[Sql.Function(Name="pg_catalog.range_overlaps", ServerSideOnly=true)]
		public static bool? RangeOverlaps(object par5628, object par5629)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverleft

		[Sql.Function(Name="pg_catalog.range_overleft", ServerSideOnly=true)]
		public static bool? RangeOverleft(object par5631, object par5632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverright

		[Sql.Function(Name="pg_catalog.range_overright", ServerSideOnly=true)]
		public static bool? RangeOverright(object par5634, object par5635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeRecv

		[Sql.Function(Name="pg_catalog.range_recv", ServerSideOnly=true)]
		public static object RangeRecv(object par5637, int? par5638, int? par5639)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeSend

		[Sql.Function(Name="pg_catalog.range_send", ServerSideOnly=true)]
		public static byte[] RangeSend(object par5641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeTypanalyze

		[Sql.Function(Name="pg_catalog.range_typanalyze", ServerSideOnly=true)]
		public static bool? RangeTypanalyze(object par5643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeUnion

		[Sql.Function(Name="pg_catalog.range_union", ServerSideOnly=true)]
		public static object RangeUnion(object par5645, object par5646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rangesel

		[Sql.Function(Name="pg_catalog.rangesel", ServerSideOnly=true)]
		public static double? Rangesel(object par5648, int? par5649, object par5650, int? par5651)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rank

		[Sql.Function(Name="pg_catalog.rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? Rank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object>> par5654)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RankFinal

		[Sql.Function(Name="pg_catalog.rank_final", ServerSideOnly=true)]
		public static long? RankFinal(object par5656, object par5657)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordEq

		[Sql.Function(Name="pg_catalog.record_eq", ServerSideOnly=true)]
		public static bool? RecordEq(object par5659, object par5660)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGe

		[Sql.Function(Name="pg_catalog.record_ge", ServerSideOnly=true)]
		public static bool? RecordGe(object par5662, object par5663)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGt

		[Sql.Function(Name="pg_catalog.record_gt", ServerSideOnly=true)]
		public static bool? RecordGt(object par5665, object par5666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageEq

		[Sql.Function(Name="pg_catalog.record_image_eq", ServerSideOnly=true)]
		public static bool? RecordImageEq(object par5668, object par5669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGe

		[Sql.Function(Name="pg_catalog.record_image_ge", ServerSideOnly=true)]
		public static bool? RecordImageGe(object par5671, object par5672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGt

		[Sql.Function(Name="pg_catalog.record_image_gt", ServerSideOnly=true)]
		public static bool? RecordImageGt(object par5674, object par5675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLe

		[Sql.Function(Name="pg_catalog.record_image_le", ServerSideOnly=true)]
		public static bool? RecordImageLe(object par5677, object par5678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLt

		[Sql.Function(Name="pg_catalog.record_image_lt", ServerSideOnly=true)]
		public static bool? RecordImageLt(object par5680, object par5681)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageNe

		[Sql.Function(Name="pg_catalog.record_image_ne", ServerSideOnly=true)]
		public static bool? RecordImageNe(object par5683, object par5684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordIn

		[Sql.Function(Name="pg_catalog.record_in", ServerSideOnly=true)]
		public static object RecordIn(object par5685, int? par5686, int? par5687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLe

		[Sql.Function(Name="pg_catalog.record_le", ServerSideOnly=true)]
		public static bool? RecordLe(object par5689, object par5690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLt

		[Sql.Function(Name="pg_catalog.record_lt", ServerSideOnly=true)]
		public static bool? RecordLt(object par5692, object par5693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordNe

		[Sql.Function(Name="pg_catalog.record_ne", ServerSideOnly=true)]
		public static bool? RecordNe(object par5695, object par5696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordOut

		[Sql.Function(Name="pg_catalog.record_out", ServerSideOnly=true)]
		public static object RecordOut(object par5698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordRecv

		[Sql.Function(Name="pg_catalog.record_recv", ServerSideOnly=true)]
		public static object RecordRecv(object par5699, int? par5700, int? par5701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordSend

		[Sql.Function(Name="pg_catalog.record_send", ServerSideOnly=true)]
		public static byte[] RecordSend(object par5703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclass

		[Sql.Function(Name="pg_catalog.regclass", ServerSideOnly=true)]
		public static object Regclass(string par5705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassin

		[Sql.Function(Name="pg_catalog.regclassin", ServerSideOnly=true)]
		public static object Regclassin(object par5707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassout

		[Sql.Function(Name="pg_catalog.regclassout", ServerSideOnly=true)]
		public static object Regclassout(object par5709)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassrecv

		[Sql.Function(Name="pg_catalog.regclassrecv", ServerSideOnly=true)]
		public static object Regclassrecv(object par5711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclasssend

		[Sql.Function(Name="pg_catalog.regclasssend", ServerSideOnly=true)]
		public static byte[] Regclasssend(object par5713)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigin

		[Sql.Function(Name="pg_catalog.regconfigin", ServerSideOnly=true)]
		public static object Regconfigin(object par5715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigout

		[Sql.Function(Name="pg_catalog.regconfigout", ServerSideOnly=true)]
		public static object Regconfigout(object par5717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigrecv

		[Sql.Function(Name="pg_catalog.regconfigrecv", ServerSideOnly=true)]
		public static object Regconfigrecv(object par5719)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigsend

		[Sql.Function(Name="pg_catalog.regconfigsend", ServerSideOnly=true)]
		public static byte[] Regconfigsend(object par5721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryin

		[Sql.Function(Name="pg_catalog.regdictionaryin", ServerSideOnly=true)]
		public static object Regdictionaryin(object par5723)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryout

		[Sql.Function(Name="pg_catalog.regdictionaryout", ServerSideOnly=true)]
		public static object Regdictionaryout(object par5725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryrecv

		[Sql.Function(Name="pg_catalog.regdictionaryrecv", ServerSideOnly=true)]
		public static object Regdictionaryrecv(object par5727)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionarysend

		[Sql.Function(Name="pg_catalog.regdictionarysend", ServerSideOnly=true)]
		public static byte[] Regdictionarysend(object par5729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqjoinsel

		[Sql.Function(Name="pg_catalog.regexeqjoinsel", ServerSideOnly=true)]
		public static double? Regexeqjoinsel(object par5731, int? par5732, object par5733, short? par5734, object par5735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqsel

		[Sql.Function(Name="pg_catalog.regexeqsel", ServerSideOnly=true)]
		public static double? Regexeqsel(object par5737, int? par5738, object par5739, int? par5740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnejoinsel

		[Sql.Function(Name="pg_catalog.regexnejoinsel", ServerSideOnly=true)]
		public static double? Regexnejoinsel(object par5742, int? par5743, object par5744, short? par5745, object par5746)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnesel

		[Sql.Function(Name="pg_catalog.regexnesel", ServerSideOnly=true)]
		public static double? Regexnesel(object par5748, int? par5749, object par5750, int? par5751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpReplace

		[Sql.Function(Name="pg_catalog.regexp_replace", ServerSideOnly=true)]
		public static string RegexpReplace(string par5762, string par5763, string par5764, string par5765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpSplitToArray

		[Sql.Function(Name="pg_catalog.regexp_split_to_array", ServerSideOnly=true)]
		public static object RegexpSplitToArray(string par5770, string par5771, string par5772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacein

		[Sql.Function(Name="pg_catalog.regnamespacein", ServerSideOnly=true)]
		public static object Regnamespacein(object par5779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespaceout

		[Sql.Function(Name="pg_catalog.regnamespaceout", ServerSideOnly=true)]
		public static object Regnamespaceout(object par5781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacerecv

		[Sql.Function(Name="pg_catalog.regnamespacerecv", ServerSideOnly=true)]
		public static object Regnamespacerecv(object par5783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacesend

		[Sql.Function(Name="pg_catalog.regnamespacesend", ServerSideOnly=true)]
		public static byte[] Regnamespacesend(object par5785)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorin

		[Sql.Function(Name="pg_catalog.regoperatorin", ServerSideOnly=true)]
		public static object Regoperatorin(object par5787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorout

		[Sql.Function(Name="pg_catalog.regoperatorout", ServerSideOnly=true)]
		public static object Regoperatorout(object par5789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorrecv

		[Sql.Function(Name="pg_catalog.regoperatorrecv", ServerSideOnly=true)]
		public static object Regoperatorrecv(object par5791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorsend

		[Sql.Function(Name="pg_catalog.regoperatorsend", ServerSideOnly=true)]
		public static byte[] Regoperatorsend(object par5793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperin

		[Sql.Function(Name="pg_catalog.regoperin", ServerSideOnly=true)]
		public static object Regoperin(object par5795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperout

		[Sql.Function(Name="pg_catalog.regoperout", ServerSideOnly=true)]
		public static object Regoperout(object par5797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperrecv

		[Sql.Function(Name="pg_catalog.regoperrecv", ServerSideOnly=true)]
		public static object Regoperrecv(object par5799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regopersend

		[Sql.Function(Name="pg_catalog.regopersend", ServerSideOnly=true)]
		public static byte[] Regopersend(object par5801)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurein

		[Sql.Function(Name="pg_catalog.regprocedurein", ServerSideOnly=true)]
		public static object Regprocedurein(object par5803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedureout

		[Sql.Function(Name="pg_catalog.regprocedureout", ServerSideOnly=true)]
		public static object Regprocedureout(object par5805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurerecv

		[Sql.Function(Name="pg_catalog.regprocedurerecv", ServerSideOnly=true)]
		public static object Regprocedurerecv(object par5807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regproceduresend

		[Sql.Function(Name="pg_catalog.regproceduresend", ServerSideOnly=true)]
		public static byte[] Regproceduresend(object par5809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocin

		[Sql.Function(Name="pg_catalog.regprocin", ServerSideOnly=true)]
		public static object Regprocin(object par5811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocout

		[Sql.Function(Name="pg_catalog.regprocout", ServerSideOnly=true)]
		public static object Regprocout(object par5813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocrecv

		[Sql.Function(Name="pg_catalog.regprocrecv", ServerSideOnly=true)]
		public static object Regprocrecv(object par5815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocsend

		[Sql.Function(Name="pg_catalog.regprocsend", ServerSideOnly=true)]
		public static byte[] Regprocsend(object par5817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgx

		[Sql.Function(Name="pg_catalog.regr_avgx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5819, Expression<Func<TSource, double?>> par5820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgy

		[Sql.Function(Name="pg_catalog.regr_avgy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5822, Expression<Func<TSource, double?>> par5823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrCount

		[Sql.Function(Name="pg_catalog.regr_count", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static long? RegrCount<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5825, Expression<Func<TSource, double?>> par5826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrIntercept

		[Sql.Function(Name="pg_catalog.regr_intercept", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrIntercept<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5828, Expression<Func<TSource, double?>> par5829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrR2

		[Sql.Function(Name="pg_catalog.regr_r2", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrR2<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5831, Expression<Func<TSource, double?>> par5832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSlope

		[Sql.Function(Name="pg_catalog.regr_slope", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSlope<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5834, Expression<Func<TSource, double?>> par5835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxx

		[Sql.Function(Name="pg_catalog.regr_sxx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5837, Expression<Func<TSource, double?>> par5838)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxy

		[Sql.Function(Name="pg_catalog.regr_sxy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5840, Expression<Func<TSource, double?>> par5841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSyy

		[Sql.Function(Name="pg_catalog.regr_syy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSyy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5843, Expression<Func<TSource, double?>> par5844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolein

		[Sql.Function(Name="pg_catalog.regrolein", ServerSideOnly=true)]
		public static object Regrolein(object par5846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regroleout

		[Sql.Function(Name="pg_catalog.regroleout", ServerSideOnly=true)]
		public static object Regroleout(object par5848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolerecv

		[Sql.Function(Name="pg_catalog.regrolerecv", ServerSideOnly=true)]
		public static object Regrolerecv(object par5850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolesend

		[Sql.Function(Name="pg_catalog.regrolesend", ServerSideOnly=true)]
		public static byte[] Regrolesend(object par5852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypein

		[Sql.Function(Name="pg_catalog.regtypein", ServerSideOnly=true)]
		public static object Regtypein(object par5854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypeout

		[Sql.Function(Name="pg_catalog.regtypeout", ServerSideOnly=true)]
		public static object Regtypeout(object par5856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtyperecv

		[Sql.Function(Name="pg_catalog.regtyperecv", ServerSideOnly=true)]
		public static object Regtyperecv(object par5858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypesend

		[Sql.Function(Name="pg_catalog.regtypesend", ServerSideOnly=true)]
		public static byte[] Regtypesend(object par5860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltime

		[Sql.Function(Name="pg_catalog.reltime", ServerSideOnly=true)]
		public static object Reltime(NpgsqlTimeSpan? par5862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimeeq

		[Sql.Function(Name="pg_catalog.reltimeeq", ServerSideOnly=true)]
		public static bool? Reltimeeq(object par5864, object par5865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimege

		[Sql.Function(Name="pg_catalog.reltimege", ServerSideOnly=true)]
		public static bool? Reltimege(object par5867, object par5868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimegt

		[Sql.Function(Name="pg_catalog.reltimegt", ServerSideOnly=true)]
		public static bool? Reltimegt(object par5870, object par5871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimein

		[Sql.Function(Name="pg_catalog.reltimein", ServerSideOnly=true)]
		public static object Reltimein(object par5873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimele

		[Sql.Function(Name="pg_catalog.reltimele", ServerSideOnly=true)]
		public static bool? Reltimele(object par5875, object par5876)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimelt

		[Sql.Function(Name="pg_catalog.reltimelt", ServerSideOnly=true)]
		public static bool? Reltimelt(object par5878, object par5879)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimene

		[Sql.Function(Name="pg_catalog.reltimene", ServerSideOnly=true)]
		public static bool? Reltimene(object par5881, object par5882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimeout

		[Sql.Function(Name="pg_catalog.reltimeout", ServerSideOnly=true)]
		public static object Reltimeout(object par5884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimerecv

		[Sql.Function(Name="pg_catalog.reltimerecv", ServerSideOnly=true)]
		public static object Reltimerecv(object par5886)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimesend

		[Sql.Function(Name="pg_catalog.reltimesend", ServerSideOnly=true)]
		public static byte[] Reltimesend(object par5888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Repeat

		[Sql.Function(Name="pg_catalog.repeat", ServerSideOnly=true)]
		public static string Repeat(string par5890, int? par5891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Replace

		[Sql.Function(Name="pg_catalog.replace", ServerSideOnly=true)]
		public static string Replace(string par5893, string par5894, string par5895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reverse

		[Sql.Function(Name="pg_catalog.reverse", ServerSideOnly=true)]
		public static string Reverse(string par5897)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCascadeDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_del\"", ServerSideOnly=true)]
		public static object RiFKeyCascadeDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCascadeUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_upd\"", ServerSideOnly=true)]
		public static object RiFKeyCascadeUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckIns

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_ins\"", ServerSideOnly=true)]
		public static object RiFKeyCheckIns()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_upd\"", ServerSideOnly=true)]
		public static object RiFKeyCheckUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_del\"", ServerSideOnly=true)]
		public static object RiFKeyNoactionDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_upd\"", ServerSideOnly=true)]
		public static object RiFKeyNoactionUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_del\"", ServerSideOnly=true)]
		public static object RiFKeyRestrictDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_upd\"", ServerSideOnly=true)]
		public static object RiFKeyRestrictUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_del\"", ServerSideOnly=true)]
		public static object RiFKeySetdefaultDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_upd\"", ServerSideOnly=true)]
		public static object RiFKeySetdefaultUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_del\"", ServerSideOnly=true)]
		public static object RiFKeySetnullDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_upd\"", ServerSideOnly=true)]
		public static object RiFKeySetnullUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Right

		[Sql.Function(Name="pg_catalog.right", ServerSideOnly=true)]
		public static string Right(string par5911, int? par5912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Round

		[Sql.Function(Name="pg_catalog.round", ServerSideOnly=true)]
		public static decimal? Round(decimal? par5919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowNumber

		[Sql.Function(Name="pg_catalog.row_number", ServerSideOnly=true)]
		public static long? RowNumber()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowSecurityActive

		[Sql.Function(Name="pg_catalog.row_security_active", ServerSideOnly=true)]
		public static bool? RowSecurityActive(string par5924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowToJson

		[Sql.Function(Name="pg_catalog.row_to_json", ServerSideOnly=true)]
		public static string RowToJson(object par5928, bool? par5929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rpad

		[Sql.Function(Name="pg_catalog.rpad", ServerSideOnly=true)]
		public static string Rpad(string par5935, int? par5936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rtrim

		[Sql.Function(Name="pg_catalog.rtrim", ServerSideOnly=true)]
		public static string Rtrim(string par5941)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtjoinsel

		[Sql.Function(Name="pg_catalog.scalargtjoinsel", ServerSideOnly=true)]
		public static double? Scalargtjoinsel(object par5943, int? par5944, object par5945, short? par5946, object par5947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtsel

		[Sql.Function(Name="pg_catalog.scalargtsel", ServerSideOnly=true)]
		public static double? Scalargtsel(object par5949, int? par5950, object par5951, int? par5952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltjoinsel

		[Sql.Function(Name="pg_catalog.scalarltjoinsel", ServerSideOnly=true)]
		public static double? Scalarltjoinsel(object par5954, int? par5955, object par5956, short? par5957, object par5958)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltsel

		[Sql.Function(Name="pg_catalog.scalarltsel", ServerSideOnly=true)]
		public static double? Scalarltsel(object par5960, int? par5961, object par5962, int? par5963)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scale

		[Sql.Function(Name="pg_catalog.scale", ServerSideOnly=true)]
		public static int? Scale(decimal? par5965)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXml

		[Sql.Function(Name="pg_catalog.schema_to_xml", ServerSideOnly=true)]
		public static string SchemaToXml(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string SchemaToXmlAndXmlschema(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xmlschema", ServerSideOnly=true)]
		public static string SchemaToXmlschema(string schema, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SessionUser

		[Sql.Function(Name="pg_catalog.session_user", ServerSideOnly=true)]
		public static string SessionUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetBit

		[Sql.Function(Name="pg_catalog.set_bit", ServerSideOnly=true)]
		public static byte[] SetBit(byte[] par5975, int? par5976, int? par5977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetByte

		[Sql.Function(Name="pg_catalog.set_byte", ServerSideOnly=true)]
		public static byte[] SetByte(byte[] par5979, int? par5980, int? par5981)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetConfig

		[Sql.Function(Name="pg_catalog.set_config", ServerSideOnly=true)]
		public static string SetConfig(string par5983, string par5984, bool? par5985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetMasklen

		[Sql.Function(Name="pg_catalog.set_masklen", ServerSideOnly=true)]
		public static NpgsqlInet? SetMasklen(NpgsqlInet? par5990, int? par5991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setseed

		[Sql.Function(Name="pg_catalog.setseed", ServerSideOnly=true)]
		public static object Setseed(double? par5992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setval

		[Sql.Function(Name="pg_catalog.setval", ServerSideOnly=true)]
		public static long? Setval(object par5997, long? par5998, bool? par5999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setweight

		[Sql.Function(Name="pg_catalog.setweight", ServerSideOnly=true)]
		public static object Setweight(object par6005, object par6006)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellIn

		[Sql.Function(Name="pg_catalog.shell_in", ServerSideOnly=true)]
		public static object ShellIn(object par6008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellOut

		[Sql.Function(Name="pg_catalog.shell_out", ServerSideOnly=true)]
		public static object ShellOut(object par6010)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToEucJis2004

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_euc_jis_2004", ServerSideOnly=true)]
		public static object ShiftJis2004ToEucJis2004(int? par6011, int? par6012, object par6013, object par6014, int? par6015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object ShiftJis2004ToUtf8(int? par6016, int? par6017, object par6018, object par6019, int? par6020)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShobjDescription

		[Sql.Function(Name="pg_catalog.shobj_description", ServerSideOnly=true)]
		public static string ShobjDescription(int? par6022, string par6023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sign

		[Sql.Function(Name="pg_catalog.sign", ServerSideOnly=true)]
		public static double? Sign(double? par6027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SimilarEscape

		[Sql.Function(Name="pg_catalog.similar_escape", ServerSideOnly=true)]
		public static string SimilarEscape(string par6029, string par6030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sin

		[Sql.Function(Name="pg_catalog.sin", ServerSideOnly=true)]
		public static double? Sin(double? par6032)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sind

		[Sql.Function(Name="pg_catalog.sind", ServerSideOnly=true)]
		public static double? Sind(double? par6034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToEucJp

		[Sql.Function(Name="pg_catalog.sjis_to_euc_jp", ServerSideOnly=true)]
		public static object SjisToEucJp(int? par6035, int? par6036, object par6037, object par6038, int? par6039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToMic

		[Sql.Function(Name="pg_catalog.sjis_to_mic", ServerSideOnly=true)]
		public static object SjisToMic(int? par6040, int? par6041, object par6042, object par6043, int? par6044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToUtf8

		[Sql.Function(Name="pg_catalog.sjis_to_utf8", ServerSideOnly=true)]
		public static object SjisToUtf8(int? par6045, int? par6046, object par6047, object par6048, int? par6049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Slope

		[Sql.Function(Name="pg_catalog.slope", ServerSideOnly=true)]
		public static double? Slope(NpgsqlPoint? par6051, NpgsqlPoint? par6052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgreq

		[Sql.Function(Name="pg_catalog.smgreq", ServerSideOnly=true)]
		public static bool? Smgreq(object par6054, object par6055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrin

		[Sql.Function(Name="pg_catalog.smgrin", ServerSideOnly=true)]
		public static object Smgrin(object par6057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrne

		[Sql.Function(Name="pg_catalog.smgrne", ServerSideOnly=true)]
		public static bool? Smgrne(object par6059, object par6060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrout

		[Sql.Function(Name="pg_catalog.smgrout", ServerSideOnly=true)]
		public static object Smgrout(object par6062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadChoose

		[Sql.Function(Name="pg_catalog.spg_box_quad_choose", ServerSideOnly=true)]
		public static object SpgBoxQuadChoose(object par6063, object par6064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadConfig

		[Sql.Function(Name="pg_catalog.spg_box_quad_config", ServerSideOnly=true)]
		public static object SpgBoxQuadConfig(object par6065, object par6066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_box_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgBoxQuadInnerConsistent(object par6067, object par6068)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_box_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgBoxQuadLeafConsistent(object par6070, object par6071)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgBoxQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_box_quad_picksplit", ServerSideOnly=true)]
		public static object SpgBoxQuadPicksplit(object par6072, object par6073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdChoose

		[Sql.Function(Name="pg_catalog.spg_kd_choose", ServerSideOnly=true)]
		public static object SpgKdChoose(object par6074, object par6075)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdConfig

		[Sql.Function(Name="pg_catalog.spg_kd_config", ServerSideOnly=true)]
		public static object SpgKdConfig(object par6076, object par6077)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_kd_inner_consistent", ServerSideOnly=true)]
		public static object SpgKdInnerConsistent(object par6078, object par6079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdPicksplit

		[Sql.Function(Name="pg_catalog.spg_kd_picksplit", ServerSideOnly=true)]
		public static object SpgKdPicksplit(object par6080, object par6081)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadChoose

		[Sql.Function(Name="pg_catalog.spg_quad_choose", ServerSideOnly=true)]
		public static object SpgQuadChoose(object par6082, object par6083)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadConfig

		[Sql.Function(Name="pg_catalog.spg_quad_config", ServerSideOnly=true)]
		public static object SpgQuadConfig(object par6084, object par6085)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgQuadInnerConsistent(object par6086, object par6087)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgQuadLeafConsistent(object par6089, object par6090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_quad_picksplit", ServerSideOnly=true)]
		public static object SpgQuadPicksplit(object par6091, object par6092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadChoose

		[Sql.Function(Name="pg_catalog.spg_range_quad_choose", ServerSideOnly=true)]
		public static object SpgRangeQuadChoose(object par6093, object par6094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadConfig

		[Sql.Function(Name="pg_catalog.spg_range_quad_config", ServerSideOnly=true)]
		public static object SpgRangeQuadConfig(object par6095, object par6096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_inner_consistent", ServerSideOnly=true)]
		public static object SpgRangeQuadInnerConsistent(object par6097, object par6098)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgRangeQuadLeafConsistent(object par6100, object par6101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_range_quad_picksplit", ServerSideOnly=true)]
		public static object SpgRangeQuadPicksplit(object par6102, object par6103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextChoose

		[Sql.Function(Name="pg_catalog.spg_text_choose", ServerSideOnly=true)]
		public static object SpgTextChoose(object par6104, object par6105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextConfig

		[Sql.Function(Name="pg_catalog.spg_text_config", ServerSideOnly=true)]
		public static object SpgTextConfig(object par6106, object par6107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_text_inner_consistent", ServerSideOnly=true)]
		public static object SpgTextInnerConsistent(object par6108, object par6109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_text_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgTextLeafConsistent(object par6111, object par6112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextPicksplit

		[Sql.Function(Name="pg_catalog.spg_text_picksplit", ServerSideOnly=true)]
		public static object SpgTextPicksplit(object par6113, object par6114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spghandler

		[Sql.Function(Name="pg_catalog.spghandler", ServerSideOnly=true)]
		public static object Spghandler(object par6116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SplitPart

		[Sql.Function(Name="pg_catalog.split_part", ServerSideOnly=true)]
		public static string SplitPart(string par6118, string par6119, int? par6120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sqrt

		[Sql.Function(Name="pg_catalog.sqrt", ServerSideOnly=true)]
		public static decimal? Sqrt(decimal? par6124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StatementTimestamp

		[Sql.Function(Name="pg_catalog.statement_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? StatementTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Stddev

		[Sql.Function(Name="pg_catalog.stddev", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Stddev<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevPop

		[Sql.Function(Name="pg_catalog.stddev_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevSamp

		[Sql.Function(Name="pg_catalog.stddev_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAgg

		[Sql.Function(Name="pg_catalog.string_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static byte[] StringAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, byte[]>> par6166, Expression<Func<TSource, byte[]>> par6167)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggFinalfn

		[Sql.Function(Name="pg_catalog.string_agg_finalfn", ServerSideOnly=true)]
		public static string StringAggFinalfn(object par6169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggTransfn

		[Sql.Function(Name="pg_catalog.string_agg_transfn", ServerSideOnly=true)]
		public static object StringAggTransfn(object par6171, string par6172, string par6173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringToArray

		[Sql.Function(Name="pg_catalog.string_to_array", ServerSideOnly=true)]
		public static object StringToArray(string par6179, string par6180)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strip

		[Sql.Function(Name="pg_catalog.strip", ServerSideOnly=true)]
		public static object Strip(object par6182)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strpos

		[Sql.Function(Name="pg_catalog.strpos", ServerSideOnly=true)]
		public static int? Strpos(string par6184, string par6185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substr

		[Sql.Function(Name="pg_catalog.substr", ServerSideOnly=true)]
		public static string Substr(string par6198, int? par6199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substring

		[Sql.Function(Name="pg_catalog.substring", ServerSideOnly=true)]
		public static string Substring(string par6226, int? par6227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sum

		[Sql.Function(Name="pg_catalog.sum", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Sum<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SuppressRedundantUpdatesTrigger

		[Sql.Function(Name="pg_catalog.suppress_redundant_updates_trigger", ServerSideOnly=true)]
		public static object SuppressRedundantUpdatesTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region System

		[Sql.Function(Name="pg_catalog.system", ServerSideOnly=true)]
		public static object System(object par6246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXml

		[Sql.Function(Name="pg_catalog.table_to_xml", ServerSideOnly=true)]
		public static string TableToXml(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string TableToXmlAndXmlschema(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xmlschema", ServerSideOnly=true)]
		public static string TableToXmlschema(object tbl, bool? nulls, bool? tableforest, string targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tan

		[Sql.Function(Name="pg_catalog.tan", ServerSideOnly=true)]
		public static double? Tan(double? par6251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tand

		[Sql.Function(Name="pg_catalog.tand", ServerSideOnly=true)]
		public static double? Tand(double? par6253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Text

		[Sql.Function(Name="pg_catalog.text", ServerSideOnly=true)]
		public static string Text(object par6265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGe

		[Sql.Function(Name="pg_catalog.text_ge", ServerSideOnly=true)]
		public static bool? TextGe(string par6267, string par6268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGt

		[Sql.Function(Name="pg_catalog.text_gt", ServerSideOnly=true)]
		public static bool? TextGt(string par6270, string par6271)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLarger

		[Sql.Function(Name="pg_catalog.text_larger", ServerSideOnly=true)]
		public static string TextLarger(string par6273, string par6274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLe

		[Sql.Function(Name="pg_catalog.text_le", ServerSideOnly=true)]
		public static bool? TextLe(string par6276, string par6277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLt

		[Sql.Function(Name="pg_catalog.text_lt", ServerSideOnly=true)]
		public static bool? TextLt(string par6279, string par6280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGe

		[Sql.Function(Name="pg_catalog.text_pattern_ge", ServerSideOnly=true)]
		public static bool? TextPatternGe(string par6282, string par6283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGt

		[Sql.Function(Name="pg_catalog.text_pattern_gt", ServerSideOnly=true)]
		public static bool? TextPatternGt(string par6285, string par6286)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLe

		[Sql.Function(Name="pg_catalog.text_pattern_le", ServerSideOnly=true)]
		public static bool? TextPatternLe(string par6288, string par6289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLt

		[Sql.Function(Name="pg_catalog.text_pattern_lt", ServerSideOnly=true)]
		public static bool? TextPatternLt(string par6291, string par6292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextSmaller

		[Sql.Function(Name="pg_catalog.text_smaller", ServerSideOnly=true)]
		public static string TextSmaller(string par6294, string par6295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textanycat

		[Sql.Function(Name="pg_catalog.textanycat", ServerSideOnly=true)]
		public static string Textanycat(string par6297, object par6298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textcat

		[Sql.Function(Name="pg_catalog.textcat", ServerSideOnly=true)]
		public static string Textcat(string par6300, string par6301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texteq

		[Sql.Function(Name="pg_catalog.texteq", ServerSideOnly=true)]
		public static bool? Texteq(string par6303, string par6304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticlike

		[Sql.Function(Name="pg_catalog.texticlike", ServerSideOnly=true)]
		public static bool? Texticlike(string par6306, string par6307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticnlike

		[Sql.Function(Name="pg_catalog.texticnlike", ServerSideOnly=true)]
		public static bool? Texticnlike(string par6309, string par6310)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexeq

		[Sql.Function(Name="pg_catalog.texticregexeq", ServerSideOnly=true)]
		public static bool? Texticregexeq(string par6312, string par6313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexne

		[Sql.Function(Name="pg_catalog.texticregexne", ServerSideOnly=true)]
		public static bool? Texticregexne(string par6315, string par6316)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textin

		[Sql.Function(Name="pg_catalog.textin", ServerSideOnly=true)]
		public static string Textin(object par6318)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlen

		[Sql.Function(Name="pg_catalog.textlen", ServerSideOnly=true)]
		public static int? Textlen(string par6320)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlike

		[Sql.Function(Name="pg_catalog.textlike", ServerSideOnly=true)]
		public static bool? Textlike(string par6322, string par6323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textne

		[Sql.Function(Name="pg_catalog.textne", ServerSideOnly=true)]
		public static bool? Textne(string par6325, string par6326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textnlike

		[Sql.Function(Name="pg_catalog.textnlike", ServerSideOnly=true)]
		public static bool? Textnlike(string par6328, string par6329)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textout

		[Sql.Function(Name="pg_catalog.textout", ServerSideOnly=true)]
		public static object Textout(string par6331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textrecv

		[Sql.Function(Name="pg_catalog.textrecv", ServerSideOnly=true)]
		public static string Textrecv(object par6333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexeq

		[Sql.Function(Name="pg_catalog.textregexeq", ServerSideOnly=true)]
		public static bool? Textregexeq(string par6335, string par6336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexne

		[Sql.Function(Name="pg_catalog.textregexne", ServerSideOnly=true)]
		public static bool? Textregexne(string par6338, string par6339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textsend

		[Sql.Function(Name="pg_catalog.textsend", ServerSideOnly=true)]
		public static byte[] Textsend(string par6341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusInit

		[Sql.Function(Name="pg_catalog.thesaurus_init", ServerSideOnly=true)]
		public static object ThesaurusInit(object par6343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusLexize

		[Sql.Function(Name="pg_catalog.thesaurus_lexize", ServerSideOnly=true)]
		public static object ThesaurusLexize(object par6345, object par6346, object par6347, object par6348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tideq

		[Sql.Function(Name="pg_catalog.tideq", ServerSideOnly=true)]
		public static bool? Tideq(object par6350, object par6351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidge

		[Sql.Function(Name="pg_catalog.tidge", ServerSideOnly=true)]
		public static bool? Tidge(object par6353, object par6354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidgt

		[Sql.Function(Name="pg_catalog.tidgt", ServerSideOnly=true)]
		public static bool? Tidgt(object par6356, object par6357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidin

		[Sql.Function(Name="pg_catalog.tidin", ServerSideOnly=true)]
		public static object Tidin(object par6359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlarger

		[Sql.Function(Name="pg_catalog.tidlarger", ServerSideOnly=true)]
		public static object Tidlarger(object par6361, object par6362)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidle

		[Sql.Function(Name="pg_catalog.tidle", ServerSideOnly=true)]
		public static bool? Tidle(object par6364, object par6365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlt

		[Sql.Function(Name="pg_catalog.tidlt", ServerSideOnly=true)]
		public static bool? Tidlt(object par6367, object par6368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidne

		[Sql.Function(Name="pg_catalog.tidne", ServerSideOnly=true)]
		public static bool? Tidne(object par6370, object par6371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidout

		[Sql.Function(Name="pg_catalog.tidout", ServerSideOnly=true)]
		public static object Tidout(object par6373)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidrecv

		[Sql.Function(Name="pg_catalog.tidrecv", ServerSideOnly=true)]
		public static object Tidrecv(object par6375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsend

		[Sql.Function(Name="pg_catalog.tidsend", ServerSideOnly=true)]
		public static byte[] Tidsend(object par6377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsmaller

		[Sql.Function(Name="pg_catalog.tidsmaller", ServerSideOnly=true)]
		public static object Tidsmaller(object par6379, object par6380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Time

		[Sql.Function(Name="pg_catalog.time", ServerSideOnly=true)]
		public static TimeSpan? Time(DateTimeOffset? par6393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeCmp

		[Sql.Function(Name="pg_catalog.time_cmp", ServerSideOnly=true)]
		public static int? TimeCmp(TimeSpan? par6395, TimeSpan? par6396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeEq

		[Sql.Function(Name="pg_catalog.time_eq", ServerSideOnly=true)]
		public static bool? TimeEq(TimeSpan? par6398, TimeSpan? par6399)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGe

		[Sql.Function(Name="pg_catalog.time_ge", ServerSideOnly=true)]
		public static bool? TimeGe(TimeSpan? par6401, TimeSpan? par6402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGt

		[Sql.Function(Name="pg_catalog.time_gt", ServerSideOnly=true)]
		public static bool? TimeGt(TimeSpan? par6404, TimeSpan? par6405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeHash

		[Sql.Function(Name="pg_catalog.time_hash", ServerSideOnly=true)]
		public static int? TimeHash(TimeSpan? par6407)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeIn

		[Sql.Function(Name="pg_catalog.time_in", ServerSideOnly=true)]
		public static TimeSpan? TimeIn(object par6409, int? par6410, int? par6411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLarger

		[Sql.Function(Name="pg_catalog.time_larger", ServerSideOnly=true)]
		public static TimeSpan? TimeLarger(TimeSpan? par6413, TimeSpan? par6414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLe

		[Sql.Function(Name="pg_catalog.time_le", ServerSideOnly=true)]
		public static bool? TimeLe(TimeSpan? par6416, TimeSpan? par6417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLt

		[Sql.Function(Name="pg_catalog.time_lt", ServerSideOnly=true)]
		public static bool? TimeLt(TimeSpan? par6419, TimeSpan? par6420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiInterval

		[Sql.Function(Name="pg_catalog.time_mi_interval", ServerSideOnly=true)]
		public static TimeSpan? TimeMiInterval(TimeSpan? par6422, NpgsqlTimeSpan? par6423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiTime

		[Sql.Function(Name="pg_catalog.time_mi_time", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimeMiTime(TimeSpan? par6425, TimeSpan? par6426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeNe

		[Sql.Function(Name="pg_catalog.time_ne", ServerSideOnly=true)]
		public static bool? TimeNe(TimeSpan? par6428, TimeSpan? par6429)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeOut

		[Sql.Function(Name="pg_catalog.time_out", ServerSideOnly=true)]
		public static object TimeOut(TimeSpan? par6431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimePlInterval

		[Sql.Function(Name="pg_catalog.time_pl_interval", ServerSideOnly=true)]
		public static TimeSpan? TimePlInterval(TimeSpan? par6433, NpgsqlTimeSpan? par6434)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeRecv

		[Sql.Function(Name="pg_catalog.time_recv", ServerSideOnly=true)]
		public static TimeSpan? TimeRecv(object par6436, int? par6437, int? par6438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSend

		[Sql.Function(Name="pg_catalog.time_send", ServerSideOnly=true)]
		public static byte[] TimeSend(TimeSpan? par6440)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSmaller

		[Sql.Function(Name="pg_catalog.time_smaller", ServerSideOnly=true)]
		public static TimeSpan? TimeSmaller(TimeSpan? par6442, TimeSpan? par6443)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeTransform

		[Sql.Function(Name="pg_catalog.time_transform", ServerSideOnly=true)]
		public static object TimeTransform(object par6445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimedatePl

		[Sql.Function(Name="pg_catalog.timedate_pl", ServerSideOnly=true)]
		public static DateTime? TimedatePl(TimeSpan? par6447, NpgsqlDate? par6448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timemi

		[Sql.Function(Name="pg_catalog.timemi", ServerSideOnly=true)]
		public static object Timemi(object par6450, object par6451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timenow

		[Sql.Function(Name="pg_catalog.timenow", ServerSideOnly=true)]
		public static object Timenow()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timeofday

		[Sql.Function(Name="pg_catalog.timeofday", ServerSideOnly=true)]
		public static string Timeofday()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timepl

		[Sql.Function(Name="pg_catalog.timepl", ServerSideOnly=true)]
		public static object Timepl(object par6455, object par6456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamp

		[Sql.Function(Name="pg_catalog.timestamp", ServerSideOnly=true)]
		public static DateTime? Timestamp(DateTimeOffset? par6468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmp

		[Sql.Function(Name="pg_catalog.timestamp_cmp", ServerSideOnly=true)]
		public static int? TimestampCmp(DateTime? par6470, DateTime? par6471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpDate

		[Sql.Function(Name="pg_catalog.timestamp_cmp_date", ServerSideOnly=true)]
		public static int? TimestampCmpDate(DateTime? par6473, NpgsqlDate? par6474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_cmp_timestamptz", ServerSideOnly=true)]
		public static int? TimestampCmpTimestamptz(DateTime? par6476, DateTimeOffset? par6477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEq

		[Sql.Function(Name="pg_catalog.timestamp_eq", ServerSideOnly=true)]
		public static bool? TimestampEq(DateTime? par6479, DateTime? par6480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqDate

		[Sql.Function(Name="pg_catalog.timestamp_eq_date", ServerSideOnly=true)]
		public static bool? TimestampEqDate(DateTime? par6482, NpgsqlDate? par6483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_eq_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampEqTimestamptz(DateTime? par6485, DateTimeOffset? par6486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGe

		[Sql.Function(Name="pg_catalog.timestamp_ge", ServerSideOnly=true)]
		public static bool? TimestampGe(DateTime? par6488, DateTime? par6489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeDate

		[Sql.Function(Name="pg_catalog.timestamp_ge_date", ServerSideOnly=true)]
		public static bool? TimestampGeDate(DateTime? par6491, NpgsqlDate? par6492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ge_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGeTimestamptz(DateTime? par6494, DateTimeOffset? par6495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGt

		[Sql.Function(Name="pg_catalog.timestamp_gt", ServerSideOnly=true)]
		public static bool? TimestampGt(DateTime? par6497, DateTime? par6498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtDate

		[Sql.Function(Name="pg_catalog.timestamp_gt_date", ServerSideOnly=true)]
		public static bool? TimestampGtDate(DateTime? par6500, NpgsqlDate? par6501)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_gt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGtTimestamptz(DateTime? par6503, DateTimeOffset? par6504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampHash

		[Sql.Function(Name="pg_catalog.timestamp_hash", ServerSideOnly=true)]
		public static int? TimestampHash(DateTime? par6506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampIn

		[Sql.Function(Name="pg_catalog.timestamp_in", ServerSideOnly=true)]
		public static DateTime? TimestampIn(object par6508, int? par6509, int? par6510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampIzoneTransform

		[Sql.Function(Name="pg_catalog.timestamp_izone_transform", ServerSideOnly=true)]
		public static object TimestampIzoneTransform(object par6512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLarger

		[Sql.Function(Name="pg_catalog.timestamp_larger", ServerSideOnly=true)]
		public static DateTime? TimestampLarger(DateTime? par6514, DateTime? par6515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLe

		[Sql.Function(Name="pg_catalog.timestamp_le", ServerSideOnly=true)]
		public static bool? TimestampLe(DateTime? par6517, DateTime? par6518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeDate

		[Sql.Function(Name="pg_catalog.timestamp_le_date", ServerSideOnly=true)]
		public static bool? TimestampLeDate(DateTime? par6520, NpgsqlDate? par6521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_le_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLeTimestamptz(DateTime? par6523, DateTimeOffset? par6524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLt

		[Sql.Function(Name="pg_catalog.timestamp_lt", ServerSideOnly=true)]
		public static bool? TimestampLt(DateTime? par6526, DateTime? par6527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtDate

		[Sql.Function(Name="pg_catalog.timestamp_lt_date", ServerSideOnly=true)]
		public static bool? TimestampLtDate(DateTime? par6529, NpgsqlDate? par6530)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_lt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLtTimestamptz(DateTime? par6532, DateTimeOffset? par6533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMi

		[Sql.Function(Name="pg_catalog.timestamp_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestampMi(DateTime? par6535, DateTime? par6536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMiInterval

		[Sql.Function(Name="pg_catalog.timestamp_mi_interval", ServerSideOnly=true)]
		public static DateTime? TimestampMiInterval(DateTime? par6538, NpgsqlTimeSpan? par6539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNe

		[Sql.Function(Name="pg_catalog.timestamp_ne", ServerSideOnly=true)]
		public static bool? TimestampNe(DateTime? par6541, DateTime? par6542)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeDate

		[Sql.Function(Name="pg_catalog.timestamp_ne_date", ServerSideOnly=true)]
		public static bool? TimestampNeDate(DateTime? par6544, NpgsqlDate? par6545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ne_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampNeTimestamptz(DateTime? par6547, DateTimeOffset? par6548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampOut

		[Sql.Function(Name="pg_catalog.timestamp_out", ServerSideOnly=true)]
		public static object TimestampOut(DateTime? par6550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampPlInterval

		[Sql.Function(Name="pg_catalog.timestamp_pl_interval", ServerSideOnly=true)]
		public static DateTime? TimestampPlInterval(DateTime? par6552, NpgsqlTimeSpan? par6553)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampRecv

		[Sql.Function(Name="pg_catalog.timestamp_recv", ServerSideOnly=true)]
		public static DateTime? TimestampRecv(object par6555, int? par6556, int? par6557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSend

		[Sql.Function(Name="pg_catalog.timestamp_send", ServerSideOnly=true)]
		public static byte[] TimestampSend(DateTime? par6559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSmaller

		[Sql.Function(Name="pg_catalog.timestamp_smaller", ServerSideOnly=true)]
		public static DateTime? TimestampSmaller(DateTime? par6561, DateTime? par6562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSortsupport

		[Sql.Function(Name="pg_catalog.timestamp_sortsupport", ServerSideOnly=true)]
		public static object TimestampSortsupport(object par6563)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampTransform

		[Sql.Function(Name="pg_catalog.timestamp_transform", ServerSideOnly=true)]
		public static object TimestampTransform(object par6565)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampZoneTransform

		[Sql.Function(Name="pg_catalog.timestamp_zone_transform", ServerSideOnly=true)]
		public static object TimestampZoneTransform(object par6567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodin

		[Sql.Function(Name="pg_catalog.timestamptypmodin", ServerSideOnly=true)]
		public static int? Timestamptypmodin(object par6569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodout

		[Sql.Function(Name="pg_catalog.timestamptypmodout", ServerSideOnly=true)]
		public static object Timestamptypmodout(int? par6571)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptz

		[Sql.Function(Name="pg_catalog.timestamptz", ServerSideOnly=true)]
		public static DateTimeOffset? Timestamptz(DateTime? par6586)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp", ServerSideOnly=true)]
		public static int? TimestamptzCmp(DateTimeOffset? par6588, DateTimeOffset? par6589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpDate

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_date", ServerSideOnly=true)]
		public static int? TimestamptzCmpDate(DateTimeOffset? par6591, NpgsqlDate? par6592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_timestamp", ServerSideOnly=true)]
		public static int? TimestamptzCmpTimestamp(DateTimeOffset? par6594, DateTime? par6595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEq

		[Sql.Function(Name="pg_catalog.timestamptz_eq", ServerSideOnly=true)]
		public static bool? TimestamptzEq(DateTimeOffset? par6597, DateTimeOffset? par6598)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqDate

		[Sql.Function(Name="pg_catalog.timestamptz_eq_date", ServerSideOnly=true)]
		public static bool? TimestamptzEqDate(DateTimeOffset? par6600, NpgsqlDate? par6601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_eq_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzEqTimestamp(DateTimeOffset? par6603, DateTime? par6604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGe

		[Sql.Function(Name="pg_catalog.timestamptz_ge", ServerSideOnly=true)]
		public static bool? TimestamptzGe(DateTimeOffset? par6606, DateTimeOffset? par6607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ge_date", ServerSideOnly=true)]
		public static bool? TimestamptzGeDate(DateTimeOffset? par6609, NpgsqlDate? par6610)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ge_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGeTimestamp(DateTimeOffset? par6612, DateTime? par6613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGt

		[Sql.Function(Name="pg_catalog.timestamptz_gt", ServerSideOnly=true)]
		public static bool? TimestamptzGt(DateTimeOffset? par6615, DateTimeOffset? par6616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtDate

		[Sql.Function(Name="pg_catalog.timestamptz_gt_date", ServerSideOnly=true)]
		public static bool? TimestamptzGtDate(DateTimeOffset? par6618, NpgsqlDate? par6619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_gt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGtTimestamp(DateTimeOffset? par6621, DateTime? par6622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzIn

		[Sql.Function(Name="pg_catalog.timestamptz_in", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzIn(object par6624, int? par6625, int? par6626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLarger

		[Sql.Function(Name="pg_catalog.timestamptz_larger", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzLarger(DateTimeOffset? par6628, DateTimeOffset? par6629)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLe

		[Sql.Function(Name="pg_catalog.timestamptz_le", ServerSideOnly=true)]
		public static bool? TimestamptzLe(DateTimeOffset? par6631, DateTimeOffset? par6632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeDate

		[Sql.Function(Name="pg_catalog.timestamptz_le_date", ServerSideOnly=true)]
		public static bool? TimestamptzLeDate(DateTimeOffset? par6634, NpgsqlDate? par6635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_le_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLeTimestamp(DateTimeOffset? par6637, DateTime? par6638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLt

		[Sql.Function(Name="pg_catalog.timestamptz_lt", ServerSideOnly=true)]
		public static bool? TimestamptzLt(DateTimeOffset? par6640, DateTimeOffset? par6641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtDate

		[Sql.Function(Name="pg_catalog.timestamptz_lt_date", ServerSideOnly=true)]
		public static bool? TimestamptzLtDate(DateTimeOffset? par6643, NpgsqlDate? par6644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_lt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLtTimestamp(DateTimeOffset? par6646, DateTime? par6647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMi

		[Sql.Function(Name="pg_catalog.timestamptz_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestamptzMi(DateTimeOffset? par6649, DateTimeOffset? par6650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMiInterval

		[Sql.Function(Name="pg_catalog.timestamptz_mi_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzMiInterval(DateTimeOffset? par6652, NpgsqlTimeSpan? par6653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNe

		[Sql.Function(Name="pg_catalog.timestamptz_ne", ServerSideOnly=true)]
		public static bool? TimestamptzNe(DateTimeOffset? par6655, DateTimeOffset? par6656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ne_date", ServerSideOnly=true)]
		public static bool? TimestamptzNeDate(DateTimeOffset? par6658, NpgsqlDate? par6659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ne_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzNeTimestamp(DateTimeOffset? par6661, DateTime? par6662)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzOut

		[Sql.Function(Name="pg_catalog.timestamptz_out", ServerSideOnly=true)]
		public static object TimestamptzOut(DateTimeOffset? par6664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzPlInterval

		[Sql.Function(Name="pg_catalog.timestamptz_pl_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzPlInterval(DateTimeOffset? par6666, NpgsqlTimeSpan? par6667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzRecv

		[Sql.Function(Name="pg_catalog.timestamptz_recv", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzRecv(object par6669, int? par6670, int? par6671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSend

		[Sql.Function(Name="pg_catalog.timestamptz_send", ServerSideOnly=true)]
		public static byte[] TimestamptzSend(DateTimeOffset? par6673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSmaller

		[Sql.Function(Name="pg_catalog.timestamptz_smaller", ServerSideOnly=true)]
		public static DateTimeOffset? TimestamptzSmaller(DateTimeOffset? par6675, DateTimeOffset? par6676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodin

		[Sql.Function(Name="pg_catalog.timestamptztypmodin", ServerSideOnly=true)]
		public static int? Timestamptztypmodin(object par6678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodout

		[Sql.Function(Name="pg_catalog.timestamptztypmodout", ServerSideOnly=true)]
		public static object Timestamptztypmodout(int? par6680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodin

		[Sql.Function(Name="pg_catalog.timetypmodin", ServerSideOnly=true)]
		public static int? Timetypmodin(object par6682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodout

		[Sql.Function(Name="pg_catalog.timetypmodout", ServerSideOnly=true)]
		public static object Timetypmodout(int? par6684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetz

		[Sql.Function(Name="pg_catalog.timetz", ServerSideOnly=true)]
		public static DateTimeOffset? Timetz(TimeSpan? par6691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzCmp

		[Sql.Function(Name="pg_catalog.timetz_cmp", ServerSideOnly=true)]
		public static int? TimetzCmp(DateTimeOffset? par6693, DateTimeOffset? par6694)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzEq

		[Sql.Function(Name="pg_catalog.timetz_eq", ServerSideOnly=true)]
		public static bool? TimetzEq(DateTimeOffset? par6696, DateTimeOffset? par6697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGe

		[Sql.Function(Name="pg_catalog.timetz_ge", ServerSideOnly=true)]
		public static bool? TimetzGe(DateTimeOffset? par6699, DateTimeOffset? par6700)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGt

		[Sql.Function(Name="pg_catalog.timetz_gt", ServerSideOnly=true)]
		public static bool? TimetzGt(DateTimeOffset? par6702, DateTimeOffset? par6703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzHash

		[Sql.Function(Name="pg_catalog.timetz_hash", ServerSideOnly=true)]
		public static int? TimetzHash(DateTimeOffset? par6705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzIn

		[Sql.Function(Name="pg_catalog.timetz_in", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzIn(object par6707, int? par6708, int? par6709)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLarger

		[Sql.Function(Name="pg_catalog.timetz_larger", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzLarger(DateTimeOffset? par6711, DateTimeOffset? par6712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLe

		[Sql.Function(Name="pg_catalog.timetz_le", ServerSideOnly=true)]
		public static bool? TimetzLe(DateTimeOffset? par6714, DateTimeOffset? par6715)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLt

		[Sql.Function(Name="pg_catalog.timetz_lt", ServerSideOnly=true)]
		public static bool? TimetzLt(DateTimeOffset? par6717, DateTimeOffset? par6718)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzMiInterval

		[Sql.Function(Name="pg_catalog.timetz_mi_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzMiInterval(DateTimeOffset? par6720, NpgsqlTimeSpan? par6721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzNe

		[Sql.Function(Name="pg_catalog.timetz_ne", ServerSideOnly=true)]
		public static bool? TimetzNe(DateTimeOffset? par6723, DateTimeOffset? par6724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzOut

		[Sql.Function(Name="pg_catalog.timetz_out", ServerSideOnly=true)]
		public static object TimetzOut(DateTimeOffset? par6726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzPlInterval

		[Sql.Function(Name="pg_catalog.timetz_pl_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzPlInterval(DateTimeOffset? par6728, NpgsqlTimeSpan? par6729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzRecv

		[Sql.Function(Name="pg_catalog.timetz_recv", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzRecv(object par6731, int? par6732, int? par6733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSend

		[Sql.Function(Name="pg_catalog.timetz_send", ServerSideOnly=true)]
		public static byte[] TimetzSend(DateTimeOffset? par6735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSmaller

		[Sql.Function(Name="pg_catalog.timetz_smaller", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzSmaller(DateTimeOffset? par6737, DateTimeOffset? par6738)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzdatePl

		[Sql.Function(Name="pg_catalog.timetzdate_pl", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzdatePl(DateTimeOffset? par6740, NpgsqlDate? par6741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodin

		[Sql.Function(Name="pg_catalog.timetztypmodin", ServerSideOnly=true)]
		public static int? Timetztypmodin(object par6743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodout

		[Sql.Function(Name="pg_catalog.timetztypmodout", ServerSideOnly=true)]
		public static object Timetztypmodout(int? par6745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timezone

		[Sql.Function(Name="pg_catalog.timezone", ServerSideOnly=true)]
		public static DateTimeOffset? Timezone(NpgsqlTimeSpan? par6762, DateTime? par6763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tinterval

		[Sql.Function(Name="pg_catalog.tinterval", ServerSideOnly=true)]
		public static object Tinterval(object par6765, object par6766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalct

		[Sql.Function(Name="pg_catalog.tintervalct", ServerSideOnly=true)]
		public static bool? Tintervalct(object par6768, object par6769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalend

		[Sql.Function(Name="pg_catalog.tintervalend", ServerSideOnly=true)]
		public static object Tintervalend(object par6771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervaleq

		[Sql.Function(Name="pg_catalog.tintervaleq", ServerSideOnly=true)]
		public static bool? Tintervaleq(object par6773, object par6774)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalge

		[Sql.Function(Name="pg_catalog.tintervalge", ServerSideOnly=true)]
		public static bool? Tintervalge(object par6776, object par6777)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalgt

		[Sql.Function(Name="pg_catalog.tintervalgt", ServerSideOnly=true)]
		public static bool? Tintervalgt(object par6779, object par6780)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalin

		[Sql.Function(Name="pg_catalog.tintervalin", ServerSideOnly=true)]
		public static object Tintervalin(object par6782)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalle

		[Sql.Function(Name="pg_catalog.tintervalle", ServerSideOnly=true)]
		public static bool? Tintervalle(object par6784, object par6785)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalleneq

		[Sql.Function(Name="pg_catalog.tintervalleneq", ServerSideOnly=true)]
		public static bool? Tintervalleneq(object par6787, object par6788)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenge

		[Sql.Function(Name="pg_catalog.tintervallenge", ServerSideOnly=true)]
		public static bool? Tintervallenge(object par6790, object par6791)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallengt

		[Sql.Function(Name="pg_catalog.tintervallengt", ServerSideOnly=true)]
		public static bool? Tintervallengt(object par6793, object par6794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenle

		[Sql.Function(Name="pg_catalog.tintervallenle", ServerSideOnly=true)]
		public static bool? Tintervallenle(object par6796, object par6797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenlt

		[Sql.Function(Name="pg_catalog.tintervallenlt", ServerSideOnly=true)]
		public static bool? Tintervallenlt(object par6799, object par6800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenne

		[Sql.Function(Name="pg_catalog.tintervallenne", ServerSideOnly=true)]
		public static bool? Tintervallenne(object par6802, object par6803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallt

		[Sql.Function(Name="pg_catalog.tintervallt", ServerSideOnly=true)]
		public static bool? Tintervallt(object par6805, object par6806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalne

		[Sql.Function(Name="pg_catalog.tintervalne", ServerSideOnly=true)]
		public static bool? Tintervalne(object par6808, object par6809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalout

		[Sql.Function(Name="pg_catalog.tintervalout", ServerSideOnly=true)]
		public static object Tintervalout(object par6811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalov

		[Sql.Function(Name="pg_catalog.tintervalov", ServerSideOnly=true)]
		public static bool? Tintervalov(object par6813, object par6814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalrecv

		[Sql.Function(Name="pg_catalog.tintervalrecv", ServerSideOnly=true)]
		public static object Tintervalrecv(object par6816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalrel

		[Sql.Function(Name="pg_catalog.tintervalrel", ServerSideOnly=true)]
		public static object Tintervalrel(object par6818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalsame

		[Sql.Function(Name="pg_catalog.tintervalsame", ServerSideOnly=true)]
		public static bool? Tintervalsame(object par6820, object par6821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalsend

		[Sql.Function(Name="pg_catalog.tintervalsend", ServerSideOnly=true)]
		public static byte[] Tintervalsend(object par6823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalstart

		[Sql.Function(Name="pg_catalog.tintervalstart", ServerSideOnly=true)]
		public static object Tintervalstart(object par6825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToAscii

		[Sql.Function(Name="pg_catalog.to_ascii", ServerSideOnly=true)]
		public static string ToAscii(string par6832, string par6833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToChar

		[Sql.Function(Name="pg_catalog.to_char", ServerSideOnly=true)]
		public static string ToChar(DateTime? par6856, string par6857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToDate

		[Sql.Function(Name="pg_catalog.to_date", ServerSideOnly=true)]
		public static NpgsqlDate? ToDate(string par6859, string par6860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToHex

		[Sql.Function(Name="pg_catalog.to_hex", ServerSideOnly=true)]
		public static string ToHex(long? par6864)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJson

		[Sql.Function(Name="pg_catalog.to_json", ServerSideOnly=true)]
		public static string ToJson(object par6866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJsonb

		[Sql.Function(Name="pg_catalog.to_jsonb", ServerSideOnly=true)]
		public static string ToJsonb(object par6868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToNumber

		[Sql.Function(Name="pg_catalog.to_number", ServerSideOnly=true)]
		public static decimal? ToNumber(string par6870, string par6871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegclass

		[Sql.Function(Name="pg_catalog.to_regclass", ServerSideOnly=true)]
		public static object ToRegclass(string par6873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegnamespace

		[Sql.Function(Name="pg_catalog.to_regnamespace", ServerSideOnly=true)]
		public static object ToRegnamespace(string par6875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoper

		[Sql.Function(Name="pg_catalog.to_regoper", ServerSideOnly=true)]
		public static object ToRegoper(string par6877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoperator

		[Sql.Function(Name="pg_catalog.to_regoperator", ServerSideOnly=true)]
		public static object ToRegoperator(string par6879)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegproc

		[Sql.Function(Name="pg_catalog.to_regproc", ServerSideOnly=true)]
		public static object ToRegproc(string par6881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegprocedure

		[Sql.Function(Name="pg_catalog.to_regprocedure", ServerSideOnly=true)]
		public static object ToRegprocedure(string par6883)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegrole

		[Sql.Function(Name="pg_catalog.to_regrole", ServerSideOnly=true)]
		public static object ToRegrole(string par6885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegtype

		[Sql.Function(Name="pg_catalog.to_regtype", ServerSideOnly=true)]
		public static object ToRegtype(string par6887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTimestamp

		[Sql.Function(Name="pg_catalog.to_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? ToTimestamp(string par6891, string par6892)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsquery

		[Sql.Function(Name="pg_catalog.to_tsquery", ServerSideOnly=true)]
		public static object ToTsquery(string par6897)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsvector

		[Sql.Function(Name="pg_catalog.to_tsvector", ServerSideOnly=true)]
		public static object ToTsvector(string par6902)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TransactionTimestamp

		[Sql.Function(Name="pg_catalog.transaction_timestamp", ServerSideOnly=true)]
		public static DateTimeOffset? TransactionTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Translate

		[Sql.Function(Name="pg_catalog.translate", ServerSideOnly=true)]
		public static string Translate(string par6905, string par6906, string par6907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerIn

		[Sql.Function(Name="pg_catalog.trigger_in", ServerSideOnly=true)]
		public static object TriggerIn(object par6909)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerOut

		[Sql.Function(Name="pg_catalog.trigger_out", ServerSideOnly=true)]
		public static object TriggerOut(object par6911)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Trunc

		[Sql.Function(Name="pg_catalog.trunc", ServerSideOnly=true)]
		public static PhysicalAddress Trunc(PhysicalAddress par6920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsDelete

		[Sql.Function(Name="pg_catalog.ts_delete", ServerSideOnly=true)]
		public static object TsDelete(object par6925, object par6926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsFilter

		[Sql.Function(Name="pg_catalog.ts_filter", ServerSideOnly=true)]
		public static object TsFilter(object par6928, object par6929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsHeadline

		[Sql.Function(Name="pg_catalog.ts_headline", ServerSideOnly=true)]
		public static string TsHeadline(string par6944, object par6945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsLexize

		[Sql.Function(Name="pg_catalog.ts_lexize", ServerSideOnly=true)]
		public static object TsLexize(object par6947, string par6948)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchQv

		[Sql.Function(Name="pg_catalog.ts_match_qv", ServerSideOnly=true)]
		public static bool? TsMatchQv(object par6950, object par6951)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTq

		[Sql.Function(Name="pg_catalog.ts_match_tq", ServerSideOnly=true)]
		public static bool? TsMatchTq(string par6953, object par6954)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTt

		[Sql.Function(Name="pg_catalog.ts_match_tt", ServerSideOnly=true)]
		public static bool? TsMatchTt(string par6956, string par6957)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchVq

		[Sql.Function(Name="pg_catalog.ts_match_vq", ServerSideOnly=true)]
		public static bool? TsMatchVq(object par6959, object par6960)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRank

		[Sql.Function(Name="pg_catalog.ts_rank", ServerSideOnly=true)]
		public static float? TsRank(object par6975, object par6976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRankCd

		[Sql.Function(Name="pg_catalog.ts_rank_cd", ServerSideOnly=true)]
		public static float? TsRankCd(object par6991, object par6992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRewrite

		[Sql.Function(Name="pg_catalog.ts_rewrite", ServerSideOnly=true)]
		public static object TsRewrite(object par6998, string par6999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsTypanalyze

		[Sql.Function(Name="pg_catalog.ts_typanalyze", ServerSideOnly=true)]
		public static bool? TsTypanalyze(object par7001)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerIn

		[Sql.Function(Name="pg_catalog.tsm_handler_in", ServerSideOnly=true)]
		public static object TsmHandlerIn(object par7003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerOut

		[Sql.Function(Name="pg_catalog.tsm_handler_out", ServerSideOnly=true)]
		public static object TsmHandlerOut(object par7005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchjoinsel

		[Sql.Function(Name="pg_catalog.tsmatchjoinsel", ServerSideOnly=true)]
		public static double? Tsmatchjoinsel(object par7007, int? par7008, object par7009, short? par7010, object par7011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchsel

		[Sql.Function(Name="pg_catalog.tsmatchsel", ServerSideOnly=true)]
		public static double? Tsmatchsel(object par7013, int? par7014, object par7015, int? par7016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontained

		[Sql.Function(Name="pg_catalog.tsq_mcontained", ServerSideOnly=true)]
		public static bool? TsqMcontained(object par7018, object par7019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontains

		[Sql.Function(Name="pg_catalog.tsq_mcontains", ServerSideOnly=true)]
		public static bool? TsqMcontains(object par7021, object par7022)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryAnd

		[Sql.Function(Name="pg_catalog.tsquery_and", ServerSideOnly=true)]
		public static object TsqueryAnd(object par7024, object par7025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryCmp

		[Sql.Function(Name="pg_catalog.tsquery_cmp", ServerSideOnly=true)]
		public static int? TsqueryCmp(object par7027, object par7028)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryEq

		[Sql.Function(Name="pg_catalog.tsquery_eq", ServerSideOnly=true)]
		public static bool? TsqueryEq(object par7030, object par7031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGe

		[Sql.Function(Name="pg_catalog.tsquery_ge", ServerSideOnly=true)]
		public static bool? TsqueryGe(object par7033, object par7034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGt

		[Sql.Function(Name="pg_catalog.tsquery_gt", ServerSideOnly=true)]
		public static bool? TsqueryGt(object par7036, object par7037)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLe

		[Sql.Function(Name="pg_catalog.tsquery_le", ServerSideOnly=true)]
		public static bool? TsqueryLe(object par7039, object par7040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLt

		[Sql.Function(Name="pg_catalog.tsquery_lt", ServerSideOnly=true)]
		public static bool? TsqueryLt(object par7042, object par7043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNe

		[Sql.Function(Name="pg_catalog.tsquery_ne", ServerSideOnly=true)]
		public static bool? TsqueryNe(object par7045, object par7046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNot

		[Sql.Function(Name="pg_catalog.tsquery_not", ServerSideOnly=true)]
		public static object TsqueryNot(object par7048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryOr

		[Sql.Function(Name="pg_catalog.tsquery_or", ServerSideOnly=true)]
		public static object TsqueryOr(object par7050, object par7051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryPhrase

		[Sql.Function(Name="pg_catalog.tsquery_phrase", ServerSideOnly=true)]
		public static object TsqueryPhrase(object par7056, object par7057, int? par7058)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryin

		[Sql.Function(Name="pg_catalog.tsqueryin", ServerSideOnly=true)]
		public static object Tsqueryin(object par7060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryout

		[Sql.Function(Name="pg_catalog.tsqueryout", ServerSideOnly=true)]
		public static object Tsqueryout(object par7062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryrecv

		[Sql.Function(Name="pg_catalog.tsqueryrecv", ServerSideOnly=true)]
		public static object Tsqueryrecv(object par7064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsquerysend

		[Sql.Function(Name="pg_catalog.tsquerysend", ServerSideOnly=true)]
		public static byte[] Tsquerysend(object par7066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsrange

		[Sql.Function(Name="pg_catalog.tsrange", ServerSideOnly=true)]
		public static object Tsrange(DateTime? par7071, DateTime? par7072, string par7073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsrangeSubdiff

		[Sql.Function(Name="pg_catalog.tsrange_subdiff", ServerSideOnly=true)]
		public static double? TsrangeSubdiff(DateTime? par7075, DateTime? par7076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tstzrange

		[Sql.Function(Name="pg_catalog.tstzrange", ServerSideOnly=true)]
		public static object Tstzrange(DateTimeOffset? par7081, DateTimeOffset? par7082, string par7083)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TstzrangeSubdiff

		[Sql.Function(Name="pg_catalog.tstzrange_subdiff", ServerSideOnly=true)]
		public static double? TstzrangeSubdiff(DateTimeOffset? par7085, DateTimeOffset? par7086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorCmp

		[Sql.Function(Name="pg_catalog.tsvector_cmp", ServerSideOnly=true)]
		public static int? TsvectorCmp(object par7088, object par7089)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorConcat

		[Sql.Function(Name="pg_catalog.tsvector_concat", ServerSideOnly=true)]
		public static object TsvectorConcat(object par7091, object par7092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorEq

		[Sql.Function(Name="pg_catalog.tsvector_eq", ServerSideOnly=true)]
		public static bool? TsvectorEq(object par7094, object par7095)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGe

		[Sql.Function(Name="pg_catalog.tsvector_ge", ServerSideOnly=true)]
		public static bool? TsvectorGe(object par7097, object par7098)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGt

		[Sql.Function(Name="pg_catalog.tsvector_gt", ServerSideOnly=true)]
		public static bool? TsvectorGt(object par7100, object par7101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLe

		[Sql.Function(Name="pg_catalog.tsvector_le", ServerSideOnly=true)]
		public static bool? TsvectorLe(object par7103, object par7104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLt

		[Sql.Function(Name="pg_catalog.tsvector_lt", ServerSideOnly=true)]
		public static bool? TsvectorLt(object par7106, object par7107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorNe

		[Sql.Function(Name="pg_catalog.tsvector_ne", ServerSideOnly=true)]
		public static bool? TsvectorNe(object par7109, object par7110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorToArray

		[Sql.Function(Name="pg_catalog.tsvector_to_array", ServerSideOnly=true)]
		public static object TsvectorToArray(object par7112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTrigger

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger", ServerSideOnly=true)]
		public static object TsvectorUpdateTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTriggerColumn

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger_column", ServerSideOnly=true)]
		public static object TsvectorUpdateTriggerColumn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorin

		[Sql.Function(Name="pg_catalog.tsvectorin", ServerSideOnly=true)]
		public static object Tsvectorin(object par7116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorout

		[Sql.Function(Name="pg_catalog.tsvectorout", ServerSideOnly=true)]
		public static object Tsvectorout(object par7118)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorrecv

		[Sql.Function(Name="pg_catalog.tsvectorrecv", ServerSideOnly=true)]
		public static object Tsvectorrecv(object par7120)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorsend

		[Sql.Function(Name="pg_catalog.tsvectorsend", ServerSideOnly=true)]
		public static byte[] Tsvectorsend(object par7122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrent

		[Sql.Function(Name="pg_catalog.txid_current", ServerSideOnly=true)]
		public static long? TxidCurrent()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrentSnapshot

		[Sql.Function(Name="pg_catalog.txid_current_snapshot", ServerSideOnly=true)]
		public static object TxidCurrentSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotIn

		[Sql.Function(Name="pg_catalog.txid_snapshot_in", ServerSideOnly=true)]
		public static object TxidSnapshotIn(object par7126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotOut

		[Sql.Function(Name="pg_catalog.txid_snapshot_out", ServerSideOnly=true)]
		public static object TxidSnapshotOut(object par7128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotRecv

		[Sql.Function(Name="pg_catalog.txid_snapshot_recv", ServerSideOnly=true)]
		public static object TxidSnapshotRecv(object par7130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotSend

		[Sql.Function(Name="pg_catalog.txid_snapshot_send", ServerSideOnly=true)]
		public static byte[] TxidSnapshotSend(object par7132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmax

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmax", ServerSideOnly=true)]
		public static long? TxidSnapshotXmax(object par7135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmin

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmin", ServerSideOnly=true)]
		public static long? TxidSnapshotXmin(object par7137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidVisibleInSnapshot

		[Sql.Function(Name="pg_catalog.txid_visible_in_snapshot", ServerSideOnly=true)]
		public static bool? TxidVisibleInSnapshot(long? par7139, object par7140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UhcToUtf8

		[Sql.Function(Name="pg_catalog.uhc_to_utf8", ServerSideOnly=true)]
		public static object UhcToUtf8(int? par7141, int? par7142, object par7143, object par7144, int? par7145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UniqueKeyRecheck

		[Sql.Function(Name="pg_catalog.unique_key_recheck", ServerSideOnly=true)]
		public static object UniqueKeyRecheck()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownin

		[Sql.Function(Name="pg_catalog.unknownin", ServerSideOnly=true)]
		public static object Unknownin(object par7148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownout

		[Sql.Function(Name="pg_catalog.unknownout", ServerSideOnly=true)]
		public static object Unknownout(object par7150)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownrecv

		[Sql.Function(Name="pg_catalog.unknownrecv", ServerSideOnly=true)]
		public static object Unknownrecv(object par7152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownsend

		[Sql.Function(Name="pg_catalog.unknownsend", ServerSideOnly=true)]
		public static byte[] Unknownsend(object par7154)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Upper

		[Sql.Function(Name="pg_catalog.upper", ServerSideOnly=true)]
		public static string Upper(string par7159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInc

		[Sql.Function(Name="pg_catalog.upper_inc", ServerSideOnly=true)]
		public static bool? UpperInc(object par7161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInf

		[Sql.Function(Name="pg_catalog.upper_inf", ServerSideOnly=true)]
		public static bool? UpperInf(object par7163)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToAscii

		[Sql.Function(Name="pg_catalog.utf8_to_ascii", ServerSideOnly=true)]
		public static object Utf8ToAscii(int? par7164, int? par7165, object par7166, object par7167, int? par7168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToBig5

		[Sql.Function(Name="pg_catalog.utf8_to_big5", ServerSideOnly=true)]
		public static object Utf8ToBig5(int? par7169, int? par7170, object par7171, object par7172, int? par7173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucCn

		[Sql.Function(Name="pg_catalog.utf8_to_euc_cn", ServerSideOnly=true)]
		public static object Utf8ToEucCn(int? par7174, int? par7175, object par7176, object par7177, int? par7178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jis_2004", ServerSideOnly=true)]
		public static object Utf8ToEucJis2004(int? par7179, int? par7180, object par7181, object par7182, int? par7183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJp

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jp", ServerSideOnly=true)]
		public static object Utf8ToEucJp(int? par7184, int? par7185, object par7186, object par7187, int? par7188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucKr

		[Sql.Function(Name="pg_catalog.utf8_to_euc_kr", ServerSideOnly=true)]
		public static object Utf8ToEucKr(int? par7189, int? par7190, object par7191, object par7192, int? par7193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucTw

		[Sql.Function(Name="pg_catalog.utf8_to_euc_tw", ServerSideOnly=true)]
		public static object Utf8ToEucTw(int? par7194, int? par7195, object par7196, object par7197, int? par7198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGb18030

		[Sql.Function(Name="pg_catalog.utf8_to_gb18030", ServerSideOnly=true)]
		public static object Utf8ToGb18030(int? par7199, int? par7200, object par7201, object par7202, int? par7203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGbk

		[Sql.Function(Name="pg_catalog.utf8_to_gbk", ServerSideOnly=true)]
		public static object Utf8ToGbk(int? par7204, int? par7205, object par7206, object par7207, int? par7208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso88591

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859_1", ServerSideOnly=true)]
		public static object Utf8ToIso88591(int? par7209, int? par7210, object par7211, object par7212, int? par7213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso8859

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859", ServerSideOnly=true)]
		public static object Utf8ToIso8859(int? par7214, int? par7215, object par7216, object par7217, int? par7218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToJohab

		[Sql.Function(Name="pg_catalog.utf8_to_johab", ServerSideOnly=true)]
		public static object Utf8ToJohab(int? par7219, int? par7220, object par7221, object par7222, int? par7223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8r

		[Sql.Function(Name="pg_catalog.utf8_to_koi8r", ServerSideOnly=true)]
		public static object Utf8ToKoi8r(int? par7224, int? par7225, object par7226, object par7227, int? par7228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8u

		[Sql.Function(Name="pg_catalog.utf8_to_koi8u", ServerSideOnly=true)]
		public static object Utf8ToKoi8u(int? par7229, int? par7230, object par7231, object par7232, int? par7233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToShiftJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_shift_jis_2004", ServerSideOnly=true)]
		public static object Utf8ToShiftJis2004(int? par7234, int? par7235, object par7236, object par7237, int? par7238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToSjis

		[Sql.Function(Name="pg_catalog.utf8_to_sjis", ServerSideOnly=true)]
		public static object Utf8ToSjis(int? par7239, int? par7240, object par7241, object par7242, int? par7243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToUhc

		[Sql.Function(Name="pg_catalog.utf8_to_uhc", ServerSideOnly=true)]
		public static object Utf8ToUhc(int? par7244, int? par7245, object par7246, object par7247, int? par7248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToWin

		[Sql.Function(Name="pg_catalog.utf8_to_win", ServerSideOnly=true)]
		public static object Utf8ToWin(int? par7249, int? par7250, object par7251, object par7252, int? par7253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidCmp

		[Sql.Function(Name="pg_catalog.uuid_cmp", ServerSideOnly=true)]
		public static int? UuidCmp(Guid? par7255, Guid? par7256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidEq

		[Sql.Function(Name="pg_catalog.uuid_eq", ServerSideOnly=true)]
		public static bool? UuidEq(Guid? par7258, Guid? par7259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGe

		[Sql.Function(Name="pg_catalog.uuid_ge", ServerSideOnly=true)]
		public static bool? UuidGe(Guid? par7261, Guid? par7262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGt

		[Sql.Function(Name="pg_catalog.uuid_gt", ServerSideOnly=true)]
		public static bool? UuidGt(Guid? par7264, Guid? par7265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidHash

		[Sql.Function(Name="pg_catalog.uuid_hash", ServerSideOnly=true)]
		public static int? UuidHash(Guid? par7267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidIn

		[Sql.Function(Name="pg_catalog.uuid_in", ServerSideOnly=true)]
		public static Guid? UuidIn(object par7269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLe

		[Sql.Function(Name="pg_catalog.uuid_le", ServerSideOnly=true)]
		public static bool? UuidLe(Guid? par7271, Guid? par7272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLt

		[Sql.Function(Name="pg_catalog.uuid_lt", ServerSideOnly=true)]
		public static bool? UuidLt(Guid? par7274, Guid? par7275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidNe

		[Sql.Function(Name="pg_catalog.uuid_ne", ServerSideOnly=true)]
		public static bool? UuidNe(Guid? par7277, Guid? par7278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidOut

		[Sql.Function(Name="pg_catalog.uuid_out", ServerSideOnly=true)]
		public static object UuidOut(Guid? par7280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidRecv

		[Sql.Function(Name="pg_catalog.uuid_recv", ServerSideOnly=true)]
		public static Guid? UuidRecv(object par7282)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidSend

		[Sql.Function(Name="pg_catalog.uuid_send", ServerSideOnly=true)]
		public static byte[] UuidSend(Guid? par7284)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidSortsupport

		[Sql.Function(Name="pg_catalog.uuid_sortsupport", ServerSideOnly=true)]
		public static object UuidSortsupport(object par7285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarPop

		[Sql.Function(Name="pg_catalog.var_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarSamp

		[Sql.Function(Name="pg_catalog.var_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7309)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbit

		[Sql.Function(Name="pg_catalog.varbit", ServerSideOnly=true)]
		public static BitArray Varbit(BitArray par7311, int? par7312, bool? par7313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitIn

		[Sql.Function(Name="pg_catalog.varbit_in", ServerSideOnly=true)]
		public static BitArray VarbitIn(object par7315, int? par7316, int? par7317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitOut

		[Sql.Function(Name="pg_catalog.varbit_out", ServerSideOnly=true)]
		public static object VarbitOut(BitArray par7319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitRecv

		[Sql.Function(Name="pg_catalog.varbit_recv", ServerSideOnly=true)]
		public static BitArray VarbitRecv(object par7321, int? par7322, int? par7323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitSend

		[Sql.Function(Name="pg_catalog.varbit_send", ServerSideOnly=true)]
		public static byte[] VarbitSend(BitArray par7325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitTransform

		[Sql.Function(Name="pg_catalog.varbit_transform", ServerSideOnly=true)]
		public static object VarbitTransform(object par7327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitcmp

		[Sql.Function(Name="pg_catalog.varbitcmp", ServerSideOnly=true)]
		public static int? Varbitcmp(BitArray par7329, BitArray par7330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbiteq

		[Sql.Function(Name="pg_catalog.varbiteq", ServerSideOnly=true)]
		public static bool? Varbiteq(BitArray par7332, BitArray par7333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitge

		[Sql.Function(Name="pg_catalog.varbitge", ServerSideOnly=true)]
		public static bool? Varbitge(BitArray par7335, BitArray par7336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitgt

		[Sql.Function(Name="pg_catalog.varbitgt", ServerSideOnly=true)]
		public static bool? Varbitgt(BitArray par7338, BitArray par7339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitle

		[Sql.Function(Name="pg_catalog.varbitle", ServerSideOnly=true)]
		public static bool? Varbitle(BitArray par7341, BitArray par7342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitlt

		[Sql.Function(Name="pg_catalog.varbitlt", ServerSideOnly=true)]
		public static bool? Varbitlt(BitArray par7344, BitArray par7345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitne

		[Sql.Function(Name="pg_catalog.varbitne", ServerSideOnly=true)]
		public static bool? Varbitne(BitArray par7347, BitArray par7348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodin

		[Sql.Function(Name="pg_catalog.varbittypmodin", ServerSideOnly=true)]
		public static int? Varbittypmodin(object par7350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodout

		[Sql.Function(Name="pg_catalog.varbittypmodout", ServerSideOnly=true)]
		public static object Varbittypmodout(int? par7352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchar

		[Sql.Function(Name="pg_catalog.varchar", ServerSideOnly=true)]
		public static string Varchar(string par7356, int? par7357, bool? par7358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarcharTransform

		[Sql.Function(Name="pg_catalog.varchar_transform", ServerSideOnly=true)]
		public static object VarcharTransform(object par7360)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharin

		[Sql.Function(Name="pg_catalog.varcharin", ServerSideOnly=true)]
		public static string Varcharin(object par7362, int? par7363, int? par7364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharout

		[Sql.Function(Name="pg_catalog.varcharout", ServerSideOnly=true)]
		public static object Varcharout(string par7366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharrecv

		[Sql.Function(Name="pg_catalog.varcharrecv", ServerSideOnly=true)]
		public static string Varcharrecv(object par7368, int? par7369, int? par7370)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharsend

		[Sql.Function(Name="pg_catalog.varcharsend", ServerSideOnly=true)]
		public static byte[] Varcharsend(string par7372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodin

		[Sql.Function(Name="pg_catalog.varchartypmodin", ServerSideOnly=true)]
		public static int? Varchartypmodin(object par7374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodout

		[Sql.Function(Name="pg_catalog.varchartypmodout", ServerSideOnly=true)]
		public static object Varchartypmodout(int? par7376)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Variance

		[Sql.Function(Name="pg_catalog.variance", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Variance<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Version

		[Sql.Function(Name="pg_catalog.version", ServerSideOnly=true)]
		public static string Version()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidIn

		[Sql.Function(Name="pg_catalog.void_in", ServerSideOnly=true)]
		public static object VoidIn(object par7390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidOut

		[Sql.Function(Name="pg_catalog.void_out", ServerSideOnly=true)]
		public static object VoidOut(object par7392)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidRecv

		[Sql.Function(Name="pg_catalog.void_recv", ServerSideOnly=true)]
		public static object VoidRecv(object par7393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidSend

		[Sql.Function(Name="pg_catalog.void_send", ServerSideOnly=true)]
		public static byte[] VoidSend(object par7395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Width

		[Sql.Function(Name="pg_catalog.width", ServerSideOnly=true)]
		public static double? Width(NpgsqlBox? par7397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WidthBucket

		[Sql.Function(Name="pg_catalog.width_bucket", ServerSideOnly=true)]
		public static int? WidthBucket(object par7409, object par7410)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WinToUtf8

		[Sql.Function(Name="pg_catalog.win_to_utf8", ServerSideOnly=true)]
		public static object WinToUtf8(int? par7411, int? par7412, object par7413, object par7414, int? par7415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToLatin2

		[Sql.Function(Name="pg_catalog.win1250_to_latin2", ServerSideOnly=true)]
		public static object Win1250ToLatin2(int? par7416, int? par7417, object par7418, object par7419, int? par7420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToMic

		[Sql.Function(Name="pg_catalog.win1250_to_mic", ServerSideOnly=true)]
		public static object Win1250ToMic(int? par7421, int? par7422, object par7423, object par7424, int? par7425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToIso

		[Sql.Function(Name="pg_catalog.win1251_to_iso", ServerSideOnly=true)]
		public static object Win1251ToIso(int? par7426, int? par7427, object par7428, object par7429, int? par7430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToKoi8r

		[Sql.Function(Name="pg_catalog.win1251_to_koi8r", ServerSideOnly=true)]
		public static object Win1251ToKoi8r(int? par7431, int? par7432, object par7433, object par7434, int? par7435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToMic

		[Sql.Function(Name="pg_catalog.win1251_to_mic", ServerSideOnly=true)]
		public static object Win1251ToMic(int? par7436, int? par7437, object par7438, object par7439, int? par7440)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToWin866

		[Sql.Function(Name="pg_catalog.win1251_to_win866", ServerSideOnly=true)]
		public static object Win1251ToWin866(int? par7441, int? par7442, object par7443, object par7444, int? par7445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToIso

		[Sql.Function(Name="pg_catalog.win866_to_iso", ServerSideOnly=true)]
		public static object Win866ToIso(int? par7446, int? par7447, object par7448, object par7449, int? par7450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToKoi8r

		[Sql.Function(Name="pg_catalog.win866_to_koi8r", ServerSideOnly=true)]
		public static object Win866ToKoi8r(int? par7451, int? par7452, object par7453, object par7454, int? par7455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToMic

		[Sql.Function(Name="pg_catalog.win866_to_mic", ServerSideOnly=true)]
		public static object Win866ToMic(int? par7456, int? par7457, object par7458, object par7459, int? par7460)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToWin1251

		[Sql.Function(Name="pg_catalog.win866_to_win1251", ServerSideOnly=true)]
		public static object Win866ToWin1251(int? par7461, int? par7462, object par7463, object par7464, int? par7465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideq

		[Sql.Function(Name="pg_catalog.xideq", ServerSideOnly=true)]
		public static bool? Xideq(int? par7467, int? par7468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideqint4

		[Sql.Function(Name="pg_catalog.xideqint4", ServerSideOnly=true)]
		public static bool? Xideqint4(int? par7470, int? par7471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidin

		[Sql.Function(Name="pg_catalog.xidin", ServerSideOnly=true)]
		public static int? Xidin(object par7473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidneq

		[Sql.Function(Name="pg_catalog.xidneq", ServerSideOnly=true)]
		public static bool? Xidneq(int? par7475, int? par7476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidneqint4

		[Sql.Function(Name="pg_catalog.xidneqint4", ServerSideOnly=true)]
		public static bool? Xidneqint4(int? par7478, int? par7479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidout

		[Sql.Function(Name="pg_catalog.xidout", ServerSideOnly=true)]
		public static object Xidout(int? par7481)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidrecv

		[Sql.Function(Name="pg_catalog.xidrecv", ServerSideOnly=true)]
		public static int? Xidrecv(object par7483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidsend

		[Sql.Function(Name="pg_catalog.xidsend", ServerSideOnly=true)]
		public static byte[] Xidsend(int? par7485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xml

		[Sql.Function(Name="pg_catalog.xml", ServerSideOnly=true)]
		public static string Xml(string par7487)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIn

		[Sql.Function(Name="pg_catalog.xml_in", ServerSideOnly=true)]
		public static string XmlIn(object par7489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormed

		[Sql.Function(Name="pg_catalog.xml_is_well_formed", ServerSideOnly=true)]
		public static bool? XmlIsWellFormed(string par7491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedContent

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_content", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedContent(string par7493)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedDocument

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_document", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedDocument(string par7495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlOut

		[Sql.Function(Name="pg_catalog.xml_out", ServerSideOnly=true)]
		public static object XmlOut(string par7497)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlRecv

		[Sql.Function(Name="pg_catalog.xml_recv", ServerSideOnly=true)]
		public static string XmlRecv(object par7499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlSend

		[Sql.Function(Name="pg_catalog.xml_send", ServerSideOnly=true)]
		public static byte[] XmlSend(string par7501)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlagg

		[Sql.Function(Name="pg_catalog.xmlagg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string Xmlagg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, string>> par7503)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlcomment

		[Sql.Function(Name="pg_catalog.xmlcomment", ServerSideOnly=true)]
		public static string Xmlcomment(string par7505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlconcat2

		[Sql.Function(Name="pg_catalog.xmlconcat2", ServerSideOnly=true)]
		public static string Xmlconcat2(string par7507, string par7508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlexists

		[Sql.Function(Name="pg_catalog.xmlexists", ServerSideOnly=true)]
		public static bool? Xmlexists(string par7510, string par7511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlvalidate

		[Sql.Function(Name="pg_catalog.xmlvalidate", ServerSideOnly=true)]
		public static bool? Xmlvalidate(string par7513, string par7514)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xpath

		[Sql.Function(Name="pg_catalog.xpath", ServerSideOnly=true)]
		public static object Xpath(string par7520, string par7521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XpathExists

		[Sql.Function(Name="pg_catalog.xpath_exists", ServerSideOnly=true)]
		public static bool? XpathExists(string par7527, string par7528)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static billing_Account Find(this ITable<billing_Account> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Appconfig Find(this ITable<billing_Appconfig> table, string Propid)
		{
			return table.FirstOrDefault(t =>
				t.Propid == Propid);
		}

		public static billing_AspNetRole Find(this ITable<billing_AspNetRole> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_AspNetUser Find(this ITable<billing_AspNetUser> table, string Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_AspNetUserClaim Find(this ITable<billing_AspNetUserClaim> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_AspNetUserLogin Find(this ITable<billing_AspNetUserLogin> table, string UserId, string LoginProvider, string ProviderKey)
		{
			return table.FirstOrDefault(t =>
				t.UserId        == UserId        &&
				t.LoginProvider == LoginProvider &&
				t.ProviderKey   == ProviderKey);
		}

		public static billing_AspNetUserRole Find(this ITable<billing_AspNetUserRole> table, string UserId, string RoleId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId &&
				t.RoleId == RoleId);
		}

		public static billing_Deverror Find(this ITable<billing_Deverror> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Devheatercoefficient Find(this ITable<billing_Devheatercoefficient> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Device Find(this ITable<billing_Device> table, string Devid)
		{
			return table.FirstOrDefault(t =>
				t.Devid == Devid);
		}

		public static billing_DevProp Find(this ITable<billing_DevProp> table, string DeviceId, int DevPropTypeId)
		{
			return table.FirstOrDefault(t =>
				t.DeviceId      == DeviceId &&
				t.DevPropTypeId == DevPropTypeId);
		}

		public static billing_DevPropType Find(this ITable<billing_DevPropType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Devreading Find(this ITable<billing_Devreading> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_DevReadingType Find(this ITable<billing_DevReadingType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Devstatus Find(this ITable<billing_Devstatus> table, int Statusid)
		{
			return table.FirstOrDefault(t =>
				t.Statusid == Statusid);
		}

		public static billing_Devtype Find(this ITable<billing_Devtype> table, int Devtypeid)
		{
			return table.FirstOrDefault(t =>
				t.Devtypeid == Devtypeid);
		}

		public static billing_Error Find(this ITable<billing_Error> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Group Find(this ITable<billing_Group> table, int Groupid)
		{
			return table.FirstOrDefault(t =>
				t.Groupid == Groupid);
		}

		public static billing_GroupDevice Find(this ITable<billing_GroupDevice> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Heatersconvert Find(this ITable<billing_Heatersconvert> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Heatertype Find(this ITable<billing_Heatertype> table, int Htypeid)
		{
			return table.FirstOrDefault(t =>
				t.Htypeid == Htypeid);
		}

		public static billing_Housedevicereading Find(this ITable<billing_Housedevicereading> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_HouseHub Find(this ITable<billing_HouseHub> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Housenorm Find(this ITable<billing_Housenorm> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_ImportResult Find(this ITable<billing_ImportResult> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_ImportResultDetail Find(this ITable<billing_ImportResultDetail> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Resource Find(this ITable<billing_Resource> table, int Resid)
		{
			return table.FirstOrDefault(t =>
				t.Resid == Resid);
		}

		public static billing_Role Find(this ITable<billing_Role> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Room Find(this ITable<billing_Room> table, int Roomid)
		{
			return table.FirstOrDefault(t =>
				t.Roomid == Roomid);
		}

		public static billing_Roomdevice Find(this ITable<billing_Roomdevice> table, int Roomid, string Devid)
		{
			return table.FirstOrDefault(t =>
				t.Roomid == Roomid &&
				t.Devid  == Devid);
		}

		public static billing_Roomtype Find(this ITable<billing_Roomtype> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Setting Find(this ITable<billing_Setting> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_TempReading Find(this ITable<billing_TempReading> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_Unit Find(this ITable<billing_Unit> table, int Unitid)
		{
			return table.FirstOrDefault(t =>
				t.Unitid == Unitid);
		}

		public static billing_User Find(this ITable<billing_User> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static billing_UserRole Find(this ITable<billing_UserRole> table, int UserId, int RoleId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId &&
				t.RoleId == RoleId);
		}
	}
}
